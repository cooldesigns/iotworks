
/Users/eva/Documents/Particle/argon-project/target/1.4.4/argon/argon-project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003e90  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000000  2003f400  2003f400  00017f54  2**0
                  CONTENTS
  4 .data         00000078  2003e2ec  000d7eb0  0000e2ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000048c  2003e364  2003e364  0001e364  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d7f28  000d7f28  00017f28  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d7f50  000d7f50  00017f50  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000e9ce7  00000000  00000000  00017f54  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000121b8  00000000  00000000  00101c3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001ed9d  00000000  00000000  00113df3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002990  00000000  00000000  00132b90  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004b20  00000000  00000000  00135520  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00038778  00000000  00000000  0013a040  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002b78f  00000000  00000000  001727b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    001059c9  00000000  00000000  0019df47  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000d52c  00000000  00000000  002a3910  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f003 fba6 	bl	d7782 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f003 fbc6 	bl	d77ce <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e2ec 	.word	0x2003e2ec
   d404c:	000d7eb0 	.word	0x000d7eb0
   d4050:	2003e364 	.word	0x2003e364
   d4054:	2003e364 	.word	0x2003e364
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f002 fc7b 	bl	d6958 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000d7eb0 	.word	0x000d7eb0
   d4084:	000d7e70 	.word	0x000d7e70

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 b946 	b.w	d4318 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 f83f 	bl	d4110 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f002 bc2d 	b.w	d68f4 <_post_loop>

000d409a <_Znwj>:
   d409a:	f000 bda3 	b.w	d4be4 <malloc>

000d409e <_ZdlPv>:
   d409e:	f000 bda9 	b.w	d4bf4 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f000 bda7 	b.w	d4bf4 <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr
	...

000d40b8 <_ZL14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:

// Static function for handling Bluetooth Low Energy callbacks
static void onDataReceived(const uint8_t *data, size_t len, const BlePeerDevice &peer, void *context)
{
  // We're only looking for one byte
  if (len != 1)
   d40b8:	2901      	cmp	r1, #1
// Static level tracking
static led_level_t m_led_level;

// Static function for handling Bluetooth Low Energy callbacks
static void onDataReceived(const uint8_t *data, size_t len, const BlePeerDevice &peer, void *context)
{
   d40ba:	b410      	push	{r4}
  // We're only looking for one byte
  if (len != 1)
   d40bc:	d11b      	bne.n	d40f6 <_ZL14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3e>
  {
    return;
  }

  // Sets the global level
  if (context == red)
   d40be:	4a0f      	ldr	r2, [pc, #60]	; (d40fc <_ZL14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x44>)
   d40c0:	4c0f      	ldr	r4, [pc, #60]	; (d4100 <_ZL14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x48>)
   d40c2:	6812      	ldr	r2, [r2, #0]
   d40c4:	4293      	cmp	r3, r2
   d40c6:	d102      	bne.n	d40ce <_ZL14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x16>
  {
    m_led_level.red = data[0];
   d40c8:	7803      	ldrb	r3, [r0, #0]
   d40ca:	7023      	strb	r3, [r4, #0]
   d40cc:	e00c      	b.n	d40e8 <_ZL14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x30>
  }
  else if (context == green)
   d40ce:	4a0d      	ldr	r2, [pc, #52]	; (d4104 <_ZL14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4c>)
   d40d0:	6812      	ldr	r2, [r2, #0]
   d40d2:	4293      	cmp	r3, r2
   d40d4:	d102      	bne.n	d40dc <_ZL14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x24>
  {
    m_led_level.green = data[0];
   d40d6:	7803      	ldrb	r3, [r0, #0]
   d40d8:	7063      	strb	r3, [r4, #1]
   d40da:	e005      	b.n	d40e8 <_ZL14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x30>
  }
  else if (context == blue)
   d40dc:	4a0a      	ldr	r2, [pc, #40]	; (d4108 <_ZL14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x50>)
   d40de:	6812      	ldr	r2, [r2, #0]
   d40e0:	4293      	cmp	r3, r2
  {
    m_led_level.blue = data[0];
   d40e2:	bf04      	itt	eq
   d40e4:	7803      	ldrbeq	r3, [r0, #0]
   d40e6:	70a3      	strbeq	r3, [r4, #2]
  }

  // Set RGB color
  RGB.color(m_led_level.red, m_led_level.green, m_led_level.blue);
   d40e8:	78a2      	ldrb	r2, [r4, #2]
   d40ea:	7861      	ldrb	r1, [r4, #1]
   d40ec:	7820      	ldrb	r0, [r4, #0]
}
   d40ee:	f85d 4b04 	ldr.w	r4, [sp], #4
  {
    m_led_level.blue = data[0];
  }

  // Set RGB color
  RGB.color(m_led_level.red, m_led_level.green, m_led_level.blue);
   d40f2:	f002 b989 	b.w	d6408 <_ZN8RGBClass5colorEiii>
}
   d40f6:	f85d 4b04 	ldr.w	r4, [sp], #4
   d40fa:	4770      	bx	lr
   d40fc:	2003e2ec 	.word	0x2003e2ec
   d4100:	2003e38c 	.word	0x2003e38c
   d4104:	2003e2f8 	.word	0x2003e2f8
   d4108:	2003e2f4 	.word	0x2003e2f4
   d410c:	00000000 	.word	0x00000000

000d4110 <loop>:
  BLE.advertise(&advData);
}

// loop() runs over and over again, as quickly as it can execute.
void loop()
{
   d4110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  if (timeSinceLastRead > 2000)
   d4114:	4c50      	ldr	r4, [pc, #320]	; (d4258 <loop+0x148>)
   d4116:	6823      	ldr	r3, [r4, #0]
   d4118:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
   d411c:	f340 808d 	ble.w	d423a <loop+0x12a>
  {
    // read dht12
    am2320.read();
   d4120:	484e      	ldr	r0, [pc, #312]	; (d425c <loop+0x14c>)
    temperature = am2320.getTemperature();
   d4122:	4e4f      	ldr	r6, [pc, #316]	; (d4260 <loop+0x150>)
    humidity = am2320.getHumidity();
   d4124:	4d4f      	ldr	r5, [pc, #316]	; (d4264 <loop+0x154>)
{

  if (timeSinceLastRead > 2000)
  {
    // read dht12
    am2320.read();
   d4126:	f000 fa7d 	bl	d4624 <_ZN6AM23204readEv>
    temperature = am2320.getTemperature();
   d412a:	484c      	ldr	r0, [pc, #304]	; (d425c <loop+0x14c>)
   d412c:	f000 fad7 	bl	d46de <_ZN6AM232014getTemperatureEv>
    humidity = am2320.getHumidity();
   d4130:	484a      	ldr	r0, [pc, #296]	; (d425c <loop+0x14c>)

  if (timeSinceLastRead > 2000)
  {
    // read dht12
    am2320.read();
    temperature = am2320.getTemperature();
   d4132:	ed86 0a00 	vstr	s0, [r6]
    humidity = am2320.getHumidity();
   d4136:	f000 fac5 	bl	d46c4 <_ZN6AM232011getHumidityEv>
   d413a:	ed85 0a00 	vstr	s0, [r5]
    Serial.print("Digital --- ");
   d413e:	f002 fb57 	bl	d67f0 <_Z16_fetch_usbserialv>
   d4142:	4949      	ldr	r1, [pc, #292]	; (d4268 <loop+0x158>)
   d4144:	f002 f81c 	bl	d6180 <_ZN5Print5printEPKc>
    Serial.print(temperature);
   d4148:	f002 fb52 	bl	d67f0 <_Z16_fetch_usbserialv>
   d414c:	4607      	mov	r7, r0
   d414e:	6830      	ldr	r0, [r6, #0]
   d4150:	f002 ff5e 	bl	d7010 <__aeabi_f2d>
   d4154:	ec41 0b10 	vmov	d0, r0, r1
   d4158:	2102      	movs	r1, #2
   d415a:	4638      	mov	r0, r7
   d415c:	f002 f930 	bl	d63c0 <_ZN5Print5printEdi>
    Serial.print(" °C, ");
   d4160:	f002 fb46 	bl	d67f0 <_Z16_fetch_usbserialv>
   d4164:	4941      	ldr	r1, [pc, #260]	; (d426c <loop+0x15c>)
    Serial.print(humidity);
    Serial.println(" %");

    // calculate temperature for LM335
    temperatureK = voltageOut / 10;
    temperatureC = temperatureK - 273;
   d4166:	4f42      	ldr	r7, [pc, #264]	; (d4270 <loop+0x160>)
    am2320.read();
    temperature = am2320.getTemperature();
    humidity = am2320.getHumidity();
    Serial.print("Digital --- ");
    Serial.print(temperature);
    Serial.print(" °C, ");
   d4168:	f002 f80a 	bl	d6180 <_ZN5Print5printEPKc>
    Serial.print(humidity);
   d416c:	f002 fb40 	bl	d67f0 <_Z16_fetch_usbserialv>
   d4170:	4606      	mov	r6, r0
   d4172:	6828      	ldr	r0, [r5, #0]
    Serial.println(" %");

    // calculate temperature for LM335
    temperatureK = voltageOut / 10;
   d4174:	4d3f      	ldr	r5, [pc, #252]	; (d4274 <loop+0x164>)
    temperature = am2320.getTemperature();
    humidity = am2320.getHumidity();
    Serial.print("Digital --- ");
    Serial.print(temperature);
    Serial.print(" °C, ");
    Serial.print(humidity);
   d4176:	f002 ff4b 	bl	d7010 <__aeabi_f2d>
   d417a:	ec41 0b10 	vmov	d0, r0, r1
   d417e:	2102      	movs	r1, #2
   d4180:	4630      	mov	r0, r6
   d4182:	f002 f91d 	bl	d63c0 <_ZN5Print5printEdi>
    Serial.println(" %");
   d4186:	f002 fb33 	bl	d67f0 <_Z16_fetch_usbserialv>
   d418a:	493b      	ldr	r1, [pc, #236]	; (d4278 <loop+0x168>)

    // calculate temperature for LM335
    temperatureK = voltageOut / 10;
    temperatureC = temperatureK - 273;
    temperatureF = (temperatureC * 1.8) + 32;
   d418c:	4e3b      	ldr	r6, [pc, #236]	; (d427c <loop+0x16c>)
    humidity = am2320.getHumidity();
    Serial.print("Digital --- ");
    Serial.print(temperature);
    Serial.print(" °C, ");
    Serial.print(humidity);
    Serial.println(" %");
   d418e:	f002 f80a 	bl	d61a6 <_ZN5Print7printlnEPKc>

    // calculate temperature for LM335
    temperatureK = voltageOut / 10;
   d4192:	edd5 6a00 	vldr	s13, [r5]
   d4196:	4b3a      	ldr	r3, [pc, #232]	; (d4280 <loop+0x170>)
   d4198:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
   d419c:	eec6 7a87 	vdiv.f32	s15, s13, s14
    temperatureC = temperatureK - 273;
   d41a0:	ed9f 7a38 	vldr	s14, [pc, #224]	; d4284 <loop+0x174>
    Serial.print(" °C, ");
    Serial.print(humidity);
    Serial.println(" %");

    // calculate temperature for LM335
    temperatureK = voltageOut / 10;
   d41a4:	edc3 7a00 	vstr	s15, [r3]
    temperatureC = temperatureK - 273;
   d41a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
   d41ac:	edc7 7a00 	vstr	s15, [r7]
    temperatureF = (temperatureC * 1.8) + 32;
   d41b0:	ee17 0a90 	vmov	r0, s15
   d41b4:	f002 ff2c 	bl	d7010 <__aeabi_f2d>
   d41b8:	a325      	add	r3, pc, #148	; (adr r3, d4250 <loop+0x140>)
   d41ba:	e9d3 2300 	ldrd	r2, r3, [r3]
   d41be:	f002 ff7b 	bl	d70b8 <__aeabi_dmul>
   d41c2:	4b31      	ldr	r3, [pc, #196]	; (d4288 <loop+0x178>)
   d41c4:	2200      	movs	r2, #0
   d41c6:	f002 fdc5 	bl	d6d54 <__adddf3>
   d41ca:	f003 fa6d 	bl	d76a8 <__aeabi_d2f>
   d41ce:	6030      	str	r0, [r6, #0]

    Serial.print("Analog --- Temperature(ºC): ");
   d41d0:	f002 fb0e 	bl	d67f0 <_Z16_fetch_usbserialv>
   d41d4:	492d      	ldr	r1, [pc, #180]	; (d428c <loop+0x17c>)
   d41d6:	f001 ffd3 	bl	d6180 <_ZN5Print5printEPKc>
    Serial.print(temperatureC);
   d41da:	f002 fb09 	bl	d67f0 <_Z16_fetch_usbserialv>
   d41de:	4680      	mov	r8, r0
   d41e0:	6838      	ldr	r0, [r7, #0]
   d41e2:	f002 ff15 	bl	d7010 <__aeabi_f2d>
   d41e6:	ec41 0b10 	vmov	d0, r0, r1
   d41ea:	2102      	movs	r1, #2
   d41ec:	4640      	mov	r0, r8
   d41ee:	f002 f8e7 	bl	d63c0 <_ZN5Print5printEdi>
    Serial.print("  Temperature(ºF): ");
   d41f2:	f002 fafd 	bl	d67f0 <_Z16_fetch_usbserialv>
   d41f6:	4926      	ldr	r1, [pc, #152]	; (d4290 <loop+0x180>)
   d41f8:	f001 ffc2 	bl	d6180 <_ZN5Print5printEPKc>
    Serial.print(temperatureF);
   d41fc:	f002 faf8 	bl	d67f0 <_Z16_fetch_usbserialv>
   d4200:	4607      	mov	r7, r0
   d4202:	6830      	ldr	r0, [r6, #0]
   d4204:	f002 ff04 	bl	d7010 <__aeabi_f2d>
   d4208:	ec41 0b10 	vmov	d0, r0, r1
   d420c:	2102      	movs	r1, #2
   d420e:	4638      	mov	r0, r7
   d4210:	f002 f8d6 	bl	d63c0 <_ZN5Print5printEdi>
    Serial.print("  Voltage(mV): ");
   d4214:	f002 faec 	bl	d67f0 <_Z16_fetch_usbserialv>
   d4218:	491e      	ldr	r1, [pc, #120]	; (d4294 <loop+0x184>)
   d421a:	f001 ffb1 	bl	d6180 <_ZN5Print5printEPKc>
    Serial.println(voltageOut);
   d421e:	f002 fae7 	bl	d67f0 <_Z16_fetch_usbserialv>
   d4222:	4606      	mov	r6, r0
   d4224:	6828      	ldr	r0, [r5, #0]
   d4226:	f002 fef3 	bl	d7010 <__aeabi_f2d>
   d422a:	ec41 0b10 	vmov	d0, r0, r1
   d422e:	2102      	movs	r1, #2
   d4230:	4630      	mov	r0, r6
   d4232:	f002 f8c8 	bl	d63c6 <_ZN5Print7printlnEdi>
    timeSinceLastRead = 0;
   d4236:	2300      	movs	r3, #0
   d4238:	e004      	b.n	d4244 <loop+0x134>
  }
  else
  {
    delay(100);
   d423a:	2064      	movs	r0, #100	; 0x64
   d423c:	f000 fcea 	bl	d4c14 <delay>
    timeSinceLastRead += 100;
   d4240:	6823      	ldr	r3, [r4, #0]
   d4242:	3364      	adds	r3, #100	; 0x64
   d4244:	6023      	str	r3, [r4, #0]
   d4246:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d424a:	bf00      	nop
   d424c:	f3af 8000 	nop.w
   d4250:	cccccccd 	.word	0xcccccccd
   d4254:	3ffccccc 	.word	0x3ffccccc
   d4258:	2003e384 	.word	0x2003e384
   d425c:	2003e3a0 	.word	0x2003e3a0
   d4260:	2003e3a8 	.word	0x2003e3a8
   d4264:	2003e388 	.word	0x2003e388
   d4268:	000d786c 	.word	0x000d786c
   d426c:	000d7879 	.word	0x000d7879
   d4270:	2003e36c 	.word	0x2003e36c
   d4274:	2003e374 	.word	0x2003e374
   d4278:	000d7880 	.word	0x000d7880
   d427c:	2003e370 	.word	0x2003e370
   d4280:	2003e378 	.word	0x2003e378
   d4284:	43888000 	.word	0x43888000
   d4288:	40400000 	.word	0x40400000
   d428c:	000d7883 	.word	0x000d7883
   d4290:	000d78a1 	.word	0x000d78a1
   d4294:	000d78b6 	.word	0x000d78b6

000d4298 <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_25BleCharacteristicPropertyET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESC_>:
    BleCharacteristic(const String& desc, BleCharacteristicProperty properties, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr)
            : BleCharacteristic(desc.c_str(), properties, callback, context) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, BleCharacteristicProperty properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   d4298:	b5f0      	push	{r4, r5, r6, r7, lr}
   d429a:	460e      	mov	r6, r1
   d429c:	b08f      	sub	sp, #60	; 0x3c

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d429e:	2100      	movs	r1, #0
   d42a0:	4604      	mov	r4, r0
   d42a2:	6001      	str	r1, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d42a4:	6041      	str	r1, [r0, #4]
        BleUuid cUuid(charUuid);
        BleUuid sUuid(svcUuid);
   d42a6:	ad09      	add	r5, sp, #36	; 0x24
            : BleCharacteristic(desc.c_str(), properties, callback, context) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, BleCharacteristicProperty properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
        BleUuid cUuid(charUuid);
   d42a8:	4619      	mov	r1, r3
   d42aa:	a804      	add	r0, sp, #16
    BleCharacteristic(const String& desc, BleCharacteristicProperty properties, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr)
            : BleCharacteristic(desc.c_str(), properties, callback, context) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, BleCharacteristicProperty properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   d42ac:	4617      	mov	r7, r2
        BleUuid cUuid(charUuid);
   d42ae:	f000 fe2e 	bl	d4f0e <_ZN8particle7BleUuidC1EPKc>
        BleUuid sUuid(svcUuid);
   d42b2:	9914      	ldr	r1, [sp, #80]	; 0x50
   d42b4:	4628      	mov	r0, r5
   d42b6:	f000 fe2a 	bl	d4f0e <_ZN8particle7BleUuidC1EPKc>
        construct(desc, properties, cUuid, sUuid, callback, context);
   d42ba:	9b16      	ldr	r3, [sp, #88]	; 0x58
   d42bc:	9302      	str	r3, [sp, #8]
   d42be:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d42c0:	9301      	str	r3, [sp, #4]
   d42c2:	4620      	mov	r0, r4
   d42c4:	9500      	str	r5, [sp, #0]
   d42c6:	ab04      	add	r3, sp, #16
   d42c8:	463a      	mov	r2, r7
   d42ca:	4631      	mov	r1, r6
   d42cc:	f001 fae0 	bl	d5890 <_ZN8particle17BleCharacteristic9constructEPKcNS_25BleCharacteristicPropertyERNS_7BleUuidES5_PFvPKhjRKNS_13BlePeerDeviceEPvESB_>
    }
   d42d0:	4620      	mov	r0, r4
   d42d2:	b00f      	add	sp, #60	; 0x3c
   d42d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d42d6 <_ZN8particle18BleAdvertisingData17appendServiceUUIDINS_7BleUuidEEEjT_b>:
    // According to the Bluetooth CSS, Local Name shall not appear more than once in a block.
    size_t appendLocalName(const char* name);
    size_t appendLocalName(const String& name);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
   d42d6:	b530      	push	{r4, r5, lr}
   d42d8:	b089      	sub	sp, #36	; 0x24
   d42da:	4604      	mov	r4, r0
        BleUuid tempUUID(uuid);
   d42dc:	a803      	add	r0, sp, #12
    // According to the Bluetooth CSS, Local Name shall not appear more than once in a block.
    size_t appendLocalName(const char* name);
    size_t appendLocalName(const String& name);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
   d42de:	4615      	mov	r5, r2
        BleUuid tempUUID(uuid);
   d42e0:	f000 fd20 	bl	d4d24 <_ZN8particle7BleUuidC1ERKS0_>
        if (tempUUID.type() == BleUuidType::SHORT) {
   d42e4:	a803      	add	r0, sp, #12
   d42e6:	f000 fd65 	bl	d4db4 <_ZNK8particle7BleUuid4typeEv>
   d42ea:	b948      	cbnz	r0, d4300 <_ZN8particle18BleAdvertisingData17appendServiceUUIDINS_7BleUuidEEEjT_b+0x2a>
            uint16_t uuid16 = tempUUID.shorted();
   d42ec:	a803      	add	r0, sp, #12
   d42ee:	f000 fd7e 	bl	d4dee <_ZNK8particle7BleUuid7shortedEv>
   d42f2:	aa08      	add	r2, sp, #32
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d42f4:	2302      	movs	r3, #2

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
        if (tempUUID.type() == BleUuidType::SHORT) {
            uint16_t uuid16 = tempUUID.shorted();
   d42f6:	f822 0d16 	strh.w	r0, [r2, #-22]!
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d42fa:	2103      	movs	r1, #3
   d42fc:	9500      	str	r5, [sp, #0]
   d42fe:	e006      	b.n	d430e <_ZN8particle18BleAdvertisingData17appendServiceUUIDINS_7BleUuidEEEjT_b+0x38>
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   d4300:	a803      	add	r0, sp, #12
   d4302:	f000 fd76 	bl	d4df2 <_ZNK8particle7BleUuid8rawBytesEv>
   d4306:	9500      	str	r5, [sp, #0]
   d4308:	2310      	movs	r3, #16
   d430a:	4602      	mov	r2, r0
   d430c:	2107      	movs	r1, #7
   d430e:	4620      	mov	r0, r4
   d4310:	f000 fe20 	bl	d4f54 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
        }
    }
   d4314:	b009      	add	sp, #36	; 0x24
   d4316:	bd30      	pop	{r4, r5, pc}

000d4318 <setup>:
  RGB.color(m_led_level.red, m_led_level.green, m_led_level.blue);
}

// setup() runs once, when the device is first turned on.
void setup()
{
   d4318:	b5f0      	push	{r4, r5, r6, r7, lr}
  am2320.begin();
   d431a:	4885      	ldr	r0, [pc, #532]	; (d4530 <setup+0x218>)
  m_led_level.red = 0;
  m_led_level.green = 0;
  m_led_level.blue = 0;

  // Set the RGB BLE service
  BleUuid rgbService(serviceUuid);
   d431c:	4e85      	ldr	r6, [pc, #532]	; (d4534 <setup+0x21c>)
  BleUuid batteryLevelService(0x180f);
  // Set up characteristics
  BleCharacteristic temperatureMeasurementCharacteristic("temp", BleCharacteristicProperty::NOTIFY, BleUuid(0x2A1C), healthThermometerService);
  BleCharacteristic batteryLevelCharacteristic("bat", BleCharacteristicProperty::NOTIFY, BleUuid(0x2A19), batteryLevelService);

  BleCharacteristic redCharacteristic("red", BleCharacteristicProperty::WRITE_WO_RSP, red, serviceUuid, onDataReceived, (void *)red);
   d431e:	4f86      	ldr	r7, [pc, #536]	; (d4538 <setup+0x220>)
  RGB.color(m_led_level.red, m_led_level.green, m_led_level.blue);
}

// setup() runs once, when the device is first turned on.
void setup()
{
   d4320:	b0b3      	sub	sp, #204	; 0xcc
  am2320.begin();
   d4322:	f000 f95c 	bl	d45de <_ZN6AM23205beginEv>

  pinMode(sensorPin, INPUT);
   d4326:	2100      	movs	r1, #0
   d4328:	2011      	movs	r0, #17
   d432a:	f002 fb53 	bl	d69d4 <pinMode>
  Serial.begin(9600);
   d432e:	f002 fa5f 	bl	d67f0 <_Z16_fetch_usbserialv>
   d4332:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4336:	f002 fa4f 	bl	d67d8 <_ZN9USBSerial5beginEl>
  sensorValue = analogRead(sensorPin);
   d433a:	2011      	movs	r0, #17
   d433c:	f002 fb5b 	bl	d69f6 <analogRead>
   d4340:	ee07 0a90 	vmov	s15, r0
   d4344:	4b7d      	ldr	r3, [pc, #500]	; (d453c <setup+0x224>)
  voltageOut = (sensorValue * 3300) / 1024;
   d4346:	ed9f 7a7e 	vldr	s14, [pc, #504]	; d4540 <setup+0x228>

  myservo.attach(servo_pin);
   d434a:	487e      	ldr	r0, [pc, #504]	; (d4544 <setup+0x22c>)
{
  am2320.begin();

  pinMode(sensorPin, INPUT);
  Serial.begin(9600);
  sensorValue = analogRead(sensorPin);
   d434c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  voltageOut = (sensorValue * 3300) / 1024;

  myservo.attach(servo_pin);
   d4350:	2500      	movs	r5, #0
{
  am2320.begin();

  pinMode(sensorPin, INPUT);
  Serial.begin(9600);
  sensorValue = analogRead(sensorPin);
   d4352:	edc3 7a00 	vstr	s15, [r3]
  voltageOut = (sensorValue * 3300) / 1024;
   d4356:	ee67 7a87 	vmul.f32	s15, s15, s14
   d435a:	ed9f 7a7b 	vldr	s14, [pc, #492]	; d4548 <setup+0x230>
   d435e:	4b7b      	ldr	r3, [pc, #492]	; (d454c <setup+0x234>)
   d4360:	ee67 7a87 	vmul.f32	s15, s15, s14

  myservo.attach(servo_pin);
   d4364:	f44f 7208 	mov.w	r2, #544	; 0x220
  am2320.begin();

  pinMode(sensorPin, INPUT);
  Serial.begin(9600);
  sensorValue = analogRead(sensorPin);
  voltageOut = (sensorValue * 3300) / 1024;
   d4368:	edc3 7a00 	vstr	s15, [r3]

  myservo.attach(servo_pin);
   d436c:	23b4      	movs	r3, #180	; 0xb4
   d436e:	9301      	str	r3, [sp, #4]
   d4370:	2110      	movs	r1, #16
   d4372:	f44f 6316 	mov.w	r3, #2400	; 0x960
   d4376:	9500      	str	r5, [sp, #0]
   d4378:	f002 f88b 	bl	d6492 <_ZN5Servo6attachEtttss>

  // Enable app control of LED
  RGB.control(true);
   d437c:	2001      	movs	r0, #1
   d437e:	f002 f833 	bl	d63e8 <_ZN8RGBClass7controlEb>

  // Init default level
  m_led_level.red = 0;
   d4382:	4b73      	ldr	r3, [pc, #460]	; (d4550 <setup+0x238>)
  m_led_level.green = 0;
  m_led_level.blue = 0;

  // Set the RGB BLE service
  BleUuid rgbService(serviceUuid);
   d4384:	6831      	ldr	r1, [r6, #0]

  // Enable app control of LED
  RGB.control(true);

  // Init default level
  m_led_level.red = 0;
   d4386:	701d      	strb	r5, [r3, #0]
  m_led_level.green = 0;
  m_led_level.blue = 0;

  // Set the RGB BLE service
  BleUuid rgbService(serviceUuid);
   d4388:	a80b      	add	r0, sp, #44	; 0x2c
  // Enable app control of LED
  RGB.control(true);

  // Init default level
  m_led_level.red = 0;
  m_led_level.green = 0;
   d438a:	705d      	strb	r5, [r3, #1]
  m_led_level.blue = 0;
   d438c:	709d      	strb	r5, [r3, #2]

  // Set the RGB BLE service
  BleUuid rgbService(serviceUuid);
   d438e:	f000 fdbe 	bl	d4f0e <_ZN8particle7BleUuidC1EPKc>

  // Set the Health Thermometer and Battery Level service
  BleUuid healthThermometerService(0x1809);
   d4392:	f641 0109 	movw	r1, #6153	; 0x1809
   d4396:	a810      	add	r0, sp, #64	; 0x40
   d4398:	f000 fcf5 	bl	d4d86 <_ZN8particle7BleUuidC1Et>
  BleUuid batteryLevelService(0x180f);
   d439c:	f641 010f 	movw	r1, #6159	; 0x180f
   d43a0:	a815      	add	r0, sp, #84	; 0x54
   d43a2:	f000 fcf0 	bl	d4d86 <_ZN8particle7BleUuidC1Et>
  // Set up characteristics
  BleCharacteristic temperatureMeasurementCharacteristic("temp", BleCharacteristicProperty::NOTIFY, BleUuid(0x2A1C), healthThermometerService);
   d43a6:	f642 211c 	movw	r1, #10780	; 0x2a1c
   d43aa:	a81a      	add	r0, sp, #104	; 0x68
   d43ac:	f000 fceb 	bl	d4d86 <_ZN8particle7BleUuidC1Et>
   d43b0:	a910      	add	r1, sp, #64	; 0x40
   d43b2:	a81f      	add	r0, sp, #124	; 0x7c
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, BleCharacteristicProperty properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
        BleUuid cUuid(charUuid);
        BleUuid sUuid(svcUuid);
   d43b4:	ac29      	add	r4, sp, #164	; 0xa4
   d43b6:	f000 fcb5 	bl	d4d24 <_ZN8particle7BleUuidC1ERKS0_>
            : BleCharacteristic(desc.c_str(), properties, callback, context) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, BleCharacteristicProperty properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
        BleUuid cUuid(charUuid);
   d43ba:	a91a      	add	r1, sp, #104	; 0x68
   d43bc:	a824      	add	r0, sp, #144	; 0x90

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d43be:	9505      	str	r5, [sp, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d43c0:	9506      	str	r5, [sp, #24]
   d43c2:	f000 fcaf 	bl	d4d24 <_ZN8particle7BleUuidC1ERKS0_>
        BleUuid sUuid(svcUuid);
   d43c6:	a91f      	add	r1, sp, #124	; 0x7c
   d43c8:	4620      	mov	r0, r4
   d43ca:	f000 fcab 	bl	d4d24 <_ZN8particle7BleUuidC1ERKS0_>
        construct(desc, properties, cUuid, sUuid, callback, context);
   d43ce:	ab24      	add	r3, sp, #144	; 0x90
   d43d0:	2210      	movs	r2, #16
   d43d2:	a805      	add	r0, sp, #20
   d43d4:	9502      	str	r5, [sp, #8]
   d43d6:	e88d 0030 	stmia.w	sp, {r4, r5}
   d43da:	495e      	ldr	r1, [pc, #376]	; (d4554 <setup+0x23c>)
   d43dc:	f001 fa58 	bl	d5890 <_ZN8particle17BleCharacteristic9constructEPKcNS_25BleCharacteristicPropertyERNS_7BleUuidES5_PFvPKhjRKNS_13BlePeerDeviceEPvESB_>
  BleCharacteristic batteryLevelCharacteristic("bat", BleCharacteristicProperty::NOTIFY, BleUuid(0x2A19), batteryLevelService);
   d43e0:	f642 2119 	movw	r1, #10777	; 0x2a19
   d43e4:	a81a      	add	r0, sp, #104	; 0x68
   d43e6:	f000 fcce 	bl	d4d86 <_ZN8particle7BleUuidC1Et>
   d43ea:	a915      	add	r1, sp, #84	; 0x54
   d43ec:	a81f      	add	r0, sp, #124	; 0x7c
   d43ee:	f000 fc99 	bl	d4d24 <_ZN8particle7BleUuidC1ERKS0_>
            : BleCharacteristic(desc.c_str(), properties, callback, context) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, BleCharacteristicProperty properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
        BleUuid cUuid(charUuid);
   d43f2:	a91a      	add	r1, sp, #104	; 0x68
   d43f4:	a824      	add	r0, sp, #144	; 0x90

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d43f6:	9507      	str	r5, [sp, #28]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d43f8:	9508      	str	r5, [sp, #32]
   d43fa:	f000 fc93 	bl	d4d24 <_ZN8particle7BleUuidC1ERKS0_>
        BleUuid sUuid(svcUuid);
   d43fe:	a91f      	add	r1, sp, #124	; 0x7c
   d4400:	4620      	mov	r0, r4
   d4402:	f000 fc8f 	bl	d4d24 <_ZN8particle7BleUuidC1ERKS0_>
        construct(desc, properties, cUuid, sUuid, callback, context);
   d4406:	ab24      	add	r3, sp, #144	; 0x90
   d4408:	a807      	add	r0, sp, #28
   d440a:	9502      	str	r5, [sp, #8]
   d440c:	e88d 0030 	stmia.w	sp, {r4, r5}
   d4410:	2210      	movs	r2, #16
   d4412:	4951      	ldr	r1, [pc, #324]	; (d4558 <setup+0x240>)
   d4414:	f001 fa3c 	bl	d5890 <_ZN8particle17BleCharacteristic9constructEPKcNS_25BleCharacteristicPropertyERNS_7BleUuidES5_PFvPKhjRKNS_13BlePeerDeviceEPvESB_>

  BleCharacteristic redCharacteristic("red", BleCharacteristicProperty::WRITE_WO_RSP, red, serviceUuid, onDataReceived, (void *)red);
   d4418:	4b50      	ldr	r3, [pc, #320]	; (d455c <setup+0x244>)
   d441a:	6832      	ldr	r2, [r6, #0]
   d441c:	681b      	ldr	r3, [r3, #0]
   d441e:	9302      	str	r3, [sp, #8]
   d4420:	9200      	str	r2, [sp, #0]
   d4422:	9701      	str	r7, [sp, #4]
   d4424:	2204      	movs	r2, #4
   d4426:	494e      	ldr	r1, [pc, #312]	; (d4560 <setup+0x248>)
   d4428:	a809      	add	r0, sp, #36	; 0x24
   d442a:	f7ff ff35 	bl	d4298 <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_25BleCharacteristicPropertyET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESC_>
  BleCharacteristic greenCharacteristic("green", BleCharacteristicProperty::WRITE_WO_RSP, green, serviceUuid, onDataReceived, (void *)green);
   d442e:	4b4d      	ldr	r3, [pc, #308]	; (d4564 <setup+0x24c>)
   d4430:	6832      	ldr	r2, [r6, #0]
   d4432:	681b      	ldr	r3, [r3, #0]
   d4434:	9302      	str	r3, [sp, #8]
   d4436:	9200      	str	r2, [sp, #0]
   d4438:	9701      	str	r7, [sp, #4]
   d443a:	2204      	movs	r2, #4
   d443c:	494a      	ldr	r1, [pc, #296]	; (d4568 <setup+0x250>)
   d443e:	a81a      	add	r0, sp, #104	; 0x68
   d4440:	f7ff ff2a 	bl	d4298 <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_25BleCharacteristicPropertyET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESC_>
  BleCharacteristic blueCharacteristic("blue", BleCharacteristicProperty::WRITE_WO_RSP, blue, serviceUuid, onDataReceived, (void *)blue);
   d4444:	4b49      	ldr	r3, [pc, #292]	; (d456c <setup+0x254>)
   d4446:	6832      	ldr	r2, [r6, #0]
   d4448:	681b      	ldr	r3, [r3, #0]
   d444a:	9302      	str	r3, [sp, #8]
   d444c:	9200      	str	r2, [sp, #0]
   d444e:	4948      	ldr	r1, [pc, #288]	; (d4570 <setup+0x258>)
   d4450:	9701      	str	r7, [sp, #4]
   d4452:	2204      	movs	r2, #4
   d4454:	a81f      	add	r0, sp, #124	; 0x7c
   d4456:	f7ff ff1f 	bl	d4298 <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_25BleCharacteristicPropertyET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESC_>

  // Add the characteristics
  BLE.addCharacteristic(temperatureMeasurementCharacteristic);
   d445a:	f000 fe8b 	bl	d5174 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d445e:	aa05      	add	r2, sp, #20
   d4460:	4601      	mov	r1, r0
   d4462:	4620      	mov	r0, r4
   d4464:	f001 fac6 	bl	d59f4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d4468:	4620      	mov	r0, r4
   d446a:	f000 ff38 	bl	d52de <_ZN8particle17BleCharacteristicD1Ev>
  BLE.addCharacteristic(batteryLevelCharacteristic);
   d446e:	f000 fe81 	bl	d5174 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4472:	aa07      	add	r2, sp, #28
   d4474:	4601      	mov	r1, r0
   d4476:	4620      	mov	r0, r4
   d4478:	f001 fabc 	bl	d59f4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d447c:	4620      	mov	r0, r4
   d447e:	f000 ff2e 	bl	d52de <_ZN8particle17BleCharacteristicD1Ev>

  BLE.addCharacteristic(redCharacteristic);
   d4482:	f000 fe77 	bl	d5174 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4486:	aa09      	add	r2, sp, #36	; 0x24
   d4488:	4601      	mov	r1, r0
   d448a:	4620      	mov	r0, r4
   d448c:	f001 fab2 	bl	d59f4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d4490:	4620      	mov	r0, r4
   d4492:	f000 ff24 	bl	d52de <_ZN8particle17BleCharacteristicD1Ev>
  BLE.addCharacteristic(greenCharacteristic);
   d4496:	f000 fe6d 	bl	d5174 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d449a:	aa1a      	add	r2, sp, #104	; 0x68
   d449c:	4601      	mov	r1, r0
   d449e:	4620      	mov	r0, r4
   d44a0:	f001 faa8 	bl	d59f4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d44a4:	4620      	mov	r0, r4
   d44a6:	f000 ff1a 	bl	d52de <_ZN8particle17BleCharacteristicD1Ev>
  BLE.addCharacteristic(blueCharacteristic);
   d44aa:	f000 fe63 	bl	d5174 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d44ae:	aa1f      	add	r2, sp, #124	; 0x7c
   d44b0:	4601      	mov	r1, r0
   d44b2:	4620      	mov	r0, r4
   d44b4:	f001 fa9e 	bl	d59f4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d44b8:	4620      	mov	r0, r4
   d44ba:	f000 ff10 	bl	d52de <_ZN8particle17BleCharacteristicD1Ev>

  // Advertising data
  BleAdvertisingData advData;
   d44be:	4620      	mov	r0, r4
   d44c0:	f000 fd8f 	bl	d4fe2 <_ZN8particle18BleAdvertisingDataC1Ev>

  // Add the device name
  advData.appendLocalName("Argon");
   d44c4:	492b      	ldr	r1, [pc, #172]	; (d4574 <setup+0x25c>)
   d44c6:	4620      	mov	r0, r4
   d44c8:	f000 fda5 	bl	d5016 <_ZN8particle18BleAdvertisingData15appendLocalNameEPKc>

  // Add the RGB LED service
  advData.appendServiceUUID(rgbService);
   d44cc:	a90b      	add	r1, sp, #44	; 0x2c
   d44ce:	a824      	add	r0, sp, #144	; 0x90
   d44d0:	f000 fc28 	bl	d4d24 <_ZN8particle7BleUuidC1ERKS0_>
   d44d4:	462a      	mov	r2, r5
   d44d6:	a924      	add	r1, sp, #144	; 0x90
   d44d8:	4620      	mov	r0, r4
   d44da:	f7ff fefc 	bl	d42d6 <_ZN8particle18BleAdvertisingData17appendServiceUUIDINS_7BleUuidEEEjT_b>
  advData.appendServiceUUID(healthThermometerService);
   d44de:	a910      	add	r1, sp, #64	; 0x40
   d44e0:	a824      	add	r0, sp, #144	; 0x90
   d44e2:	f000 fc1f 	bl	d4d24 <_ZN8particle7BleUuidC1ERKS0_>
   d44e6:	462a      	mov	r2, r5
   d44e8:	a924      	add	r1, sp, #144	; 0x90
   d44ea:	4620      	mov	r0, r4
   d44ec:	f7ff fef3 	bl	d42d6 <_ZN8particle18BleAdvertisingData17appendServiceUUIDINS_7BleUuidEEEjT_b>
  advData.appendServiceUUID(batteryLevelService);
   d44f0:	a915      	add	r1, sp, #84	; 0x54
   d44f2:	a824      	add	r0, sp, #144	; 0x90
   d44f4:	f000 fc16 	bl	d4d24 <_ZN8particle7BleUuidC1ERKS0_>
   d44f8:	462a      	mov	r2, r5
   d44fa:	a924      	add	r1, sp, #144	; 0x90
   d44fc:	4620      	mov	r0, r4
   d44fe:	f7ff feea 	bl	d42d6 <_ZN8particle18BleAdvertisingData17appendServiceUUIDINS_7BleUuidEEEjT_b>

  // Start advertising!
  BLE.advertise(&advData);
   d4502:	f000 fe37 	bl	d5174 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4506:	462a      	mov	r2, r5
   d4508:	4621      	mov	r1, r4
   d450a:	f000 fea0 	bl	d524e <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
  BleCharacteristic temperatureMeasurementCharacteristic("temp", BleCharacteristicProperty::NOTIFY, BleUuid(0x2A1C), healthThermometerService);
  BleCharacteristic batteryLevelCharacteristic("bat", BleCharacteristicProperty::NOTIFY, BleUuid(0x2A19), batteryLevelService);

  BleCharacteristic redCharacteristic("red", BleCharacteristicProperty::WRITE_WO_RSP, red, serviceUuid, onDataReceived, (void *)red);
  BleCharacteristic greenCharacteristic("green", BleCharacteristicProperty::WRITE_WO_RSP, green, serviceUuid, onDataReceived, (void *)green);
  BleCharacteristic blueCharacteristic("blue", BleCharacteristicProperty::WRITE_WO_RSP, blue, serviceUuid, onDataReceived, (void *)blue);
   d450e:	a81f      	add	r0, sp, #124	; 0x7c
   d4510:	f000 fee5 	bl	d52de <_ZN8particle17BleCharacteristicD1Ev>
  // Set up characteristics
  BleCharacteristic temperatureMeasurementCharacteristic("temp", BleCharacteristicProperty::NOTIFY, BleUuid(0x2A1C), healthThermometerService);
  BleCharacteristic batteryLevelCharacteristic("bat", BleCharacteristicProperty::NOTIFY, BleUuid(0x2A19), batteryLevelService);

  BleCharacteristic redCharacteristic("red", BleCharacteristicProperty::WRITE_WO_RSP, red, serviceUuid, onDataReceived, (void *)red);
  BleCharacteristic greenCharacteristic("green", BleCharacteristicProperty::WRITE_WO_RSP, green, serviceUuid, onDataReceived, (void *)green);
   d4514:	a81a      	add	r0, sp, #104	; 0x68
   d4516:	f000 fee2 	bl	d52de <_ZN8particle17BleCharacteristicD1Ev>
  BleUuid batteryLevelService(0x180f);
  // Set up characteristics
  BleCharacteristic temperatureMeasurementCharacteristic("temp", BleCharacteristicProperty::NOTIFY, BleUuid(0x2A1C), healthThermometerService);
  BleCharacteristic batteryLevelCharacteristic("bat", BleCharacteristicProperty::NOTIFY, BleUuid(0x2A19), batteryLevelService);

  BleCharacteristic redCharacteristic("red", BleCharacteristicProperty::WRITE_WO_RSP, red, serviceUuid, onDataReceived, (void *)red);
   d451a:	a809      	add	r0, sp, #36	; 0x24
   d451c:	f000 fedf 	bl	d52de <_ZN8particle17BleCharacteristicD1Ev>
  // Set the Health Thermometer and Battery Level service
  BleUuid healthThermometerService(0x1809);
  BleUuid batteryLevelService(0x180f);
  // Set up characteristics
  BleCharacteristic temperatureMeasurementCharacteristic("temp", BleCharacteristicProperty::NOTIFY, BleUuid(0x2A1C), healthThermometerService);
  BleCharacteristic batteryLevelCharacteristic("bat", BleCharacteristicProperty::NOTIFY, BleUuid(0x2A19), batteryLevelService);
   d4520:	a807      	add	r0, sp, #28
   d4522:	f000 fedc 	bl	d52de <_ZN8particle17BleCharacteristicD1Ev>

  // Set the Health Thermometer and Battery Level service
  BleUuid healthThermometerService(0x1809);
  BleUuid batteryLevelService(0x180f);
  // Set up characteristics
  BleCharacteristic temperatureMeasurementCharacteristic("temp", BleCharacteristicProperty::NOTIFY, BleUuid(0x2A1C), healthThermometerService);
   d4526:	a805      	add	r0, sp, #20
   d4528:	f000 fed9 	bl	d52de <_ZN8particle17BleCharacteristicD1Ev>
  advData.appendServiceUUID(healthThermometerService);
  advData.appendServiceUUID(batteryLevelService);

  // Start advertising!
  BLE.advertise(&advData);
}
   d452c:	b033      	add	sp, #204	; 0xcc
   d452e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4530:	2003e3a0 	.word	0x2003e3a0
   d4534:	2003e2f0 	.word	0x2003e2f0
   d4538:	000d40b9 	.word	0x000d40b9
   d453c:	2003e368 	.word	0x2003e368
   d4540:	454e4000 	.word	0x454e4000
   d4544:	2003e3ac 	.word	0x2003e3ac
   d4548:	3a800000 	.word	0x3a800000
   d454c:	2003e374 	.word	0x2003e374
   d4550:	2003e38c 	.word	0x2003e38c
   d4554:	000d78c6 	.word	0x000d78c6
   d4558:	000d78cb 	.word	0x000d78cb
   d455c:	2003e2ec 	.word	0x2003e2ec
   d4560:	000d78cf 	.word	0x000d78cf
   d4564:	2003e2f8 	.word	0x2003e2f8
   d4568:	000d78d3 	.word	0x000d78d3
   d456c:	2003e2f4 	.word	0x2003e2f4
   d4570:	000d78d9 	.word	0x000d78d9
   d4574:	000d78de 	.word	0x000d78de

000d4578 <_GLOBAL__sub_I_SystemMode>:
      // waits until servo to reach the position
      delay(1);
    }
  }
  */
   d4578:	b510      	push	{r4, lr}

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d457a:	f000 f957 	bl	d482c <HAL_Pin_Map>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d457e:	4b0e      	ldr	r3, [pc, #56]	; (d45b8 <_GLOBAL__sub_I_SystemMode+0x40>)
#include "Wire.h"
#include "lib/AM2320/src/AM2320.h"
// #include <lib/DHT12/DHT12.h>
SYSTEM_MODE(MANUAL);

String str;
   d4580:	4c0e      	ldr	r4, [pc, #56]	; (d45bc <_GLOBAL__sub_I_SystemMode+0x44>)
   d4582:	2200      	movs	r2, #0
   d4584:	701a      	strb	r2, [r3, #0]
   d4586:	805a      	strh	r2, [r3, #2]
   d4588:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d458c:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d458e:	2003      	movs	r0, #3
   d4590:	f000 faac 	bl	d4aec <set_system_mode>
   d4594:	490a      	ldr	r1, [pc, #40]	; (d45c0 <_GLOBAL__sub_I_SystemMode+0x48>)
   d4596:	4620      	mov	r0, r4
   d4598:	f002 f80c 	bl	d65b4 <_ZN6StringC1EPK19__FlashStringHelper>
   d459c:	4a09      	ldr	r2, [pc, #36]	; (d45c4 <_GLOBAL__sub_I_SystemMode+0x4c>)
   d459e:	490a      	ldr	r1, [pc, #40]	; (d45c8 <_GLOBAL__sub_I_SystemMode+0x50>)
   d45a0:	4620      	mov	r0, r4
   d45a2:	f002 fa81 	bl	d6aa8 <__aeabi_atexit>

// Init DHT12 Temperature and Humudity Sensor
AM2320 am2320;
   d45a6:	4809      	ldr	r0, [pc, #36]	; (d45cc <_GLOBAL__sub_I_SystemMode+0x54>)
   d45a8:	f000 f818 	bl	d45dc <_ZN6AM2320C1Ev>
float temperatureC;
float temperatureF;
float temperatureK;

// Init Servo Motor and Servo Position
Servo myservo;
   d45ac:	4808      	ldr	r0, [pc, #32]	; (d45d0 <_GLOBAL__sub_I_SystemMode+0x58>)
      // waits until servo to reach the position
      delay(1);
    }
  }
  */
   d45ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
float temperatureC;
float temperatureF;
float temperatureK;

// Init Servo Motor and Servo Position
Servo myservo;
   d45b2:	f001 bf5a 	b.w	d646a <_ZN5ServoC1Ev>
   d45b6:	bf00      	nop
   d45b8:	2003e37c 	.word	0x2003e37c
   d45bc:	2003e390 	.word	0x2003e390
   d45c0:	000d7c90 	.word	0x000d7c90
   d45c4:	2003e364 	.word	0x2003e364
   d45c8:	000d6527 	.word	0x000d6527
   d45cc:	2003e3a0 	.word	0x2003e3a0
   d45d0:	2003e3ac 	.word	0x2003e3ac

000d45d4 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d45d4:	6803      	ldr	r3, [r0, #0]
   d45d6:	b2c9      	uxtb	r1, r1
   d45d8:	689b      	ldr	r3, [r3, #8]
   d45da:	4718      	bx	r3

000d45dc <_ZN6AM2320C1Ev>:
#include "AM2320.h"
AM2320::AM2320(void) {}
   d45dc:	4770      	bx	lr

000d45de <_ZN6AM23205beginEv>:

void AM2320::begin() {
   d45de:	b508      	push	{r3, lr}
    Wire.begin();
   d45e0:	f002 fa20 	bl	d6a24 <_Z19__fetch_global_Wirev>
}
   d45e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
#include "AM2320.h"
AM2320::AM2320(void) {}

void AM2320::begin() {
    Wire.begin();
   d45e8:	f001 bbae 	b.w	d5d48 <_ZN7TwoWire5beginEv>

000d45ec <_ZN6AM23205crc16EPhh>:
    return false;
}

uint16_t AM2320::crc16(uint8_t *ptr, uint8_t len)
{
    uint16_t crc = 0xFFFF;
   d45ec:	f64f 70ff 	movw	r0, #65535	; 0xffff
    uint8_t i = 0;
    while(len--) {
   d45f0:	3a01      	subs	r2, #1
   d45f2:	b2d2      	uxtb	r2, r2
   d45f4:	2aff      	cmp	r2, #255	; 0xff
   d45f6:	d014      	beq.n	d4622 <_ZN6AM23205crc16EPhh+0x36>
        crc ^= *ptr++;
   d45f8:	f811 3b01 	ldrb.w	r3, [r1], #1
   d45fc:	4058      	eors	r0, r3
   d45fe:	2308      	movs	r3, #8
        for(i=0; i<8; i++) {
            if(crc & 0x01) {
   d4600:	f010 0f01 	tst.w	r0, #1
   d4604:	ea4f 0060 	mov.w	r0, r0, asr #1
                crc >>= 1;
   d4608:	b280      	uxth	r0, r0
                crc ^= 0xA001;
   d460a:	bf18      	it	ne
   d460c:	f480 4020 	eorne.w	r0, r0, #40960	; 0xa000
   d4610:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   d4614:	bf18      	it	ne
   d4616:	f080 0001 	eorne.w	r0, r0, #1
{
    uint16_t crc = 0xFFFF;
    uint8_t i = 0;
    while(len--) {
        crc ^= *ptr++;
        for(i=0; i<8; i++) {
   d461a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d461e:	d1ef      	bne.n	d4600 <_ZN6AM23205crc16EPhh+0x14>
   d4620:	e7e6      	b.n	d45f0 <_ZN6AM23205crc16EPhh+0x4>
                crc >>= 1;
            }
        }
    }
    return crc;
}
   d4622:	4770      	bx	lr

000d4624 <_ZN6AM23204readEv>:

void AM2320::begin() {
    Wire.begin();
}

bool AM2320::read(void) {
   d4624:	b570      	push	{r4, r5, r6, lr}
   d4626:	4605      	mov	r5, r0
    // Wakeup
    Wire.beginTransmission(AM2320_I2C_ADDR);
   d4628:	f002 f9fc 	bl	d6a24 <_Z19__fetch_global_Wirev>
   d462c:	215c      	movs	r1, #92	; 0x5c
   d462e:	f001 fba3 	bl	d5d78 <_ZN7TwoWire17beginTransmissionEi>
    Wire.endTransmission();
   d4632:	f002 f9f7 	bl	d6a24 <_Z19__fetch_global_Wirev>
   d4636:	f001 fba6 	bl	d5d86 <_ZN7TwoWire15endTransmissionEv>
    // Write command: read humidity and temperature register
    Wire.beginTransmission(AM2320_I2C_ADDR);
   d463a:	f002 f9f3 	bl	d6a24 <_Z19__fetch_global_Wirev>
   d463e:	215c      	movs	r1, #92	; 0x5c
   d4640:	f001 fb9a 	bl	d5d78 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(AM2320_CMD_READ); //command for read register
   d4644:	f002 f9ee 	bl	d6a24 <_Z19__fetch_global_Wirev>
   d4648:	2103      	movs	r1, #3
   d464a:	f7ff ffc3 	bl	d45d4 <_ZN7TwoWire5writeEi>
    Wire.write(0x00); //start from register 0x00
   d464e:	f002 f9e9 	bl	d6a24 <_Z19__fetch_global_Wirev>
   d4652:	2100      	movs	r1, #0
   d4654:	f7ff ffbe 	bl	d45d4 <_ZN7TwoWire5writeEi>
    Wire.write(0x04); //read 4 registers. i.e. 0x00 ~ 0x03
   d4658:	f002 f9e4 	bl	d6a24 <_Z19__fetch_global_Wirev>
   d465c:	2104      	movs	r1, #4
   d465e:	f7ff ffb9 	bl	d45d4 <_ZN7TwoWire5writeEi>
    Wire.endTransmission();
   d4662:	f002 f9df 	bl	d6a24 <_Z19__fetch_global_Wirev>
   d4666:	f001 fb8e 	bl	d5d86 <_ZN7TwoWire15endTransmissionEv>
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d466a:	f44f 60c8 	mov.w	r0, #1600	; 0x640
   d466e:	f000 f8cd 	bl	d480c <HAL_Delay_Microseconds>
    // Wait
    delayMicroseconds(AM2320_I2C_WAIT); //>1.5ms
    // Get data: function_code(1) + counts(1) + data(4) + crc(2) = 8 bytes
    Wire.requestFrom(AM2320_I2C_ADDR, 8);
   d4672:	f002 f9d7 	bl	d6a24 <_Z19__fetch_global_Wirev>
   d4676:	2208      	movs	r2, #8
   d4678:	215c      	movs	r1, #92	; 0x5c
   d467a:	f001 fb74 	bl	d5d66 <_ZN7TwoWire11requestFromEii>
   d467e:	1e6c      	subs	r4, r5, #1
   d4680:	1d6e      	adds	r6, r5, #5
	 uint8_t i = 0;
    for (i=0; i<6; i++)
        buf[i] = Wire.read();
   d4682:	f002 f9cf 	bl	d6a24 <_Z19__fetch_global_Wirev>
   d4686:	6803      	ldr	r3, [r0, #0]
   d4688:	695b      	ldr	r3, [r3, #20]
   d468a:	4798      	blx	r3
   d468c:	f804 0f01 	strb.w	r0, [r4, #1]!
    // Wait
    delayMicroseconds(AM2320_I2C_WAIT); //>1.5ms
    // Get data: function_code(1) + counts(1) + data(4) + crc(2) = 8 bytes
    Wire.requestFrom(AM2320_I2C_ADDR, 8);
	 uint8_t i = 0;
    for (i=0; i<6; i++)
   d4690:	42b4      	cmp	r4, r6
   d4692:	d1f6      	bne.n	d4682 <_ZN6AM23204readEv+0x5e>
        buf[i] = Wire.read();

    uint16_t crc = 0;
    crc = Wire.read(); //crc low byte
   d4694:	f002 f9c6 	bl	d6a24 <_Z19__fetch_global_Wirev>
   d4698:	6803      	ldr	r3, [r0, #0]
   d469a:	695b      	ldr	r3, [r3, #20]
   d469c:	4798      	blx	r3
   d469e:	4604      	mov	r4, r0
    crc |= Wire.read() << 8; //crc high byte
   d46a0:	f002 f9c0 	bl	d6a24 <_Z19__fetch_global_Wirev>
   d46a4:	6803      	ldr	r3, [r0, #0]
   d46a6:	695b      	ldr	r3, [r3, #20]
   d46a8:	4798      	blx	r3
    if (crc == crc16(buf, 6))
   d46aa:	2206      	movs	r2, #6
    for (i=0; i<6; i++)
        buf[i] = Wire.read();

    uint16_t crc = 0;
    crc = Wire.read(); //crc low byte
    crc |= Wire.read() << 8; //crc high byte
   d46ac:	4606      	mov	r6, r0
    if (crc == crc16(buf, 6))
   d46ae:	4629      	mov	r1, r5
   d46b0:	4628      	mov	r0, r5
   d46b2:	f7ff ff9b 	bl	d45ec <_ZN6AM23205crc16EPhh>
   d46b6:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
   d46ba:	b2a4      	uxth	r4, r4
        return true;
    return false;
}
   d46bc:	1a23      	subs	r3, r4, r0
   d46be:	4258      	negs	r0, r3
   d46c0:	4158      	adcs	r0, r3
   d46c2:	bd70      	pop	{r4, r5, r6, pc}

000d46c4 <_ZN6AM232011getHumidityEv>:
    }
    return crc;
}

float AM2320::getHumidity(void) {
    return (float) (buf[2] * 256 + buf[3]) / 10.0;
   d46c4:	7882      	ldrb	r2, [r0, #2]
   d46c6:	78c3      	ldrb	r3, [r0, #3]
   d46c8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d46cc:	ee00 3a10 	vmov	s0, r3
   d46d0:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
}
   d46d4:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
   d46d8:	ee80 0a27 	vdiv.f32	s0, s0, s15
   d46dc:	4770      	bx	lr

000d46de <_ZN6AM232014getTemperatureEv>:

float AM2320::getTemperature(void) {
    return (float) (buf[4] * 256 + buf[5]) / 10.0;
   d46de:	7902      	ldrb	r2, [r0, #4]
   d46e0:	7943      	ldrb	r3, [r0, #5]
   d46e2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d46e6:	ee00 3a10 	vmov	s0, r3
   d46ea:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
}
   d46ee:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
   d46f2:	ee80 0a27 	vdiv.f32	s0, s0, s15
   d46f6:	4770      	bx	lr

000d46f8 <_GLOBAL__sub_I__ZN6AM2320C2Ev>:
   d46f8:	f000 b898 	b.w	d482c <HAL_Pin_Map>

000d46fc <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   d46fc:	b508      	push	{r3, lr}
   d46fe:	4b02      	ldr	r3, [pc, #8]	; (d4708 <hal_ble_stack_init+0xc>)
   d4700:	681b      	ldr	r3, [r3, #0]
   d4702:	689b      	ldr	r3, [r3, #8]
   d4704:	9301      	str	r3, [sp, #4]
   d4706:	bd08      	pop	{r3, pc}
   d4708:	00030278 	.word	0x00030278

000d470c <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   d470c:	b508      	push	{r3, lr}
   d470e:	4b02      	ldr	r3, [pc, #8]	; (d4718 <hal_ble_gap_set_advertising_data+0xc>)
   d4710:	681b      	ldr	r3, [r3, #0]
   d4712:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4714:	9301      	str	r3, [sp, #4]
   d4716:	bd08      	pop	{r3, pc}
   d4718:	00030278 	.word	0x00030278

000d471c <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   d471c:	b508      	push	{r3, lr}
   d471e:	4b02      	ldr	r3, [pc, #8]	; (d4728 <hal_ble_gap_set_scan_response_data+0xc>)
   d4720:	681b      	ldr	r3, [r3, #0]
   d4722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4724:	9301      	str	r3, [sp, #4]
   d4726:	bd08      	pop	{r3, pc}
   d4728:	00030278 	.word	0x00030278

000d472c <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   d472c:	b508      	push	{r3, lr}
   d472e:	4b02      	ldr	r3, [pc, #8]	; (d4738 <hal_ble_gap_start_advertising+0xc>)
   d4730:	681b      	ldr	r3, [r3, #0]
   d4732:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   d4734:	9301      	str	r3, [sp, #4]
   d4736:	bd08      	pop	{r3, pc}
   d4738:	00030278 	.word	0x00030278

000d473c <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   d473c:	b508      	push	{r3, lr}
   d473e:	4b03      	ldr	r3, [pc, #12]	; (d474c <hal_ble_gap_disconnect+0x10>)
   d4740:	681b      	ldr	r3, [r3, #0]
   d4742:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d4746:	9301      	str	r3, [sp, #4]
   d4748:	bd08      	pop	{r3, pc}
   d474a:	0000      	.short	0x0000
   d474c:	00030278 	.word	0x00030278

000d4750 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   d4750:	b508      	push	{r3, lr}
   d4752:	4b03      	ldr	r3, [pc, #12]	; (d4760 <hal_ble_gatt_server_add_service+0x10>)
   d4754:	681b      	ldr	r3, [r3, #0]
   d4756:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d475a:	9301      	str	r3, [sp, #4]
   d475c:	bd08      	pop	{r3, pc}
   d475e:	0000      	.short	0x0000
   d4760:	00030278 	.word	0x00030278

000d4764 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   d4764:	b508      	push	{r3, lr}
   d4766:	4b03      	ldr	r3, [pc, #12]	; (d4774 <hal_ble_gatt_server_add_characteristic+0x10>)
   d4768:	681b      	ldr	r3, [r3, #0]
   d476a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   d476e:	9301      	str	r3, [sp, #4]
   d4770:	bd08      	pop	{r3, pc}
   d4772:	0000      	.short	0x0000
   d4774:	00030278 	.word	0x00030278

000d4778 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   d4778:	b508      	push	{r3, lr}
   d477a:	4b03      	ldr	r3, [pc, #12]	; (d4788 <hal_ble_set_callback_on_periph_link_events+0x10>)
   d477c:	681b      	ldr	r3, [r3, #0]
   d477e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   d4782:	9301      	str	r3, [sp, #4]
   d4784:	bd08      	pop	{r3, pc}
   d4786:	0000      	.short	0x0000
   d4788:	00030278 	.word	0x00030278

000d478c <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d478c:	b508      	push	{r3, lr}
   d478e:	4b02      	ldr	r3, [pc, #8]	; (d4798 <os_thread_is_current+0xc>)
   d4790:	681b      	ldr	r3, [r3, #0]
   d4792:	689b      	ldr	r3, [r3, #8]
   d4794:	9301      	str	r3, [sp, #4]
   d4796:	bd08      	pop	{r3, pc}
   d4798:	00030248 	.word	0x00030248

000d479c <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d479c:	b508      	push	{r3, lr}
   d479e:	4b02      	ldr	r3, [pc, #8]	; (d47a8 <os_thread_join+0xc>)
   d47a0:	681b      	ldr	r3, [r3, #0]
   d47a2:	691b      	ldr	r3, [r3, #16]
   d47a4:	9301      	str	r3, [sp, #4]
   d47a6:	bd08      	pop	{r3, pc}
   d47a8:	00030248 	.word	0x00030248

000d47ac <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d47ac:	b508      	push	{r3, lr}
   d47ae:	4b02      	ldr	r3, [pc, #8]	; (d47b8 <os_thread_cleanup+0xc>)
   d47b0:	681b      	ldr	r3, [r3, #0]
   d47b2:	695b      	ldr	r3, [r3, #20]
   d47b4:	9301      	str	r3, [sp, #4]
   d47b6:	bd08      	pop	{r3, pc}
   d47b8:	00030248 	.word	0x00030248

000d47bc <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d47bc:	b508      	push	{r3, lr}
   d47be:	4b02      	ldr	r3, [pc, #8]	; (d47c8 <os_mutex_create+0xc>)
   d47c0:	681b      	ldr	r3, [r3, #0]
   d47c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d47c4:	9301      	str	r3, [sp, #4]
   d47c6:	bd08      	pop	{r3, pc}
   d47c8:	00030248 	.word	0x00030248

000d47cc <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d47cc:	b508      	push	{r3, lr}
   d47ce:	4b02      	ldr	r3, [pc, #8]	; (d47d8 <os_mutex_recursive_create+0xc>)
   d47d0:	681b      	ldr	r3, [r3, #0]
   d47d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d47d4:	9301      	str	r3, [sp, #4]
   d47d6:	bd08      	pop	{r3, pc}
   d47d8:	00030248 	.word	0x00030248

000d47dc <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d47dc:	b508      	push	{r3, lr}
   d47de:	4b02      	ldr	r3, [pc, #8]	; (d47e8 <os_mutex_recursive_lock+0xc>)
   d47e0:	681b      	ldr	r3, [r3, #0]
   d47e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d47e4:	9301      	str	r3, [sp, #4]
   d47e6:	bd08      	pop	{r3, pc}
   d47e8:	00030248 	.word	0x00030248

000d47ec <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d47ec:	b508      	push	{r3, lr}
   d47ee:	4b02      	ldr	r3, [pc, #8]	; (d47f8 <os_mutex_recursive_unlock+0xc>)
   d47f0:	681b      	ldr	r3, [r3, #0]
   d47f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d47f4:	9301      	str	r3, [sp, #4]
   d47f6:	bd08      	pop	{r3, pc}
   d47f8:	00030248 	.word	0x00030248

000d47fc <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d47fc:	b508      	push	{r3, lr}
   d47fe:	4b02      	ldr	r3, [pc, #8]	; (d4808 <HAL_RNG_GetRandomNumber+0xc>)
   d4800:	681b      	ldr	r3, [r3, #0]
   d4802:	685b      	ldr	r3, [r3, #4]
   d4804:	9301      	str	r3, [sp, #4]
   d4806:	bd08      	pop	{r3, pc}
   d4808:	00030218 	.word	0x00030218

000d480c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d480c:	b508      	push	{r3, lr}
   d480e:	4b02      	ldr	r3, [pc, #8]	; (d4818 <HAL_Delay_Microseconds+0xc>)
   d4810:	681b      	ldr	r3, [r3, #0]
   d4812:	68db      	ldr	r3, [r3, #12]
   d4814:	9301      	str	r3, [sp, #4]
   d4816:	bd08      	pop	{r3, pc}
   d4818:	00030218 	.word	0x00030218

000d481c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d481c:	b508      	push	{r3, lr}
   d481e:	4b02      	ldr	r3, [pc, #8]	; (d4828 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4820:	681b      	ldr	r3, [r3, #0]
   d4822:	695b      	ldr	r3, [r3, #20]
   d4824:	9301      	str	r3, [sp, #4]
   d4826:	bd08      	pop	{r3, pc}
   d4828:	00030218 	.word	0x00030218

000d482c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d482c:	b508      	push	{r3, lr}
   d482e:	4b02      	ldr	r3, [pc, #8]	; (d4838 <HAL_Pin_Map+0xc>)
   d4830:	681b      	ldr	r3, [r3, #0]
   d4832:	681b      	ldr	r3, [r3, #0]
   d4834:	9301      	str	r3, [sp, #4]
   d4836:	bd08      	pop	{r3, pc}
   d4838:	0003022c 	.word	0x0003022c

000d483c <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d483c:	b508      	push	{r3, lr}
   d483e:	4b02      	ldr	r3, [pc, #8]	; (d4848 <HAL_Validate_Pin_Function+0xc>)
   d4840:	681b      	ldr	r3, [r3, #0]
   d4842:	685b      	ldr	r3, [r3, #4]
   d4844:	9301      	str	r3, [sp, #4]
   d4846:	bd08      	pop	{r3, pc}
   d4848:	0003022c 	.word	0x0003022c

000d484c <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d484c:	b508      	push	{r3, lr}
   d484e:	4b02      	ldr	r3, [pc, #8]	; (d4858 <HAL_Pin_Mode+0xc>)
   d4850:	681b      	ldr	r3, [r3, #0]
   d4852:	689b      	ldr	r3, [r3, #8]
   d4854:	9301      	str	r3, [sp, #4]
   d4856:	bd08      	pop	{r3, pc}
   d4858:	0003022c 	.word	0x0003022c

000d485c <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d485c:	b508      	push	{r3, lr}
   d485e:	4b02      	ldr	r3, [pc, #8]	; (d4868 <HAL_ADC_Read+0xc>)
   d4860:	681b      	ldr	r3, [r3, #0]
   d4862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4864:	9301      	str	r3, [sp, #4]
   d4866:	bd08      	pop	{r3, pc}
   d4868:	0003022c 	.word	0x0003022c

000d486c <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d486c:	b508      	push	{r3, lr}
   d486e:	4b02      	ldr	r3, [pc, #8]	; (d4878 <HAL_I2C_Begin+0xc>)
   d4870:	681b      	ldr	r3, [r3, #0]
   d4872:	68db      	ldr	r3, [r3, #12]
   d4874:	9301      	str	r3, [sp, #4]
   d4876:	bd08      	pop	{r3, pc}
   d4878:	00030228 	.word	0x00030228

000d487c <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
   d487c:	b508      	push	{r3, lr}
   d487e:	4b02      	ldr	r3, [pc, #8]	; (d4888 <HAL_I2C_Request_Data+0xc>)
   d4880:	681b      	ldr	r3, [r3, #0]
   d4882:	695b      	ldr	r3, [r3, #20]
   d4884:	9301      	str	r3, [sp, #4]
   d4886:	bd08      	pop	{r3, pc}
   d4888:	00030228 	.word	0x00030228

000d488c <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
   d488c:	b508      	push	{r3, lr}
   d488e:	4b02      	ldr	r3, [pc, #8]	; (d4898 <HAL_I2C_Begin_Transmission+0xc>)
   d4890:	681b      	ldr	r3, [r3, #0]
   d4892:	699b      	ldr	r3, [r3, #24]
   d4894:	9301      	str	r3, [sp, #4]
   d4896:	bd08      	pop	{r3, pc}
   d4898:	00030228 	.word	0x00030228

000d489c <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d489c:	b508      	push	{r3, lr}
   d489e:	4b02      	ldr	r3, [pc, #8]	; (d48a8 <HAL_I2C_End_Transmission+0xc>)
   d48a0:	681b      	ldr	r3, [r3, #0]
   d48a2:	69db      	ldr	r3, [r3, #28]
   d48a4:	9301      	str	r3, [sp, #4]
   d48a6:	bd08      	pop	{r3, pc}
   d48a8:	00030228 	.word	0x00030228

000d48ac <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d48ac:	b508      	push	{r3, lr}
   d48ae:	4b02      	ldr	r3, [pc, #8]	; (d48b8 <HAL_I2C_Write_Data+0xc>)
   d48b0:	681b      	ldr	r3, [r3, #0]
   d48b2:	6a1b      	ldr	r3, [r3, #32]
   d48b4:	9301      	str	r3, [sp, #4]
   d48b6:	bd08      	pop	{r3, pc}
   d48b8:	00030228 	.word	0x00030228

000d48bc <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d48bc:	b508      	push	{r3, lr}
   d48be:	4b02      	ldr	r3, [pc, #8]	; (d48c8 <HAL_I2C_Available_Data+0xc>)
   d48c0:	681b      	ldr	r3, [r3, #0]
   d48c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d48c4:	9301      	str	r3, [sp, #4]
   d48c6:	bd08      	pop	{r3, pc}
   d48c8:	00030228 	.word	0x00030228

000d48cc <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d48cc:	b508      	push	{r3, lr}
   d48ce:	4b02      	ldr	r3, [pc, #8]	; (d48d8 <HAL_I2C_Read_Data+0xc>)
   d48d0:	681b      	ldr	r3, [r3, #0]
   d48d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d48d4:	9301      	str	r3, [sp, #4]
   d48d6:	bd08      	pop	{r3, pc}
   d48d8:	00030228 	.word	0x00030228

000d48dc <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d48dc:	b508      	push	{r3, lr}
   d48de:	4b02      	ldr	r3, [pc, #8]	; (d48e8 <HAL_I2C_Peek_Data+0xc>)
   d48e0:	681b      	ldr	r3, [r3, #0]
   d48e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d48e4:	9301      	str	r3, [sp, #4]
   d48e6:	bd08      	pop	{r3, pc}
   d48e8:	00030228 	.word	0x00030228

000d48ec <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d48ec:	b508      	push	{r3, lr}
   d48ee:	4b02      	ldr	r3, [pc, #8]	; (d48f8 <HAL_I2C_Flush_Data+0xc>)
   d48f0:	681b      	ldr	r3, [r3, #0]
   d48f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d48f4:	9301      	str	r3, [sp, #4]
   d48f6:	bd08      	pop	{r3, pc}
   d48f8:	00030228 	.word	0x00030228

000d48fc <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d48fc:	b508      	push	{r3, lr}
   d48fe:	4b02      	ldr	r3, [pc, #8]	; (d4908 <HAL_I2C_Is_Enabled+0xc>)
   d4900:	681b      	ldr	r3, [r3, #0]
   d4902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4904:	9301      	str	r3, [sp, #4]
   d4906:	bd08      	pop	{r3, pc}
   d4908:	00030228 	.word	0x00030228

000d490c <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d490c:	b508      	push	{r3, lr}
   d490e:	4b02      	ldr	r3, [pc, #8]	; (d4918 <HAL_I2C_Init+0xc>)
   d4910:	681b      	ldr	r3, [r3, #0]
   d4912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4914:	9301      	str	r3, [sp, #4]
   d4916:	bd08      	pop	{r3, pc}
   d4918:	00030228 	.word	0x00030228

000d491c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d491c:	b508      	push	{r3, lr}
   d491e:	4b02      	ldr	r3, [pc, #8]	; (d4928 <inet_inet_ntop+0xc>)
   d4920:	681b      	ldr	r3, [r3, #0]
   d4922:	695b      	ldr	r3, [r3, #20]
   d4924:	9301      	str	r3, [sp, #4]
   d4926:	bd08      	pop	{r3, pc}
   d4928:	00030264 	.word	0x00030264

000d492c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d492c:	b508      	push	{r3, lr}
   d492e:	4b02      	ldr	r3, [pc, #8]	; (d4938 <netdb_freeaddrinfo+0xc>)
   d4930:	681b      	ldr	r3, [r3, #0]
   d4932:	689b      	ldr	r3, [r3, #8]
   d4934:	9301      	str	r3, [sp, #4]
   d4936:	bd08      	pop	{r3, pc}
   d4938:	00030268 	.word	0x00030268

000d493c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d493c:	b508      	push	{r3, lr}
   d493e:	4b02      	ldr	r3, [pc, #8]	; (d4948 <netdb_getaddrinfo+0xc>)
   d4940:	681b      	ldr	r3, [r3, #0]
   d4942:	68db      	ldr	r3, [r3, #12]
   d4944:	9301      	str	r3, [sp, #4]
   d4946:	bd08      	pop	{r3, pc}
   d4948:	00030268 	.word	0x00030268

000d494c <HAL_Servo_Attach>:
DYNALIB_FN(0, hal_peripherals, HAL_Tone_Start, void(uint8_t, uint32_t, uint32_t))
DYNALIB_FN(1, hal_peripherals, HAL_Tone_Stop, void(uint8_t))
DYNALIB_FN(2, hal_peripherals, HAL_Tone_Get_Frequency, uint32_t(uint8_t))
DYNALIB_FN(3, hal_peripherals, HAL_Tone_Is_Stopped, bool(uint8_t))

DYNALIB_FN(4, hal_peripherals, HAL_Servo_Attach, void(uint16_t))
   d494c:	b508      	push	{r3, lr}
   d494e:	4b02      	ldr	r3, [pc, #8]	; (d4958 <HAL_Servo_Attach+0xc>)
   d4950:	681b      	ldr	r3, [r3, #0]
   d4952:	691b      	ldr	r3, [r3, #16]
   d4954:	9301      	str	r3, [sp, #4]
   d4956:	bd08      	pop	{r3, pc}
   d4958:	00030224 	.word	0x00030224

000d495c <HAL_Servo_Detach>:
DYNALIB_FN(5, hal_peripherals, HAL_Servo_Detach, void(uint16_t))
   d495c:	b508      	push	{r3, lr}
   d495e:	4b02      	ldr	r3, [pc, #8]	; (d4968 <HAL_Servo_Detach+0xc>)
   d4960:	681b      	ldr	r3, [r3, #0]
   d4962:	695b      	ldr	r3, [r3, #20]
   d4964:	9301      	str	r3, [sp, #4]
   d4966:	bd08      	pop	{r3, pc}
   d4968:	00030224 	.word	0x00030224

000d496c <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d496c:	b508      	push	{r3, lr}
   d496e:	4b02      	ldr	r3, [pc, #8]	; (d4978 <HAL_SPI_Init+0xc>)
   d4970:	681b      	ldr	r3, [r3, #0]
   d4972:	69db      	ldr	r3, [r3, #28]
   d4974:	9301      	str	r3, [sp, #4]
   d4976:	bd08      	pop	{r3, pc}
   d4978:	00030230 	.word	0x00030230

000d497c <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d497c:	b508      	push	{r3, lr}
   d497e:	4b02      	ldr	r3, [pc, #8]	; (d4988 <HAL_SPI_Is_Enabled+0xc>)
   d4980:	681b      	ldr	r3, [r3, #0]
   d4982:	6a1b      	ldr	r3, [r3, #32]
   d4984:	9301      	str	r3, [sp, #4]
   d4986:	bd08      	pop	{r3, pc}
   d4988:	00030230 	.word	0x00030230

000d498c <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d498c:	b508      	push	{r3, lr}
   d498e:	4b02      	ldr	r3, [pc, #8]	; (d4998 <HAL_USART_Init+0xc>)
   d4990:	681b      	ldr	r3, [r3, #0]
   d4992:	681b      	ldr	r3, [r3, #0]
   d4994:	9301      	str	r3, [sp, #4]
   d4996:	bd08      	pop	{r3, pc}
   d4998:	0003023c 	.word	0x0003023c

000d499c <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d499c:	b508      	push	{r3, lr}
   d499e:	4b02      	ldr	r3, [pc, #8]	; (d49a8 <HAL_USART_Write_Data+0xc>)
   d49a0:	681b      	ldr	r3, [r3, #0]
   d49a2:	68db      	ldr	r3, [r3, #12]
   d49a4:	9301      	str	r3, [sp, #4]
   d49a6:	bd08      	pop	{r3, pc}
   d49a8:	0003023c 	.word	0x0003023c

000d49ac <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d49ac:	b508      	push	{r3, lr}
   d49ae:	4b02      	ldr	r3, [pc, #8]	; (d49b8 <HAL_USART_Available_Data+0xc>)
   d49b0:	681b      	ldr	r3, [r3, #0]
   d49b2:	691b      	ldr	r3, [r3, #16]
   d49b4:	9301      	str	r3, [sp, #4]
   d49b6:	bd08      	pop	{r3, pc}
   d49b8:	0003023c 	.word	0x0003023c

000d49bc <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d49bc:	b508      	push	{r3, lr}
   d49be:	4b02      	ldr	r3, [pc, #8]	; (d49c8 <HAL_USART_Read_Data+0xc>)
   d49c0:	681b      	ldr	r3, [r3, #0]
   d49c2:	695b      	ldr	r3, [r3, #20]
   d49c4:	9301      	str	r3, [sp, #4]
   d49c6:	bd08      	pop	{r3, pc}
   d49c8:	0003023c 	.word	0x0003023c

000d49cc <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d49cc:	b508      	push	{r3, lr}
   d49ce:	4b02      	ldr	r3, [pc, #8]	; (d49d8 <HAL_USART_Peek_Data+0xc>)
   d49d0:	681b      	ldr	r3, [r3, #0]
   d49d2:	699b      	ldr	r3, [r3, #24]
   d49d4:	9301      	str	r3, [sp, #4]
   d49d6:	bd08      	pop	{r3, pc}
   d49d8:	0003023c 	.word	0x0003023c

000d49dc <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d49dc:	b508      	push	{r3, lr}
   d49de:	4b02      	ldr	r3, [pc, #8]	; (d49e8 <HAL_USART_Flush_Data+0xc>)
   d49e0:	681b      	ldr	r3, [r3, #0]
   d49e2:	69db      	ldr	r3, [r3, #28]
   d49e4:	9301      	str	r3, [sp, #4]
   d49e6:	bd08      	pop	{r3, pc}
   d49e8:	0003023c 	.word	0x0003023c

000d49ec <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d49ec:	b508      	push	{r3, lr}
   d49ee:	4b02      	ldr	r3, [pc, #8]	; (d49f8 <HAL_USART_Is_Enabled+0xc>)
   d49f0:	681b      	ldr	r3, [r3, #0]
   d49f2:	6a1b      	ldr	r3, [r3, #32]
   d49f4:	9301      	str	r3, [sp, #4]
   d49f6:	bd08      	pop	{r3, pc}
   d49f8:	0003023c 	.word	0x0003023c

000d49fc <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d49fc:	b508      	push	{r3, lr}
   d49fe:	4b02      	ldr	r3, [pc, #8]	; (d4a08 <HAL_USART_Available_Data_For_Write+0xc>)
   d4a00:	681b      	ldr	r3, [r3, #0]
   d4a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4a04:	9301      	str	r3, [sp, #4]
   d4a06:	bd08      	pop	{r3, pc}
   d4a08:	0003023c 	.word	0x0003023c

000d4a0c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4a0c:	b508      	push	{r3, lr}
   d4a0e:	4b02      	ldr	r3, [pc, #8]	; (d4a18 <HAL_USB_USART_Init+0xc>)
   d4a10:	681b      	ldr	r3, [r3, #0]
   d4a12:	681b      	ldr	r3, [r3, #0]
   d4a14:	9301      	str	r3, [sp, #4]
   d4a16:	bd08      	pop	{r3, pc}
   d4a18:	0003024c 	.word	0x0003024c

000d4a1c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4a1c:	b508      	push	{r3, lr}
   d4a1e:	4b02      	ldr	r3, [pc, #8]	; (d4a28 <HAL_USB_USART_Begin+0xc>)
   d4a20:	681b      	ldr	r3, [r3, #0]
   d4a22:	685b      	ldr	r3, [r3, #4]
   d4a24:	9301      	str	r3, [sp, #4]
   d4a26:	bd08      	pop	{r3, pc}
   d4a28:	0003024c 	.word	0x0003024c

000d4a2c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4a2c:	b508      	push	{r3, lr}
   d4a2e:	4b02      	ldr	r3, [pc, #8]	; (d4a38 <HAL_USB_USART_Available_Data+0xc>)
   d4a30:	681b      	ldr	r3, [r3, #0]
   d4a32:	691b      	ldr	r3, [r3, #16]
   d4a34:	9301      	str	r3, [sp, #4]
   d4a36:	bd08      	pop	{r3, pc}
   d4a38:	0003024c 	.word	0x0003024c

000d4a3c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4a3c:	b508      	push	{r3, lr}
   d4a3e:	4b02      	ldr	r3, [pc, #8]	; (d4a48 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4a40:	681b      	ldr	r3, [r3, #0]
   d4a42:	695b      	ldr	r3, [r3, #20]
   d4a44:	9301      	str	r3, [sp, #4]
   d4a46:	bd08      	pop	{r3, pc}
   d4a48:	0003024c 	.word	0x0003024c

000d4a4c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4a4c:	b508      	push	{r3, lr}
   d4a4e:	4b02      	ldr	r3, [pc, #8]	; (d4a58 <HAL_USB_USART_Receive_Data+0xc>)
   d4a50:	681b      	ldr	r3, [r3, #0]
   d4a52:	699b      	ldr	r3, [r3, #24]
   d4a54:	9301      	str	r3, [sp, #4]
   d4a56:	bd08      	pop	{r3, pc}
   d4a58:	0003024c 	.word	0x0003024c

000d4a5c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4a5c:	b508      	push	{r3, lr}
   d4a5e:	4b02      	ldr	r3, [pc, #8]	; (d4a68 <HAL_USB_USART_Send_Data+0xc>)
   d4a60:	681b      	ldr	r3, [r3, #0]
   d4a62:	69db      	ldr	r3, [r3, #28]
   d4a64:	9301      	str	r3, [sp, #4]
   d4a66:	bd08      	pop	{r3, pc}
   d4a68:	0003024c 	.word	0x0003024c

000d4a6c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4a6c:	b508      	push	{r3, lr}
   d4a6e:	4b02      	ldr	r3, [pc, #8]	; (d4a78 <HAL_USB_USART_Flush_Data+0xc>)
   d4a70:	681b      	ldr	r3, [r3, #0]
   d4a72:	6a1b      	ldr	r3, [r3, #32]
   d4a74:	9301      	str	r3, [sp, #4]
   d4a76:	bd08      	pop	{r3, pc}
   d4a78:	0003024c 	.word	0x0003024c

000d4a7c <LED_SetSignalingColor>:
#endif // defined(DYNALIB_EXPORT)

DYNALIB_BEGIN(services)

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
   d4a7c:	b508      	push	{r3, lr}
   d4a7e:	4b02      	ldr	r3, [pc, #8]	; (d4a88 <LED_SetSignalingColor+0xc>)
   d4a80:	681b      	ldr	r3, [r3, #0]
   d4a82:	685b      	ldr	r3, [r3, #4]
   d4a84:	9301      	str	r3, [sp, #4]
   d4a86:	bd08      	pop	{r3, pc}
   d4a88:	00030260 	.word	0x00030260

000d4a8c <LED_Signaling_Start>:
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
   d4a8c:	b508      	push	{r3, lr}
   d4a8e:	4b02      	ldr	r3, [pc, #8]	; (d4a98 <LED_Signaling_Start+0xc>)
   d4a90:	681b      	ldr	r3, [r3, #0]
   d4a92:	689b      	ldr	r3, [r3, #8]
   d4a94:	9301      	str	r3, [sp, #4]
   d4a96:	bd08      	pop	{r3, pc}
   d4a98:	00030260 	.word	0x00030260

000d4a9c <LED_Signaling_Stop>:
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
   d4a9c:	b508      	push	{r3, lr}
   d4a9e:	4b02      	ldr	r3, [pc, #8]	; (d4aa8 <LED_Signaling_Stop+0xc>)
   d4aa0:	681b      	ldr	r3, [r3, #0]
   d4aa2:	68db      	ldr	r3, [r3, #12]
   d4aa4:	9301      	str	r3, [sp, #4]
   d4aa6:	bd08      	pop	{r3, pc}
   d4aa8:	00030260 	.word	0x00030260

000d4aac <LED_RGB_IsOverRidden>:
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
   d4aac:	b508      	push	{r3, lr}
   d4aae:	4b02      	ldr	r3, [pc, #8]	; (d4ab8 <LED_RGB_IsOverRidden+0xc>)
   d4ab0:	681b      	ldr	r3, [r3, #0]
   d4ab2:	699b      	ldr	r3, [r3, #24]
   d4ab4:	9301      	str	r3, [sp, #4]
   d4ab6:	bd08      	pop	{r3, pc}
   d4ab8:	00030260 	.word	0x00030260

000d4abc <LED_On>:
DYNALIB_FN(7, services, LED_On, void(Led_TypeDef))
   d4abc:	b508      	push	{r3, lr}
   d4abe:	4b02      	ldr	r3, [pc, #8]	; (d4ac8 <LED_On+0xc>)
   d4ac0:	681b      	ldr	r3, [r3, #0]
   d4ac2:	69db      	ldr	r3, [r3, #28]
   d4ac4:	9301      	str	r3, [sp, #4]
   d4ac6:	bd08      	pop	{r3, pc}
   d4ac8:	00030260 	.word	0x00030260

000d4acc <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d4acc:	b508      	push	{r3, lr}
   d4ace:	4b02      	ldr	r3, [pc, #8]	; (d4ad8 <panic_+0xc>)
   d4ad0:	681b      	ldr	r3, [r3, #0]
   d4ad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4ad4:	9301      	str	r3, [sp, #4]
   d4ad6:	bd08      	pop	{r3, pc}
   d4ad8:	00030260 	.word	0x00030260

000d4adc <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d4adc:	b508      	push	{r3, lr}
   d4ade:	4b02      	ldr	r3, [pc, #8]	; (d4ae8 <log_message+0xc>)
   d4ae0:	681b      	ldr	r3, [r3, #0]
   d4ae2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4ae4:	9301      	str	r3, [sp, #4]
   d4ae6:	bd08      	pop	{r3, pc}
   d4ae8:	00030260 	.word	0x00030260

000d4aec <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4aec:	b508      	push	{r3, lr}
   d4aee:	4b02      	ldr	r3, [pc, #8]	; (d4af8 <set_system_mode+0xc>)
   d4af0:	681b      	ldr	r3, [r3, #0]
   d4af2:	685b      	ldr	r3, [r3, #4]
   d4af4:	9301      	str	r3, [sp, #4]
   d4af6:	bd08      	pop	{r3, pc}
   d4af8:	00030220 	.word	0x00030220

000d4afc <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4afc:	b508      	push	{r3, lr}
   d4afe:	4b02      	ldr	r3, [pc, #8]	; (d4b08 <system_delay_ms+0xc>)
   d4b00:	681b      	ldr	r3, [r3, #0]
   d4b02:	695b      	ldr	r3, [r3, #20]
   d4b04:	9301      	str	r3, [sp, #4]
   d4b06:	bd08      	pop	{r3, pc}
   d4b08:	00030220 	.word	0x00030220

000d4b0c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4b0c:	b508      	push	{r3, lr}
   d4b0e:	4b03      	ldr	r3, [pc, #12]	; (d4b1c <system_ctrl_set_app_request_handler+0x10>)
   d4b10:	681b      	ldr	r3, [r3, #0]
   d4b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4b16:	9301      	str	r3, [sp, #4]
   d4b18:	bd08      	pop	{r3, pc}
   d4b1a:	0000      	.short	0x0000
   d4b1c:	00030220 	.word	0x00030220

000d4b20 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4b20:	b508      	push	{r3, lr}
   d4b22:	4b03      	ldr	r3, [pc, #12]	; (d4b30 <system_ctrl_set_result+0x10>)
   d4b24:	681b      	ldr	r3, [r3, #0]
   d4b26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4b2a:	9301      	str	r3, [sp, #4]
   d4b2c:	bd08      	pop	{r3, pc}
   d4b2e:	0000      	.short	0x0000
   d4b30:	00030220 	.word	0x00030220

000d4b34 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4b34:	b508      	push	{r3, lr}
   d4b36:	4b02      	ldr	r3, [pc, #8]	; (d4b40 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4b38:	681b      	ldr	r3, [r3, #0]
   d4b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4b3c:	9301      	str	r3, [sp, #4]
   d4b3e:	bd08      	pop	{r3, pc}
   d4b40:	00030244 	.word	0x00030244

000d4b44 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4b44:	b508      	push	{r3, lr}
   d4b46:	4b02      	ldr	r3, [pc, #8]	; (d4b50 <network_connect+0xc>)
   d4b48:	681b      	ldr	r3, [r3, #0]
   d4b4a:	685b      	ldr	r3, [r3, #4]
   d4b4c:	9301      	str	r3, [sp, #4]
   d4b4e:	bd08      	pop	{r3, pc}
   d4b50:	00030240 	.word	0x00030240

000d4b54 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4b54:	b508      	push	{r3, lr}
   d4b56:	4b02      	ldr	r3, [pc, #8]	; (d4b60 <network_connecting+0xc>)
   d4b58:	681b      	ldr	r3, [r3, #0]
   d4b5a:	689b      	ldr	r3, [r3, #8]
   d4b5c:	9301      	str	r3, [sp, #4]
   d4b5e:	bd08      	pop	{r3, pc}
   d4b60:	00030240 	.word	0x00030240

000d4b64 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4b64:	b508      	push	{r3, lr}
   d4b66:	4b02      	ldr	r3, [pc, #8]	; (d4b70 <network_disconnect+0xc>)
   d4b68:	681b      	ldr	r3, [r3, #0]
   d4b6a:	68db      	ldr	r3, [r3, #12]
   d4b6c:	9301      	str	r3, [sp, #4]
   d4b6e:	bd08      	pop	{r3, pc}
   d4b70:	00030240 	.word	0x00030240

000d4b74 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4b74:	b508      	push	{r3, lr}
   d4b76:	4b02      	ldr	r3, [pc, #8]	; (d4b80 <network_ready+0xc>)
   d4b78:	681b      	ldr	r3, [r3, #0]
   d4b7a:	691b      	ldr	r3, [r3, #16]
   d4b7c:	9301      	str	r3, [sp, #4]
   d4b7e:	bd08      	pop	{r3, pc}
   d4b80:	00030240 	.word	0x00030240

000d4b84 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4b84:	b508      	push	{r3, lr}
   d4b86:	4b02      	ldr	r3, [pc, #8]	; (d4b90 <network_on+0xc>)
   d4b88:	681b      	ldr	r3, [r3, #0]
   d4b8a:	695b      	ldr	r3, [r3, #20]
   d4b8c:	9301      	str	r3, [sp, #4]
   d4b8e:	bd08      	pop	{r3, pc}
   d4b90:	00030240 	.word	0x00030240

000d4b94 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4b94:	b508      	push	{r3, lr}
   d4b96:	4b02      	ldr	r3, [pc, #8]	; (d4ba0 <network_off+0xc>)
   d4b98:	681b      	ldr	r3, [r3, #0]
   d4b9a:	699b      	ldr	r3, [r3, #24]
   d4b9c:	9301      	str	r3, [sp, #4]
   d4b9e:	bd08      	pop	{r3, pc}
   d4ba0:	00030240 	.word	0x00030240

000d4ba4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4ba4:	b508      	push	{r3, lr}
   d4ba6:	4b02      	ldr	r3, [pc, #8]	; (d4bb0 <network_listen+0xc>)
   d4ba8:	681b      	ldr	r3, [r3, #0]
   d4baa:	69db      	ldr	r3, [r3, #28]
   d4bac:	9301      	str	r3, [sp, #4]
   d4bae:	bd08      	pop	{r3, pc}
   d4bb0:	00030240 	.word	0x00030240

000d4bb4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4bb4:	b508      	push	{r3, lr}
   d4bb6:	4b02      	ldr	r3, [pc, #8]	; (d4bc0 <network_listening+0xc>)
   d4bb8:	681b      	ldr	r3, [r3, #0]
   d4bba:	6a1b      	ldr	r3, [r3, #32]
   d4bbc:	9301      	str	r3, [sp, #4]
   d4bbe:	bd08      	pop	{r3, pc}
   d4bc0:	00030240 	.word	0x00030240

000d4bc4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4bc4:	b508      	push	{r3, lr}
   d4bc6:	4b02      	ldr	r3, [pc, #8]	; (d4bd0 <network_set_listen_timeout+0xc>)
   d4bc8:	681b      	ldr	r3, [r3, #0]
   d4bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4bcc:	9301      	str	r3, [sp, #4]
   d4bce:	bd08      	pop	{r3, pc}
   d4bd0:	00030240 	.word	0x00030240

000d4bd4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4bd4:	b508      	push	{r3, lr}
   d4bd6:	4b02      	ldr	r3, [pc, #8]	; (d4be0 <network_get_listen_timeout+0xc>)
   d4bd8:	681b      	ldr	r3, [r3, #0]
   d4bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4bdc:	9301      	str	r3, [sp, #4]
   d4bde:	bd08      	pop	{r3, pc}
   d4be0:	00030240 	.word	0x00030240

000d4be4 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4be4:	b508      	push	{r3, lr}
   d4be6:	4b02      	ldr	r3, [pc, #8]	; (d4bf0 <malloc+0xc>)
   d4be8:	681b      	ldr	r3, [r3, #0]
   d4bea:	681b      	ldr	r3, [r3, #0]
   d4bec:	9301      	str	r3, [sp, #4]
   d4bee:	bd08      	pop	{r3, pc}
   d4bf0:	0003021c 	.word	0x0003021c

000d4bf4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4bf4:	b508      	push	{r3, lr}
   d4bf6:	4b02      	ldr	r3, [pc, #8]	; (d4c00 <free+0xc>)
   d4bf8:	681b      	ldr	r3, [r3, #0]
   d4bfa:	685b      	ldr	r3, [r3, #4]
   d4bfc:	9301      	str	r3, [sp, #4]
   d4bfe:	bd08      	pop	{r3, pc}
   d4c00:	0003021c 	.word	0x0003021c

000d4c04 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4c04:	b508      	push	{r3, lr}
   d4c06:	4b02      	ldr	r3, [pc, #8]	; (d4c10 <realloc+0xc>)
   d4c08:	681b      	ldr	r3, [r3, #0]
   d4c0a:	689b      	ldr	r3, [r3, #8]
   d4c0c:	9301      	str	r3, [sp, #4]
   d4c0e:	bd08      	pop	{r3, pc}
   d4c10:	0003021c 	.word	0x0003021c

000d4c14 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4c14:	2100      	movs	r1, #0
   d4c16:	f7ff bf71 	b.w	d4afc <system_delay_ms>

000d4c1a <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d4c1a:	4770      	bx	lr

000d4c1c <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d4c1c:	2000      	movs	r0, #0
   d4c1e:	4770      	bx	lr

000d4c20 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d4c20:	4770      	bx	lr

000d4c22 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d4c22:	2000      	movs	r0, #0
   d4c24:	4770      	bx	lr

000d4c26 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d4c26:	4770      	bx	lr

000d4c28 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d4c28:	2000      	movs	r0, #0
   d4c2a:	4770      	bx	lr

000d4c2c <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d4c2c:	b510      	push	{r4, lr}
   d4c2e:	2114      	movs	r1, #20
   d4c30:	4604      	mov	r4, r0
   d4c32:	f001 ff3e 	bl	d6ab2 <_ZdlPvj>
   d4c36:	4620      	mov	r0, r4
   d4c38:	bd10      	pop	{r4, pc}

000d4c3a <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
   d4c3a:	b510      	push	{r4, lr}
   d4c3c:	2114      	movs	r1, #20
   d4c3e:	4604      	mov	r4, r0
   d4c40:	f001 ff37 	bl	d6ab2 <_ZdlPvj>
   d4c44:	4620      	mov	r0, r4
   d4c46:	bd10      	pop	{r4, pc}

000d4c48 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
   d4c48:	b510      	push	{r4, lr}
   d4c4a:	2114      	movs	r1, #20
   d4c4c:	4604      	mov	r4, r0
   d4c4e:	f001 ff30 	bl	d6ab2 <_ZdlPvj>
   d4c52:	4620      	mov	r0, r4
   d4c54:	bd10      	pop	{r4, pc}

000d4c56 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d4c56:	f7ff ba22 	b.w	d409e <_ZdlPv>

000d4c5a <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
   d4c5a:	f7ff ba20 	b.w	d409e <_ZdlPv>

000d4c5e <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
   d4c5e:	f7ff ba1e 	b.w	d409e <_ZdlPv>
	...

000d4c64 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.101>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d4c64:	b508      	push	{r3, lr}
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
   d4c66:	200a      	movs	r0, #10
   d4c68:	4a02      	ldr	r2, [pc, #8]	; (d4c74 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.101+0x10>)
   d4c6a:	2100      	movs	r1, #0
   d4c6c:	f7ff ff2e 	bl	d4acc <panic_>
    }
}
   d4c70:	bd08      	pop	{r3, pc}
   d4c72:	bf00      	nop
   d4c74:	000d480d 	.word	0x000d480d

000d4c78 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.110>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4c78:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d4c7a:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4c7c:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d4c7e:	689b      	ldr	r3, [r3, #8]
   d4c80:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4c82:	68a3      	ldr	r3, [r4, #8]
   d4c84:	3b01      	subs	r3, #1
   d4c86:	60a3      	str	r3, [r4, #8]
   d4c88:	b92b      	cbnz	r3, d4c96 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.110+0x1e>
            _M_destroy();
   d4c8a:	6823      	ldr	r3, [r4, #0]
   d4c8c:	4620      	mov	r0, r4
   d4c8e:	68db      	ldr	r3, [r3, #12]
        }
    }
   d4c90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d4c94:	4718      	bx	r3
   d4c96:	bd10      	pop	{r4, pc}

000d4c98 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   d4c98:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d4c9c:	b2da      	uxtb	r2, r3
   d4c9e:	2a09      	cmp	r2, #9
   d4ca0:	d801      	bhi.n	d4ca6 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   d4ca2:	4618      	mov	r0, r3
   d4ca4:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   d4ca6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d4caa:	2b05      	cmp	r3, #5
   d4cac:	d801      	bhi.n	d4cb2 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   d4cae:	3857      	subs	r0, #87	; 0x57
   d4cb0:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   d4cb2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d4cb6:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   d4cb8:	bf94      	ite	ls
   d4cba:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   d4cbc:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
   d4cc0:	4770      	bx	lr
	...

000d4cc4 <_ZN8particle3ble13WiringBleLockC1Ev>:

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d4cc4:	b510      	push	{r4, lr}
            locked_(false) {
   d4cc6:	2300      	movs	r3, #0
   d4cc8:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d4cca:	4b04      	ldr	r3, [pc, #16]	; (d4cdc <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d4ccc:	4604      	mov	r4, r0
   d4cce:	6818      	ldr	r0, [r3, #0]
   d4cd0:	f7ff fd84 	bl	d47dc <os_mutex_recursive_lock>
        lock.locked_ = false;
    }

    void lock() {
        mutex_.lock();
        locked_ = true;
   d4cd4:	2301      	movs	r3, #1
   d4cd6:	7023      	strb	r3, [r4, #0]
class WiringBleLock {
public:
    WiringBleLock() :
            locked_(false) {
        lock();
    }
   d4cd8:	4620      	mov	r0, r4
   d4cda:	bd10      	pop	{r4, pc}
   d4cdc:	2003e3c8 	.word	0x2003e3c8

000d4ce0 <_ZN8particle3ble13WiringBleLockD1Ev>:

    ~WiringBleLock() {
   d4ce0:	b510      	push	{r4, lr}
        if (locked_) {
   d4ce2:	7803      	ldrb	r3, [r0, #0]
    WiringBleLock() :
            locked_(false) {
        lock();
    }

    ~WiringBleLock() {
   d4ce4:	4604      	mov	r4, r0
        if (locked_) {
   d4ce6:	b11b      	cbz	r3, d4cf0 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d4ce8:	4b02      	ldr	r3, [pc, #8]	; (d4cf4 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   d4cea:	6818      	ldr	r0, [r3, #0]
   d4cec:	f7ff fd7e 	bl	d47ec <os_mutex_recursive_unlock>
            unlock();
        }
    }
   d4cf0:	4620      	mov	r0, r4
   d4cf2:	bd10      	pop	{r4, pc}
   d4cf4:	2003e3c8 	.word	0x2003e3c8

000d4cf8 <_ZNK8particle10BleAddresseqERKS0_>:
BleAddress& BleAddress::operator=(const uint8_t addr[BLE_SIG_ADDR_LEN]) {
    memcpy(address_.addr, addr, BLE_SIG_ADDR_LEN);
    return *this;
}

bool BleAddress::operator==(const BleAddress& addr) const {
   d4cf8:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   d4cfa:	7982      	ldrb	r2, [r0, #6]
   d4cfc:	798b      	ldrb	r3, [r1, #6]
   d4cfe:	429a      	cmp	r2, r3
   d4d00:	d106      	bne.n	d4d10 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   d4d02:	2206      	movs	r2, #6
   d4d04:	f002 fd2e 	bl	d7764 <memcmp>
   d4d08:	fab0 f080 	clz	r0, r0
   d4d0c:	0940      	lsrs	r0, r0, #5
   d4d0e:	bd08      	pop	{r3, pc}
        return true;
    }
    return false;
   d4d10:	2000      	movs	r0, #0
}
   d4d12:	bd08      	pop	{r3, pc}

000d4d14 <_ZN8particle7BleUuidC1Ev>:


/*******************************************************
 * BleUuid class
 */
BleUuid::BleUuid()
   d4d14:	b510      	push	{r4, lr}
        : uuid_() {
   d4d16:	2214      	movs	r2, #20


/*******************************************************
 * BleUuid class
 */
BleUuid::BleUuid()
   d4d18:	4604      	mov	r4, r0
        : uuid_() {
   d4d1a:	2100      	movs	r1, #0
   d4d1c:	f002 fd57 	bl	d77ce <memset>
}
   d4d20:	4620      	mov	r0, r4
   d4d22:	bd10      	pop	{r4, pc}

000d4d24 <_ZN8particle7BleUuidC1ERKS0_>:

BleUuid::BleUuid(const hal_ble_uuid_t& uuid) {
    uuid_ = uuid;
}

BleUuid::BleUuid(const BleUuid& uuid)
   d4d24:	b510      	push	{r4, lr}
        : uuid_(uuid.uuid_) {
   d4d26:	4603      	mov	r3, r0
   d4d28:	f101 0214 	add.w	r2, r1, #20
   d4d2c:	f851 4b04 	ldr.w	r4, [r1], #4
   d4d30:	f843 4b04 	str.w	r4, [r3], #4
   d4d34:	4291      	cmp	r1, r2
   d4d36:	d1f9      	bne.n	d4d2c <_ZN8particle7BleUuidC1ERKS0_+0x8>
}
   d4d38:	bd10      	pop	{r4, pc}

000d4d3a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order)
   d4d3a:	b570      	push	{r4, r5, r6, lr}
   d4d3c:	460c      	mov	r4, r1
   d4d3e:	4605      	mov	r5, r0
   d4d40:	4616      	mov	r6, r2
        : BleUuid() {
   d4d42:	f7ff ffe7 	bl	d4d14 <_ZN8particle7BleUuidC1Ev>
    if (!uuid128) {
   d4d46:	b92c      	cbnz	r4, d4d54 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1a>
        memset(uuid_.uuid128, 0x00, BLE_SIG_UUID_128BIT_LEN);
   d4d48:	2210      	movs	r2, #16
   d4d4a:	4621      	mov	r1, r4
   d4d4c:	4628      	mov	r0, r5
   d4d4e:	f002 fd3e 	bl	d77ce <memset>
   d4d52:	e016      	b.n	d4d82 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x48>
    } else {
        if (order == BleUuidOrder::LSB) {
   d4d54:	2e01      	cmp	r6, #1
   d4d56:	d109      	bne.n	d4d6c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x32>
            memcpy(uuid_.uuid128, uuid128, BLE_SIG_UUID_128BIT_LEN);
   d4d58:	462b      	mov	r3, r5
   d4d5a:	f104 0210 	add.w	r2, r4, #16
   d4d5e:	f854 1b04 	ldr.w	r1, [r4], #4
   d4d62:	f843 1b04 	str.w	r1, [r3], #4
   d4d66:	4294      	cmp	r4, r2
   d4d68:	d1f9      	bne.n	d4d5e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x24>
   d4d6a:	e008      	b.n	d4d7e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x44>
   d4d6c:	1e6a      	subs	r2, r5, #1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order)
        : BleUuid() {
    if (!uuid128) {
        memset(uuid_.uuid128, 0x00, BLE_SIG_UUID_128BIT_LEN);
    } else {
        if (order == BleUuidOrder::LSB) {
   d4d6e:	230f      	movs	r3, #15
            memcpy(uuid_.uuid128, uuid128, BLE_SIG_UUID_128BIT_LEN);
        } else {
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
                uuid_.uuid128[i] = uuid128[j];
   d4d70:	5ce1      	ldrb	r1, [r4, r3]
   d4d72:	f802 1f01 	strb.w	r1, [r2, #1]!
        memset(uuid_.uuid128, 0x00, BLE_SIG_UUID_128BIT_LEN);
    } else {
        if (order == BleUuidOrder::LSB) {
            memcpy(uuid_.uuid128, uuid128, BLE_SIG_UUID_128BIT_LEN);
        } else {
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   d4d76:	3b01      	subs	r3, #1
   d4d78:	b2db      	uxtb	r3, r3
   d4d7a:	2bff      	cmp	r3, #255	; 0xff
   d4d7c:	d1f8      	bne.n	d4d70 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
                uuid_.uuid128[i] = uuid128[j];
            }
        }
        uuid_.type = BLE_UUID_TYPE_128BIT;
   d4d7e:	2301      	movs	r3, #1
   d4d80:	742b      	strb	r3, [r5, #16]
    }
}
   d4d82:	4628      	mov	r0, r5
   d4d84:	bd70      	pop	{r4, r5, r6, pc}

000d4d86 <_ZN8particle7BleUuidC1Et>:

BleUuid::BleUuid(uint16_t uuid16)
   d4d86:	b538      	push	{r3, r4, r5, lr}
   d4d88:	4604      	mov	r4, r0
   d4d8a:	460d      	mov	r5, r1
        : BleUuid() {
   d4d8c:	f7ff ffc2 	bl	d4d14 <_ZN8particle7BleUuidC1Ev>
    uuid_.uuid16 = uuid16;
    uuid_.type = BLE_UUID_TYPE_16BIT;
   d4d90:	2300      	movs	r3, #0
    }
}

BleUuid::BleUuid(uint16_t uuid16)
        : BleUuid() {
    uuid_.uuid16 = uuid16;
   d4d92:	8025      	strh	r5, [r4, #0]
    uuid_.type = BLE_UUID_TYPE_16BIT;
   d4d94:	7423      	strb	r3, [r4, #16]
}
   d4d96:	4620      	mov	r0, r4
   d4d98:	bd38      	pop	{r3, r4, r5, pc}

000d4d9a <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:

BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   d4d9a:	b538      	push	{r3, r4, r5, lr}
   d4d9c:	4604      	mov	r4, r0
   d4d9e:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   d4da0:	461a      	mov	r2, r3
   d4da2:	f7ff ffca 	bl	d4d3a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid_.uuid128[12] = (uint8_t)(uuid16 & 0x00FF);
   d4da6:	7325      	strb	r5, [r4, #12]
    uuid_.uuid128[13] = (uint8_t)((uuid16 >> 8) & 0x00FF);
    uuid_.type = BLE_UUID_TYPE_128BIT;
   d4da8:	2301      	movs	r3, #1
}

BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
        : BleUuid(uuid128, order) {
    uuid_.uuid128[12] = (uint8_t)(uuid16 & 0x00FF);
    uuid_.uuid128[13] = (uint8_t)((uuid16 >> 8) & 0x00FF);
   d4daa:	0a2d      	lsrs	r5, r5, #8
   d4dac:	7365      	strb	r5, [r4, #13]
    uuid_.type = BLE_UUID_TYPE_128BIT;
   d4dae:	7423      	strb	r3, [r4, #16]
}
   d4db0:	4620      	mov	r0, r4
   d4db2:	bd38      	pop	{r3, r4, r5, pc}

000d4db4 <_ZNK8particle7BleUuid4typeEv>:
        uint8_t temp[BLE_SIG_UUID_128BIT_LEN] = {};
        return memcmp(uuid_.uuid128, temp, BLE_SIG_UUID_128BIT_LEN);
    }
}

BleUuidType BleUuid::type() const {
   d4db4:	7c03      	ldrb	r3, [r0, #16]
   d4db6:	f013 0ffd 	tst.w	r3, #253	; 0xfd
    if (uuid_.type == BLE_UUID_TYPE_16BIT || uuid_.type == BLE_UUID_TYPE_128BIT_SHORTED) {
        return BleUuidType::SHORT;
    } else {
        return BleUuidType::LONG;
    }
}
   d4dba:	bf14      	ite	ne
   d4dbc:	2001      	movne	r0, #1
   d4dbe:	2000      	moveq	r0, #0
   d4dc0:	4770      	bx	lr

000d4dc2 <_ZNK8particle7BleUuid7isValidEv>:

BleUuid::BleUuid(const String& uuid)
        : BleUuid(uuid.c_str()) {
}

bool BleUuid::isValid() const {
   d4dc2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d4dc4:	4604      	mov	r4, r0
    if (type() == BleUuidType::SHORT) {
   d4dc6:	f7ff fff5 	bl	d4db4 <_ZNK8particle7BleUuid4typeEv>
   d4dca:	b908      	cbnz	r0, d4dd0 <_ZNK8particle7BleUuid7isValidEv+0xe>
        return uuid_.uuid16 != 0x0000;
   d4dcc:	8820      	ldrh	r0, [r4, #0]
   d4dce:	e009      	b.n	d4de4 <_ZNK8particle7BleUuid7isValidEv+0x22>
    } else {
        uint8_t temp[BLE_SIG_UUID_128BIT_LEN] = {};
   d4dd0:	2210      	movs	r2, #16
   d4dd2:	2100      	movs	r1, #0
   d4dd4:	4668      	mov	r0, sp
   d4dd6:	f002 fcfa 	bl	d77ce <memset>
        return memcmp(uuid_.uuid128, temp, BLE_SIG_UUID_128BIT_LEN);
   d4dda:	2210      	movs	r2, #16
   d4ddc:	4669      	mov	r1, sp
   d4dde:	4620      	mov	r0, r4
   d4de0:	f002 fcc0 	bl	d7764 <memcmp>
   d4de4:	3000      	adds	r0, #0
   d4de6:	bf18      	it	ne
   d4de8:	2001      	movne	r0, #1
    }
}
   d4dea:	b004      	add	sp, #16
   d4dec:	bd10      	pop	{r4, pc}

000d4dee <_ZNK8particle7BleUuid7shortedEv>:
    return uuid_;
}

uint16_t BleUuid::shorted() const {
    return uuid_.uuid16;
}
   d4dee:	8800      	ldrh	r0, [r0, #0]
   d4df0:	4770      	bx	lr

000d4df2 <_ZNK8particle7BleUuid8rawBytesEv>:
    memcpy(uuid128, uuid_.uuid128, BLE_SIG_UUID_128BIT_LEN);
}

const uint8_t* BleUuid::rawBytes() const {
    return uuid_.uuid128;
}
   d4df2:	4770      	bx	lr

000d4df4 <_ZN8particle7BleUuidaSERKS0_>:
    memcpy(buf, cStr, len);
    buf[len++] = '\0';
    return len;
}

BleUuid& BleUuid::operator=(const BleUuid& uuid) {
   d4df4:	b510      	push	{r4, lr}
    uuid_ = uuid.uuid_;
   d4df6:	4603      	mov	r3, r0
   d4df8:	f101 0214 	add.w	r2, r1, #20
   d4dfc:	f851 4b04 	ldr.w	r4, [r1], #4
   d4e00:	f843 4b04 	str.w	r4, [r3], #4
   d4e04:	4291      	cmp	r1, r2
   d4e06:	d1f9      	bne.n	d4dfc <_ZN8particle7BleUuidaSERKS0_+0x8>
    return *this;
}
   d4e08:	bd10      	pop	{r4, pc}

000d4e0a <_ZN8particle7BleUuidaSEPKh>:

BleUuid& BleUuid::operator=(const uint8_t* uuid128) {
   d4e0a:	b510      	push	{r4, lr}
    if (uuid128) {
   d4e0c:	b151      	cbz	r1, d4e24 <_ZN8particle7BleUuidaSEPKh+0x1a>
        memcpy(uuid_.uuid128, uuid128, BLE_SIG_UUID_128BIT_LEN);
   d4e0e:	4603      	mov	r3, r0
   d4e10:	f101 0210 	add.w	r2, r1, #16
   d4e14:	f851 4b04 	ldr.w	r4, [r1], #4
   d4e18:	f843 4b04 	str.w	r4, [r3], #4
   d4e1c:	4291      	cmp	r1, r2
   d4e1e:	d1f9      	bne.n	d4e14 <_ZN8particle7BleUuidaSEPKh+0xa>
        uuid_.type = BLE_UUID_TYPE_128BIT;
   d4e20:	2301      	movs	r3, #1
   d4e22:	7403      	strb	r3, [r0, #16]
    }
    return *this;
}
   d4e24:	bd10      	pop	{r4, pc}

000d4e26 <_ZNK8particle7BleUuideqERKS0_>:
BleUuid& BleUuid::operator=(const hal_ble_uuid_t& uuid) {
    uuid_ = uuid;
    return *this;
}

bool BleUuid::operator==(const BleUuid& uuid) const {
   d4e26:	b510      	push	{r4, lr}
   d4e28:	4604      	mov	r4, r0
    if (type() == BleUuidType::SHORT) {
   d4e2a:	f7ff ffc3 	bl	d4db4 <_ZNK8particle7BleUuid4typeEv>
   d4e2e:	b928      	cbnz	r0, d4e3c <_ZNK8particle7BleUuideqERKS0_+0x16>
        return (uuid_.uuid16 == uuid.uuid_.uuid16);
   d4e30:	8808      	ldrh	r0, [r1, #0]
   d4e32:	8823      	ldrh	r3, [r4, #0]
   d4e34:	1a1b      	subs	r3, r3, r0
   d4e36:	4258      	negs	r0, r3
   d4e38:	4158      	adcs	r0, r3
   d4e3a:	bd10      	pop	{r4, pc}
    } else {
        return !memcmp(uuid_.uuid128, uuid.uuid_.uuid128, BLE_SIG_UUID_128BIT_LEN);
   d4e3c:	2210      	movs	r2, #16
   d4e3e:	4620      	mov	r0, r4
   d4e40:	f002 fc90 	bl	d7764 <memcmp>
   d4e44:	fab0 f080 	clz	r0, r0
   d4e48:	0940      	lsrs	r0, r0, #5
    }
}
   d4e4a:	bd10      	pop	{r4, pc}

000d4e4c <_ZN8particle7BleUuid9constructEPKc>:

bool BleUuid::operator==(const uint8_t* uuid128) const {
    return (type() == BleUuidType::LONG && !memcmp(uuid128, uuid_.uuid128, BLE_SIG_UUID_128BIT_LEN));
}

void BleUuid::construct(const char* uuid) {
   d4e4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d4e4e:	4605      	mov	r5, r0
    if (uuid == nullptr) {
   d4e50:	460e      	mov	r6, r1
   d4e52:	b919      	cbnz	r1, d4e5c <_ZN8particle7BleUuid9constructEPKc+0x10>
        memset(uuid_.uuid128, 0x00, BLE_SIG_UUID_128BIT_LEN);
   d4e54:	2210      	movs	r2, #16
   d4e56:	f002 fcba 	bl	d77ce <memset>
   d4e5a:	e051      	b.n	d4f00 <_ZN8particle7BleUuid9constructEPKc+0xb4>
        uuid_.type = BLE_UUID_TYPE_128BIT;
        return;
    }
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   d4e5c:	2124      	movs	r1, #36	; 0x24
   d4e5e:	4630      	mov	r0, r6
   d4e60:	f002 fcee 	bl	d7840 <strnlen>
   d4e64:	2804      	cmp	r0, #4
   d4e66:	d002      	beq.n	d4e6e <_ZN8particle7BleUuid9constructEPKc+0x22>
   d4e68:	2700      	movs	r7, #0
   d4e6a:	2410      	movs	r4, #16
   d4e6c:	e03b      	b.n	d4ee6 <_ZN8particle7BleUuid9constructEPKc+0x9a>

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d4e6e:	7830      	ldrb	r0, [r6, #0]
   d4e70:	f7ff ff12 	bl	d4c98 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d4e74:	1e04      	subs	r4, r0, #0
   d4e76:	db47      	blt.n	d4f08 <_ZN8particle7BleUuid9constructEPKc+0xbc>
            break;
        }
        const int l = hexToNibble(*src++);
   d4e78:	7870      	ldrb	r0, [r6, #1]
   d4e7a:	f7ff ff0d 	bl	d4c98 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d4e7e:	2800      	cmp	r0, #0
   d4e80:	db42      	blt.n	d4f08 <_ZN8particle7BleUuid9constructEPKc+0xbc>
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d4e82:	ea40 1004 	orr.w	r0, r0, r4, lsl #4
   d4e86:	f88d 0004 	strb.w	r0, [sp, #4]
}

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d4e8a:	78b0      	ldrb	r0, [r6, #2]
   d4e8c:	f7ff ff04 	bl	d4c98 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d4e90:	1e04      	subs	r4, r0, #0
   d4e92:	db39      	blt.n	d4f08 <_ZN8particle7BleUuid9constructEPKc+0xbc>
            break;
        }
        const int l = hexToNibble(*src++);
   d4e94:	78f0      	ldrb	r0, [r6, #3]
   d4e96:	f7ff feff 	bl	d4c98 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d4e9a:	2800      	cmp	r0, #0
   d4e9c:	db34      	blt.n	d4f08 <_ZN8particle7BleUuid9constructEPKc+0xbc>
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d4e9e:	ea40 1004 	orr.w	r0, r0, r4, lsl #4
        char buf[2] = {};
        if (hexToBytes(uuid, buf, BLE_SIG_UUID_16BIT_LEN) == BLE_SIG_UUID_16BIT_LEN) {
            uuid_.uuid16 = ((uint16_t)buf[0] << 8) | (uint16_t)buf[1];
   d4ea2:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d4ea6:	b2c0      	uxtb	r0, r0
   d4ea8:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   d4eac:	8028      	strh	r0, [r5, #0]
        } else {
            uuid_.uuid16 = 0x0000;
        }
        uuid_.type = BLE_UUID_TYPE_16BIT;
   d4eae:	2300      	movs	r3, #0
   d4eb0:	e027      	b.n	d4f02 <_ZN8particle7BleUuid9constructEPKc+0xb6>
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d4eb2:	b32c      	cbz	r4, d4f00 <_ZN8particle7BleUuid9constructEPKc+0xb4>
        int8_t hi = hexToNibble(uuid[i]);
   d4eb4:	5df0      	ldrb	r0, [r6, r7]
   d4eb6:	f7ff feef 	bl	d4c98 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   d4eba:	0603      	lsls	r3, r0, #24
   d4ebc:	d412      	bmi.n	d4ee4 <_ZN8particle7BleUuid9constructEPKc+0x98>
            uuid_.uuid128[len - 1] = hi << 4;
   d4ebe:	3c01      	subs	r4, #1
   d4ec0:	0100      	lsls	r0, r0, #4
   d4ec2:	5528      	strb	r0, [r5, r4]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   d4ec4:	2124      	movs	r1, #36	; 0x24
   d4ec6:	4630      	mov	r0, r6
   d4ec8:	f002 fcba 	bl	d7840 <strnlen>
   d4ecc:	3701      	adds	r7, #1
   d4ece:	4287      	cmp	r7, r0
   d4ed0:	d208      	bcs.n	d4ee4 <_ZN8particle7BleUuid9constructEPKc+0x98>
                int8_t lo = hexToNibble(uuid[i]);
   d4ed2:	5df0      	ldrb	r0, [r6, r7]
   d4ed4:	f7ff fee0 	bl	d4c98 <_ZN8particle11hexToNibbleEc>
   d4ed8:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   d4eda:	2800      	cmp	r0, #0
                    uuid_.uuid128[len - 1] |= lo;
   d4edc:	bfa2      	ittt	ge
   d4ede:	5d2b      	ldrbge	r3, [r5, r4]
   d4ee0:	4318      	orrge	r0, r3
   d4ee2:	5528      	strbge	r0, [r5, r4]
        }
        uuid_.type = BLE_UUID_TYPE_16BIT;
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d4ee4:	3701      	adds	r7, #1
   d4ee6:	2124      	movs	r1, #36	; 0x24
   d4ee8:	4630      	mov	r0, r6
   d4eea:	f002 fca9 	bl	d7840 <strnlen>
   d4eee:	4287      	cmp	r7, r0
   d4ef0:	d3df      	bcc.n	d4eb2 <_ZN8particle7BleUuid9constructEPKc+0x66>
   d4ef2:	442c      	add	r4, r5
            }
            len--;
        }
    }
    while (len > 0) {
        uuid_.uuid128[len - 1] = 0x00;
   d4ef4:	2300      	movs	r3, #0
                }
            }
            len--;
        }
    }
    while (len > 0) {
   d4ef6:	42a5      	cmp	r5, r4
   d4ef8:	d002      	beq.n	d4f00 <_ZN8particle7BleUuid9constructEPKc+0xb4>
        uuid_.uuid128[len - 1] = 0x00;
   d4efa:	f804 3d01 	strb.w	r3, [r4, #-1]!
                }
            }
            len--;
        }
    }
    while (len > 0) {
   d4efe:	e7fa      	b.n	d4ef6 <_ZN8particle7BleUuid9constructEPKc+0xaa>
        uuid_.uuid128[len - 1] = 0x00;
        len--;
    }
    uuid_.type = BLE_UUID_TYPE_128BIT;
   d4f00:	2301      	movs	r3, #1
   d4f02:	742b      	strb	r3, [r5, #16]
}
   d4f04:	b003      	add	sp, #12
   d4f06:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
        char buf[2] = {};
        if (hexToBytes(uuid, buf, BLE_SIG_UUID_16BIT_LEN) == BLE_SIG_UUID_16BIT_LEN) {
            uuid_.uuid16 = ((uint16_t)buf[0] << 8) | (uint16_t)buf[1];
        } else {
            uuid_.uuid16 = 0x0000;
   d4f08:	2300      	movs	r3, #0
   d4f0a:	802b      	strh	r3, [r5, #0]
   d4f0c:	e7cf      	b.n	d4eae <_ZN8particle7BleUuid9constructEPKc+0x62>

000d4f0e <_ZN8particle7BleUuidC1EPKc>:
    uuid_.uuid128[12] = (uint8_t)(uuid16 & 0x00FF);
    uuid_.uuid128[13] = (uint8_t)((uuid16 >> 8) & 0x00FF);
    uuid_.type = BLE_UUID_TYPE_128BIT;
}

BleUuid::BleUuid(const char* uuid)
   d4f0e:	b538      	push	{r3, r4, r5, lr}
   d4f10:	4604      	mov	r4, r0
   d4f12:	460d      	mov	r5, r1
        : BleUuid() {
   d4f14:	f7ff fefe 	bl	d4d14 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   d4f18:	4620      	mov	r0, r4
   d4f1a:	4629      	mov	r1, r5
   d4f1c:	f7ff ff96 	bl	d4e4c <_ZN8particle7BleUuid9constructEPKc>
}
   d4f20:	4620      	mov	r0, r4
   d4f22:	bd38      	pop	{r3, r4, r5, pc}

000d4f24 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>:
        break;
    }
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   d4f24:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
   d4f26:	b18b      	cbz	r3, d4f4c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x28>
   d4f28:	2400      	movs	r4, #0
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d4f2a:	1ce5      	adds	r5, r4, #3
   d4f2c:	428d      	cmp	r5, r1
   d4f2e:	d80f      	bhi.n	d4f50 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   d4f30:	1c66      	adds	r6, r4, #1
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
        adsLen = buf[i];
   d4f32:	5d05      	ldrb	r5, [r0, r4]
        if (buf[i + 1] == adsType) {
   d4f34:	5d87      	ldrb	r7, [r0, r6]
   d4f36:	4297      	cmp	r7, r2
   d4f38:	d105      	bne.n	d4f46 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x22>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   d4f3a:	442e      	add	r6, r5
   d4f3c:	42b1      	cmp	r1, r6
   d4f3e:	d307      	bcc.n	d4f50 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
                *offset = i;
   d4f40:	601c      	str	r4, [r3, #0]
                adsLen += 1;
   d4f42:	1c68      	adds	r0, r5, #1
                return adsLen;
   d4f44:	bdf0      	pop	{r4, r5, r6, r7, pc}
            } else {
                return 0;
            }
        } else {
            // Navigate to the next AD structure.
            i += (adsLen + 1);
   d4f46:	3501      	adds	r5, #1
   d4f48:	442c      	add	r4, r5
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d4f4a:	e7ee      	b.n	d4f2a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x6>
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
    if (offset == nullptr) {
        return 0;
   d4f4c:	4618      	mov	r0, r3
   d4f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4f50:	2000      	movs	r0, #0
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   d4f52:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4f54 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
    selfData_[selfLen_++] = beacon.measurePower;

    return selfLen_;
}

size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d4f54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d4f58:	4604      	mov	r4, r0
   d4f5a:	460e      	mov	r6, r1
   d4f5c:	461d      	mov	r5, r3
    if (buf == nullptr) {
   d4f5e:	4617      	mov	r7, r2
   d4f60:	2a00      	cmp	r2, #0
   d4f62:	d03a      	beq.n	d4fda <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        return selfLen_;
    }
    size_t offset;
    size_t adsLen = locate(selfData_, selfLen_, type, &offset);
   d4f64:	460a      	mov	r2, r1
   d4f66:	ab01      	add	r3, sp, #4
   d4f68:	6a01      	ldr	r1, [r0, #32]
   d4f6a:	f7ff ffdb 	bl	d4f24 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
    if (!force && adsLen > 0) {
   d4f6e:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   d4f72:	6a22      	ldr	r2, [r4, #32]
   d4f74:	bb03      	cbnz	r3, d4fb8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
   d4f76:	b1f8      	cbz	r0, d4fb8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
        // Update the existing AD structure.
        size_t staLen = selfLen_ - adsLen;
        if ((staLen + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d4f78:	1c96      	adds	r6, r2, #2
   d4f7a:	442e      	add	r6, r5
   d4f7c:	1a36      	subs	r6, r6, r0
   d4f7e:	2e1f      	cmp	r6, #31
   d4f80:	d82b      	bhi.n	d4fda <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
            // Firstly, move the last consistent block.
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d4f82:	f8dd 8004 	ldr.w	r8, [sp, #4]
   d4f86:	f108 0902 	add.w	r9, r8, #2
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d4f8a:	ebc8 0202 	rsb	r2, r8, r2
   d4f8e:	1a12      	subs	r2, r2, r0
   d4f90:	eb00 0108 	add.w	r1, r0, r8
   d4f94:	eb05 0009 	add.w	r0, r5, r9
   d4f98:	b292      	uxth	r2, r2
   d4f9a:	4421      	add	r1, r4
   d4f9c:	4420      	add	r0, r4
   d4f9e:	f002 fbfb 	bl	d7798 <memmove>
            // Secondly, Update the AD structure.
            // The Length field is the total length of Type field and Data field.
            selfData_[offset] = len + 1;
   d4fa2:	1c6b      	adds	r3, r5, #1
   d4fa4:	f804 3008 	strb.w	r3, [r4, r8]
            memcpy(&selfData_[offset + 2], buf, len);
   d4fa8:	462a      	mov	r2, r5
   d4faa:	4639      	mov	r1, r7
   d4fac:	eb04 0009 	add.w	r0, r4, r9
   d4fb0:	f002 fbe7 	bl	d7782 <memcpy>
            // An AD structure is composed of one byte length field, one byte Type field and Data field.
            selfLen_ = staLen + len + 2;
   d4fb4:	6226      	str	r6, [r4, #32]
   d4fb6:	e010      	b.n	d4fda <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
   d4fb8:	1c90      	adds	r0, r2, #2
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d4fba:	182b      	adds	r3, r5, r0
   d4fbc:	2b1f      	cmp	r3, #31
   d4fbe:	d80c      	bhi.n	d4fda <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
   d4fc0:	1c6b      	adds	r3, r5, #1
   d4fc2:	54a3      	strb	r3, [r4, r2]
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d4fc4:	4422      	add	r2, r4
   d4fc6:	6220      	str	r0, [r4, #32]
        memcpy(&selfData_[selfLen_], buf, len);
   d4fc8:	4639      	mov	r1, r7
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d4fca:	7056      	strb	r6, [r2, #1]
        memcpy(&selfData_[selfLen_], buf, len);
   d4fcc:	4420      	add	r0, r4
   d4fce:	462a      	mov	r2, r5
   d4fd0:	f002 fbd7 	bl	d7782 <memcpy>
        selfLen_ += len;
   d4fd4:	6a22      	ldr	r2, [r4, #32]
   d4fd6:	442a      	add	r2, r5
   d4fd8:	6222      	str	r2, [r4, #32]
    }
    return selfLen_;
   d4fda:	6a20      	ldr	r0, [r4, #32]
}
   d4fdc:	b003      	add	sp, #12
   d4fde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d4fe2 <_ZN8particle18BleAdvertisingDataC1Ev>:


/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
   d4fe2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d4fe4:	4604      	mov	r4, r0
        : selfData_(),
          selfLen_(0) {
   d4fe6:	4603      	mov	r3, r0
   d4fe8:	f100 021f 	add.w	r2, r0, #31
   d4fec:	2000      	movs	r0, #0
   d4fee:	f803 0b01 	strb.w	r0, [r3], #1
   d4ff2:	4293      	cmp	r3, r2
   d4ff4:	f04f 0100 	mov.w	r1, #0
   d4ff8:	d1f9      	bne.n	d4fee <_ZN8particle18BleAdvertisingDataC1Ev+0xc>
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d4ffa:	aa04      	add	r2, sp, #16
   d4ffc:	2306      	movs	r3, #6
   d4ffe:	f802 3d01 	strb.w	r3, [r2, #-1]!
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d5002:	2301      	movs	r3, #1
/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
        : selfData_(),
          selfLen_(0) {
   d5004:	6221      	str	r1, [r4, #32]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d5006:	9100      	str	r1, [sp, #0]
   d5008:	4620      	mov	r0, r4
   d500a:	4619      	mov	r1, r3
   d500c:	f7ff ffa2 	bl	d4f54 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d5010:	4620      	mov	r0, r4
   d5012:	b004      	add	sp, #16
   d5014:	bd10      	pop	{r4, pc}

000d5016 <_ZN8particle18BleAdvertisingData15appendLocalNameEPKc>:
        selfLen_ += len;
    }
    return selfLen_;
}

size_t BleAdvertisingData::appendLocalName(const char* name) {
   d5016:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5018:	460c      	mov	r4, r1
   d501a:	4605      	mov	r5, r0
    return append(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, (const uint8_t*)name, strnlen(name, BLE_MAX_DEV_NAME_LEN), false);
   d501c:	2114      	movs	r1, #20
   d501e:	4620      	mov	r0, r4
   d5020:	f002 fc0e 	bl	d7840 <strnlen>
   d5024:	2300      	movs	r3, #0
   d5026:	9300      	str	r3, [sp, #0]
   d5028:	4622      	mov	r2, r4
   d502a:	4603      	mov	r3, r0
   d502c:	2109      	movs	r1, #9
   d502e:	4628      	mov	r0, r5
   d5030:	f7ff ff90 	bl	d4f54 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d5034:	b003      	add	sp, #12
   d5036:	bd30      	pop	{r4, r5, pc}

000d5038 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d5038:	b573      	push	{r0, r1, r4, r5, r6, lr}
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d503a:	460a      	mov	r2, r1
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d503c:	460e      	mov	r6, r1
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d503e:	ab01      	add	r3, sp, #4
   d5040:	6a01      	ldr	r1, [r0, #32]
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d5042:	4604      	mov	r4, r0
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d5044:	f7ff ff6e 	bl	d4f24 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
    if (len > 0) {
   d5048:	4605      	mov	r5, r0
   d504a:	b178      	cbz	r0, d506c <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x34>
        size_t moveLen = selfLen_ - offset - len;
   d504c:	9801      	ldr	r0, [sp, #4]
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   d504e:	6a22      	ldr	r2, [r4, #32]
   d5050:	1829      	adds	r1, r5, r0
   d5052:	1a12      	subs	r2, r2, r0
   d5054:	1b52      	subs	r2, r2, r5
   d5056:	4421      	add	r1, r4
   d5058:	4420      	add	r0, r4
   d505a:	f002 fb92 	bl	d7782 <memcpy>
        selfLen_ -= len;
   d505e:	6a23      	ldr	r3, [r4, #32]
   d5060:	1b5d      	subs	r5, r3, r5
   d5062:	6225      	str	r5, [r4, #32]
        // Recursively remove duplicated type.
        remove(type);
   d5064:	4631      	mov	r1, r6
   d5066:	4620      	mov	r0, r4
   d5068:	f7ff ffe6 	bl	d5038 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
    }
}
   d506c:	b002      	add	sp, #8
   d506e:	bd70      	pop	{r4, r5, r6, pc}

000d5070 <_ZN8particle21BleCharacteristicImplC1Ev>:
/*******************************************************
 * BleCharacteristicImpl definition
 */
class BleCharacteristicImpl {
public:
    BleCharacteristicImpl()
   d5070:	b538      	push	{r3, r4, r5, lr}
              attrHandles_(),
              charUuid_(),
              svcUuid_(),
              description_(),
              callback_(nullptr),
              context_(nullptr) {
   d5072:	2500      	movs	r5, #0
   d5074:	f64f 73ff 	movw	r3, #65535	; 0xffff
/*******************************************************
 * BleCharacteristicImpl definition
 */
class BleCharacteristicImpl {
public:
    BleCharacteristicImpl()
   d5078:	4604      	mov	r4, r0
              attrHandles_(),
              charUuid_(),
              svcUuid_(),
              description_(),
              callback_(nullptr),
              context_(nullptr) {
   d507a:	8043      	strh	r3, [r0, #2]
   d507c:	220e      	movs	r2, #14
   d507e:	4629      	mov	r1, r5
   d5080:	7005      	strb	r5, [r0, #0]
   d5082:	7105      	strb	r5, [r0, #4]
   d5084:	3006      	adds	r0, #6
   d5086:	f002 fba2 	bl	d77ce <memset>
   d508a:	f104 0014 	add.w	r0, r4, #20
   d508e:	f7ff fe41 	bl	d4d14 <_ZN8particle7BleUuidC1Ev>
   d5092:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d5096:	f7ff fe3d 	bl	d4d14 <_ZN8particle7BleUuidC1Ev>
   d509a:	4904      	ldr	r1, [pc, #16]	; (d50ac <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   d509c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d50a0:	f001 fa88 	bl	d65b4 <_ZN6StringC1EPK19__FlashStringHelper>
   d50a4:	64e5      	str	r5, [r4, #76]	; 0x4c
   d50a6:	6525      	str	r5, [r4, #80]	; 0x50
    }
   d50a8:	4620      	mov	r0, r4
   d50aa:	bd38      	pop	{r3, r4, r5, pc}
   d50ac:	000d7c90 	.word	0x000d7c90

000d50b0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    void onDisconnectedCallback(BleOnDisconnectedCallback callback, void* context) {
        disconnectedCb_ = callback;
        disconnectedContext_ = context;
    }

    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   d50b0:	b510      	push	{r4, lr}
   d50b2:	6983      	ldr	r3, [r0, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d50b4:	69c2      	ldr	r2, [r0, #28]
   d50b6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   d50ba:	4293      	cmp	r3, r2
   d50bc:	4618      	mov	r0, r3
   d50be:	d006      	beq.n	d50ce <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   d50c0:	6804      	ldr	r4, [r0, #0]
   d50c2:	8824      	ldrh	r4, [r4, #0]
   d50c4:	428c      	cmp	r4, r1
   d50c6:	f103 0308 	add.w	r3, r3, #8
   d50ca:	d1f6      	bne.n	d50ba <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
   d50cc:	bd10      	pop	{r4, pc}
                return &peer;
            }
        }
        return nullptr;
   d50ce:	2000      	movs	r0, #0
    }
   d50d0:	bd10      	pop	{r4, pc}

000d50d2 <_ZNK8particle13BlePeerDevice7addressEv>:

void BlePeerDevice::bind(const BleAddress& address) const {
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   d50d2:	b510      	push	{r4, lr}
    return impl()->address();
   d50d4:	680a      	ldr	r2, [r1, #0]
   d50d6:	f852 3f02 	ldr.w	r3, [r2, #2]!
   d50da:	6003      	str	r3, [r0, #0]
   d50dc:	6853      	ldr	r3, [r2, #4]
   d50de:	6043      	str	r3, [r0, #4]
}
   d50e0:	bd10      	pop	{r4, pc}

000d50e2 <_ZNK8particle13BlePeerDeviceeqERKS0_>:

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d50e2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d50e4:	6802      	ldr	r2, [r0, #0]
   d50e6:	680b      	ldr	r3, [r1, #0]
   d50e8:	8812      	ldrh	r2, [r2, #0]
   d50ea:	881b      	ldrh	r3, [r3, #0]
   d50ec:	429a      	cmp	r2, r3

BleAddress BlePeerDevice::address() const {
    return impl()->address();
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d50ee:	460c      	mov	r4, r1
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d50f0:	d10c      	bne.n	d510c <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2a>
   d50f2:	4601      	mov	r1, r0
   d50f4:	4668      	mov	r0, sp
   d50f6:	f7ff ffec 	bl	d50d2 <_ZNK8particle13BlePeerDevice7addressEv>
   d50fa:	4621      	mov	r1, r4
   d50fc:	a802      	add	r0, sp, #8
   d50fe:	f7ff ffe8 	bl	d50d2 <_ZNK8particle13BlePeerDevice7addressEv>
   d5102:	a902      	add	r1, sp, #8
   d5104:	4668      	mov	r0, sp
   d5106:	f7ff fdf7 	bl	d4cf8 <_ZNK8particle10BleAddresseqERKS0_>
   d510a:	b900      	cbnz	r0, d510e <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2c>
        return true;
    }
    return false;
   d510c:	2000      	movs	r0, #0
}
   d510e:	b004      	add	sp, #16
   d5110:	bd10      	pop	{r4, pc}
	...

000d5114 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d5114:	b510      	push	{r4, lr}
   d5116:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d5118:	2034      	movs	r0, #52	; 0x34
   d511a:	f7fe ffbe 	bl	d409a <_Znwj>
   d511e:	4601      	mov	r1, r0
   d5120:	b168      	cbz	r0, d513e <_ZN8particle14BleLocalDeviceC1Ev+0x2a>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d5122:	2300      	movs	r3, #0
   d5124:	6003      	str	r3, [r0, #0]
   d5126:	6043      	str	r3, [r0, #4]
   d5128:	6083      	str	r3, [r0, #8]
   d512a:	60c3      	str	r3, [r0, #12]
   d512c:	6103      	str	r3, [r0, #16]
   d512e:	6143      	str	r3, [r0, #20]
   d5130:	6183      	str	r3, [r0, #24]
   d5132:	61c3      	str	r3, [r0, #28]
   d5134:	6203      	str	r3, [r0, #32]
public:
    BleLocalDeviceImpl()
            : connectedCb_(nullptr),
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
   d5136:	6243      	str	r3, [r0, #36]	; 0x24
   d5138:	6283      	str	r3, [r0, #40]	; 0x28
   d513a:	62c3      	str	r3, [r0, #44]	; 0x2c
   d513c:	6303      	str	r3, [r0, #48]	; 0x30
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d513e:	6021      	str	r1, [r4, #0]
/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   d5140:	b919      	cbnz	r1, d514a <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   d5142:	4a0a      	ldr	r2, [pc, #40]	; (d516c <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d5144:	200a      	movs	r0, #10
   d5146:	f7ff fcc1 	bl	d4acc <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   d514a:	2000      	movs	r0, #0
   d514c:	f7ff fad6 	bl	d46fc <hal_ble_stack_init>
   d5150:	b120      	cbz	r0, d515c <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   d5152:	4a06      	ldr	r2, [pc, #24]	; (d516c <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d5154:	2100      	movs	r1, #0
   d5156:	200a      	movs	r0, #10
   d5158:	f7ff fcb8 	bl	d4acc <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   d515c:	2200      	movs	r2, #0
   d515e:	6821      	ldr	r1, [r4, #0]
   d5160:	4803      	ldr	r0, [pc, #12]	; (d5170 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   d5162:	f7ff fb09 	bl	d4778 <hal_ble_set_callback_on_periph_link_events>
}
   d5166:	4620      	mov	r0, r4
   d5168:	bd10      	pop	{r4, pc}
   d516a:	bf00      	nop
   d516c:	000d480d 	.word	0x000d480d
   d5170:	000d553d 	.word	0x000d553d

000d5174 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   d5174:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   d5176:	4c0a      	ldr	r4, [pc, #40]	; (d51a0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   d5178:	6823      	ldr	r3, [r4, #0]
   d517a:	07db      	lsls	r3, r3, #31
   d517c:	d40e      	bmi.n	d519c <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d517e:	4620      	mov	r0, r4
   d5180:	f7fe ff91 	bl	d40a6 <__cxa_guard_acquire>
   d5184:	b150      	cbz	r0, d519c <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d5186:	4807      	ldr	r0, [pc, #28]	; (d51a4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d5188:	f7ff ffc4 	bl	d5114 <_ZN8particle14BleLocalDeviceC1Ev>
   d518c:	4620      	mov	r0, r4
   d518e:	f7fe ff8f 	bl	d40b0 <__cxa_guard_release>
   d5192:	4a05      	ldr	r2, [pc, #20]	; (d51a8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d5194:	4905      	ldr	r1, [pc, #20]	; (d51ac <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   d5196:	4803      	ldr	r0, [pc, #12]	; (d51a4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d5198:	f001 fc86 	bl	d6aa8 <__aeabi_atexit>
    return instance;
}
   d519c:	4801      	ldr	r0, [pc, #4]	; (d51a4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d519e:	bd10      	pop	{r4, pc}
   d51a0:	2003e3c0 	.word	0x2003e3c0
   d51a4:	2003e3bc 	.word	0x2003e3bc
   d51a8:	2003e364 	.word	0x2003e364
   d51ac:	000d5353 	.word	0x000d5353

000d51b0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
/*
 * WARN: This is executed from HAL ble thread. If the BLE wiring lock is acquired by a thread,
 * calling wiring APIs those acquiring the BLE wiring lock from the callback will suspend the
 * the execution of the callback, until the BLE wiring lock is released.
 */
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d51b0:	b570      	push	{r4, r5, r6, lr}
    auto impl = static_cast<BleCharacteristicImpl*>(context);
    // This callback won't modified any data in wiring.
    //WiringBleLock lk;
    switch (event->type) {
   d51b2:	6803      	ldr	r3, [r0, #0]
   d51b4:	3b09      	subs	r3, #9
   d51b6:	2b01      	cmp	r3, #1
/*
 * WARN: This is executed from HAL ble thread. If the BLE wiring lock is acquired by a thread,
 * calling wiring APIs those acquiring the BLE wiring lock from the callback will suspend the
 * the execution of the callback, until the BLE wiring lock is released.
 */
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d51b8:	b08a      	sub	sp, #40	; 0x28
   d51ba:	4604      	mov	r4, r0
   d51bc:	460e      	mov	r6, r1
    auto impl = static_cast<BleCharacteristicImpl*>(context);
    // This callback won't modified any data in wiring.
    //WiringBleLock lk;
    switch (event->type) {
   d51be:	d819      	bhi.n	d51f4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
        case BLE_EVT_DATA_NOTIFIED:
        case BLE_EVT_DATA_WRITTEN: {
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   d51c0:	f7ff ffd8 	bl	d5174 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d51c4:	88a1      	ldrh	r1, [r4, #4]
   d51c6:	6800      	ldr	r0, [r0, #0]
   d51c8:	f7ff ff72 	bl	d50b0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   d51cc:	4602      	mov	r2, r0
   d51ce:	b958      	cbnz	r0, d51e8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   d51d0:	2320      	movs	r3, #32
   d51d2:	9302      	str	r3, [sp, #8]
   d51d4:	4b08      	ldr	r3, [pc, #32]	; (d51f8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x48>)
   d51d6:	9003      	str	r0, [sp, #12]
   d51d8:	9300      	str	r3, [sp, #0]
   d51da:	aa02      	add	r2, sp, #8
   d51dc:	4603      	mov	r3, r0
   d51de:	4907      	ldr	r1, [pc, #28]	; (d51fc <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x4c>)
   d51e0:	2032      	movs	r0, #50	; 0x32
   d51e2:	f7ff fc7b 	bl	d4adc <log_message>
   d51e6:	e005      	b.n	d51f4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
                break;
            }
            if (impl->callback_) {
   d51e8:	6cf5      	ldr	r5, [r6, #76]	; 0x4c
   d51ea:	b11d      	cbz	r5, d51f4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
                impl->callback_(event->params.data_written.data, event->params.data_written.len, *peer, impl->context_);
   d51ec:	6d33      	ldr	r3, [r6, #80]	; 0x50
   d51ee:	68e1      	ldr	r1, [r4, #12]
   d51f0:	6920      	ldr	r0, [r4, #16]
   d51f2:	47a8      	blx	r5
        }
        default: {
            break;
        }
    }
}
   d51f4:	b00a      	add	sp, #40	; 0x28
   d51f6:	bd70      	pop	{r4, r5, r6, pc}
   d51f8:	000d7a26 	.word	0x000d7a26
   d51fc:	000d79dc 	.word	0x000d79dc

000d5200 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams* params) const {
    return hal_ble_gap_get_advertising_parameters(params, nullptr);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   d5200:	4608      	mov	r0, r1
   d5202:	b909      	cbnz	r1, d5208 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x8>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   d5204:	460a      	mov	r2, r1
   d5206:	e001      	b.n	d520c <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xc>
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   d5208:	6a09      	ldr	r1, [r1, #32]
   d520a:	2200      	movs	r2, #0
   d520c:	f7ff ba7e 	b.w	d470c <hal_ble_gap_set_advertising_data>

000d5210 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:
    }
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   d5210:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   d5212:	460c      	mov	r4, r1
   d5214:	b911      	cbnz	r1, d521c <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xc>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   d5216:	460a      	mov	r2, r1
   d5218:	4608      	mov	r0, r1
   d521a:	e006      	b.n	d522a <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x1a>
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   d521c:	2101      	movs	r1, #1
   d521e:	4620      	mov	r0, r4
   d5220:	f7ff ff0a 	bl	d5038 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d5224:	6a21      	ldr	r1, [r4, #32]
   d5226:	2200      	movs	r2, #0
   d5228:	4620      	mov	r0, r4
    }
}
   d522a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
    if (scanResponse == nullptr) {
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d522e:	f7ff ba75 	b.w	d471c <hal_ble_gap_set_scan_response_data>

000d5232 <_ZNK8particle14BleLocalDevice9advertiseEv>:
    size_t len = CHECK(hal_ble_gap_get_scan_response_data(scanResponse->data(), BLE_MAX_ADV_DATA_LEN, nullptr));
    scanResponse->resize(len);
    return len;
}

int BleLocalDevice::advertise() const {
   d5232:	b513      	push	{r0, r1, r4, lr}
    WiringBleLock lk;
   d5234:	a801      	add	r0, sp, #4
   d5236:	f7ff fd45 	bl	d4cc4 <_ZN8particle3ble13WiringBleLockC1Ev>
    return hal_ble_gap_start_advertising(nullptr);
   d523a:	2000      	movs	r0, #0
   d523c:	f7ff fa76 	bl	d472c <hal_ble_gap_start_advertising>
   d5240:	4604      	mov	r4, r0
    scanResponse->resize(len);
    return len;
}

int BleLocalDevice::advertise() const {
    WiringBleLock lk;
   d5242:	a801      	add	r0, sp, #4
   d5244:	f7ff fd4c 	bl	d4ce0 <_ZN8particle3ble13WiringBleLockD1Ev>
    return hal_ble_gap_start_advertising(nullptr);
}
   d5248:	4620      	mov	r0, r4
   d524a:	b002      	add	sp, #8
   d524c:	bd10      	pop	{r4, pc}

000d524e <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d524e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5250:	4605      	mov	r5, r0
   d5252:	460c      	mov	r4, r1
    WiringBleLock lk;
   d5254:	a801      	add	r0, sp, #4
int BleLocalDevice::advertise() const {
    WiringBleLock lk;
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d5256:	4616      	mov	r6, r2
    WiringBleLock lk;
   d5258:	f7ff fd34 	bl	d4cc4 <_ZN8particle3ble13WiringBleLockC1Ev>
    CHECK(setAdvertisingData(advertisingData));
   d525c:	4621      	mov	r1, r4
   d525e:	4628      	mov	r0, r5
   d5260:	f7ff ffce 	bl	d5200 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   d5264:	2800      	cmp	r0, #0
   d5266:	db08      	blt.n	d527a <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x2c>
    CHECK(setScanResponseData(scanResponse));
   d5268:	4631      	mov	r1, r6
   d526a:	4628      	mov	r0, r5
   d526c:	f7ff ffd0 	bl	d5210 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   d5270:	2800      	cmp	r0, #0
   d5272:	db02      	blt.n	d527a <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x2c>
    return advertise();
   d5274:	4628      	mov	r0, r5
   d5276:	f7ff ffdc 	bl	d5232 <_ZNK8particle14BleLocalDevice9advertiseEv>
   d527a:	4604      	mov	r4, r0
    WiringBleLock lk;
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
    WiringBleLock lk;
   d527c:	a801      	add	r0, sp, #4
   d527e:	f7ff fd2f 	bl	d4ce0 <_ZN8particle3ble13WiringBleLockD1Ev>
    CHECK(setAdvertisingData(advertisingData));
    CHECK(setScanResponseData(scanResponse));
    return advertise();
}
   d5282:	4620      	mov	r0, r4
   d5284:	b002      	add	sp, #8
   d5286:	bd70      	pop	{r4, r5, r6, pc}

000d5288 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d5288:	680b      	ldr	r3, [r1, #0]
   d528a:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d528c:	b113      	cbz	r3, d5294 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d528e:	685a      	ldr	r2, [r3, #4]
   d5290:	3201      	adds	r2, #1
   d5292:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d5294:	4770      	bx	lr

000d5296 <_ZN8particle17BleCharacteristicC1ERKS0_>:
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   d5296:	b510      	push	{r4, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5298:	f851 3b04 	ldr.w	r3, [r1], #4
   d529c:	4604      	mov	r4, r0
   d529e:	f840 3b04 	str.w	r3, [r0], #4
   d52a2:	f7ff fff1 	bl	d5288 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        : impl_(characteristic.impl_) {
    if (!impl()) {
   d52a6:	6823      	ldr	r3, [r4, #0]
   d52a8:	b90b      	cbnz	r3, d52ae <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   d52aa:	f7ff fcdb 	bl	d4c64 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.101>
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(copy), 0x%08X => 0x%08X -> 0x%08X, count: %d", &characteristic, this, impl(), impl_.use_count());
}
   d52ae:	4620      	mov	r0, r4
   d52b0:	bd10      	pop	{r4, pc}

000d52b2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   d52b2:	b510      	push	{r4, lr}
   d52b4:	f851 3b04 	ldr.w	r3, [r1], #4
   d52b8:	4604      	mov	r4, r0
   d52ba:	f840 3b04 	str.w	r3, [r0], #4
   d52be:	f7ff ffe3 	bl	d5288 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d52c2:	4620      	mov	r0, r4
   d52c4:	bd10      	pop	{r4, pc}

000d52c6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d52c6:	b510      	push	{r4, lr}
   d52c8:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   d52ca:	6800      	ldr	r0, [r0, #0]
   d52cc:	b128      	cbz	r0, d52da <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d52ce:	6843      	ldr	r3, [r0, #4]
   d52d0:	3b01      	subs	r3, #1
   d52d2:	6043      	str	r3, [r0, #4]
   d52d4:	b90b      	cbnz	r3, d52da <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d52d6:	f7ff fccf 	bl	d4c78 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.110>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d52da:	4620      	mov	r0, r4
   d52dc:	bd10      	pop	{r4, pc}

000d52de <_ZN8particle17BleCharacteristicD1Ev>:
    impl_ = characteristic.impl_;
    DEBUG("now:0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
    return *this;
}

BleCharacteristic::~BleCharacteristic() {
   d52de:	b510      	push	{r4, lr}
   d52e0:	4604      	mov	r4, r0
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d52e2:	3004      	adds	r0, #4
   d52e4:	f7ff ffef 	bl	d52c6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    DEBUG("~BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count() - 1);
}
   d52e8:	4620      	mov	r0, r4
   d52ea:	bd10      	pop	{r4, pc}

000d52ec <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d52ec:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d52ee:	6804      	ldr	r4, [r0, #0]
   d52f0:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d52f2:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d52f4:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d52f8:	42a6      	cmp	r6, r4
   d52fa:	d004      	beq.n	d5306 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   d52fc:	1d20      	adds	r0, r4, #4
   d52fe:	f7ff ffe2 	bl	d52c6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5302:	3408      	adds	r4, #8
   d5304:	e7f8      	b.n	d52f8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5306:	6828      	ldr	r0, [r5, #0]
   d5308:	f7ff fc74 	bl	d4bf4 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d530c:	4628      	mov	r0, r5
   d530e:	bd70      	pop	{r4, r5, r6, pc}

000d5310 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5310:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d5312:	6804      	ldr	r4, [r0, #0]
   d5314:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5316:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d5318:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d531c:	42a6      	cmp	r6, r4
   d531e:	d004      	beq.n	d532a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   d5320:	1d20      	adds	r0, r4, #4
   d5322:	f7ff ffd0 	bl	d52c6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5326:	3408      	adds	r4, #8
   d5328:	e7f8      	b.n	d531c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d532a:	6828      	ldr	r0, [r5, #0]
   d532c:	f7ff fc62 	bl	d4bf4 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d5330:	4628      	mov	r0, r5
   d5332:	bd70      	pop	{r4, r5, r6, pc}

000d5334 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d5334:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d5336:	6904      	ldr	r4, [r0, #16]
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
    }

    ~BlePeerDeviceImpl() = default;
   d5338:	f104 0018 	add.w	r0, r4, #24
   d533c:	f7ff ffe8 	bl	d5310 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d5340:	f104 000c 	add.w	r0, r4, #12
   d5344:	f7ff ffd2 	bl	d52ec <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
   d5348:	4620      	mov	r0, r4
   d534a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d534e:	f7fe bea6 	b.w	d409e <_ZdlPv>

000d5352 <_ZN8particle14BleLocalDeviceD1Ev>:
        return impl_.get();
    }

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   d5352:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5354:	6804      	ldr	r4, [r0, #0]
   d5356:	4607      	mov	r7, r0
   d5358:	b1c4      	cbz	r4, d538c <_ZN8particle14BleLocalDeviceD1Ev+0x3a>
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
   d535a:	69a5      	ldr	r5, [r4, #24]
   d535c:	69e3      	ldr	r3, [r4, #28]
   d535e:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5362:	42ae      	cmp	r6, r5
   d5364:	d004      	beq.n	d5370 <_ZN8particle14BleLocalDeviceD1Ev+0x1e>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5366:	1d28      	adds	r0, r5, #4
   d5368:	f7ff ffad 	bl	d52c6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d536c:	3508      	adds	r5, #8
   d536e:	e7f8      	b.n	d5362 <_ZN8particle14BleLocalDeviceD1Ev+0x10>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5370:	69a0      	ldr	r0, [r4, #24]
   d5372:	f7ff fc3f 	bl	d4bf4 <free>
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
    }

    ~BleLocalDeviceImpl() = default;
   d5376:	f104 000c 	add.w	r0, r4, #12
   d537a:	f7ff ffc9 	bl	d5310 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d537e:	4620      	mov	r0, r4
   d5380:	f7ff ffb4 	bl	d52ec <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5384:	2134      	movs	r1, #52	; 0x34
   d5386:	4620      	mov	r0, r4
   d5388:	f001 fb93 	bl	d6ab2 <_ZdlPvj>
   d538c:	4638      	mov	r0, r7
   d538e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5390 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d5390:	b573      	push	{r0, r1, r4, r5, r6, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d5392:	2500      	movs	r5, #0
   d5394:	6005      	str	r5, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d5396:	6045      	str	r5, [r0, #4]
   d5398:	4606      	mov	r6, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d539a:	2024      	movs	r0, #36	; 0x24
   d539c:	f7fe fe7d 	bl	d409a <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d53a0:	4604      	mov	r4, r0
   d53a2:	b178      	cbz	r0, d53c4 <_ZN8particle13BlePeerDeviceC1Ev+0x34>
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d53a4:	4603      	mov	r3, r0
   d53a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d53aa:	f823 2b02 	strh.w	r2, [r3], #2

/*******************************************************
 * BleAddress class
 */
BleAddress::BleAddress()
        : address_{} {
   d53ae:	f8c0 5002 	str.w	r5, [r0, #2]
   d53b2:	605d      	str	r5, [r3, #4]
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d53b4:	7285      	strb	r5, [r0, #10]
   d53b6:	72c5      	strb	r5, [r0, #11]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d53b8:	60c5      	str	r5, [r0, #12]
   d53ba:	6105      	str	r5, [r0, #16]
   d53bc:	6145      	str	r5, [r0, #20]
   d53be:	6185      	str	r5, [r0, #24]
   d53c0:	61c5      	str	r5, [r0, #28]
   d53c2:	6205      	str	r5, [r0, #32]
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d53c4:	2300      	movs	r3, #0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d53c6:	2014      	movs	r0, #20
   d53c8:	9301      	str	r3, [sp, #4]
   d53ca:	f7fe fe66 	bl	d409a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d53ce:	4603      	mov	r3, r0
   d53d0:	b128      	cbz	r0, d53de <_ZN8particle13BlePeerDeviceC1Ev+0x4e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d53d2:	2201      	movs	r2, #1
   d53d4:	6042      	str	r2, [r0, #4]
   d53d6:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d53d8:	4a08      	ldr	r2, [pc, #32]	; (d53fc <_ZN8particle13BlePeerDeviceC1Ev+0x6c>)
   d53da:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d53dc:	6104      	str	r4, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d53de:	a802      	add	r0, sp, #8
   d53e0:	6872      	ldr	r2, [r6, #4]
   d53e2:	f840 2d04 	str.w	r2, [r0, #-4]!
	_M_pi = __tmp;
   d53e6:	6073      	str	r3, [r6, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d53e8:	6034      	str	r4, [r6, #0]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d53ea:	f7ff ff6c 	bl	d52c6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
   d53ee:	6833      	ldr	r3, [r6, #0]
   d53f0:	b90b      	cbnz	r3, d53f6 <_ZN8particle13BlePeerDeviceC1Ev+0x66>
   d53f2:	f7ff fc37 	bl	d4c64 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.101>
        SPARK_ASSERT(false);
    }
}
   d53f6:	4630      	mov	r0, r6
   d53f8:	b002      	add	sp, #8
   d53fa:	bd70      	pop	{r4, r5, r6, pc}
   d53fc:	000d79b8 	.word	0x000d79b8

000d5400 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d5400:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d5402:	b570      	push	{r4, r5, r6, lr}
   d5404:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d5406:	d91a      	bls.n	d543e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x3e>
   d5408:	4290      	cmp	r0, r2
   d540a:	d219      	bcs.n	d5440 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x40>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
   d540c:	f1a1 0608 	sub.w	r6, r1, #8
   d5410:	1a51      	subs	r1, r2, r1
   d5412:	3904      	subs	r1, #4
   d5414:	1f15      	subs	r5, r2, #4
   d5416:	1844      	adds	r4, r0, r1
            for (; end != p; --end, --dest) {
   d5418:	1f2b      	subs	r3, r5, #4
   d541a:	429e      	cmp	r6, r3
   d541c:	d025      	beq.n	d546a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*end));
   d541e:	2c04      	cmp	r4, #4
   d5420:	d007      	beq.n	d5432 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x32>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5422:	f855 3c04 	ldr.w	r3, [r5, #-4]
   d5426:	f844 3c04 	str.w	r3, [r4, #-4]
   d542a:	4629      	mov	r1, r5
   d542c:	4620      	mov	r0, r4
   d542e:	f7ff ff2b 	bl	d5288 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5432:	4628      	mov	r0, r5
   d5434:	f7ff ff47 	bl	d52c6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5438:	3d08      	subs	r5, #8
   d543a:	3c08      	subs	r4, #8
   d543c:	e7ec      	b.n	d5418 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x18>
                end->~T();
            }
        } else if (dest != p) {
   d543e:	d014      	beq.n	d546a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
   d5440:	1d0c      	adds	r4, r1, #4
   d5442:	1d06      	adds	r6, r0, #4
            for (; p != end; ++p, ++dest) {
   d5444:	1f23      	subs	r3, r4, #4
   d5446:	429d      	cmp	r5, r3
   d5448:	d00f      	beq.n	d546a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*p));
   d544a:	2e04      	cmp	r6, #4
   d544c:	d007      	beq.n	d545e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x5e>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d544e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   d5452:	f846 3c04 	str.w	r3, [r6, #-4]
   d5456:	4621      	mov	r1, r4
   d5458:	4630      	mov	r0, r6
   d545a:	f7ff ff15 	bl	d5288 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d545e:	4620      	mov	r0, r4
   d5460:	f7ff ff31 	bl	d52c6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5464:	3408      	adds	r4, #8
   d5466:	3608      	adds	r6, #8
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d5468:	e7ec      	b.n	d5444 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x44>
   d546a:	bd70      	pop	{r4, r5, r6, pc}

000d546c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>:
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d546c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    T* const p = find(data_, data_ + size_, value);
   d5470:	6804      	ldr	r4, [r0, #0]
   d5472:	6843      	ldr	r3, [r0, #4]
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d5474:	4605      	mov	r5, r0
   d5476:	4688      	mov	r8, r1
    T* const p = find(data_, data_ + size_, value);
   d5478:	eb04 07c3 	add.w	r7, r4, r3, lsl #3
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d547c:	42a7      	cmp	r7, r4
   d547e:	d018      	beq.n	d54b2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x46>
            if (*p == value) {
   d5480:	4641      	mov	r1, r8
   d5482:	4620      	mov	r0, r4
   d5484:	f7ff fe2d 	bl	d50e2 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   d5488:	4606      	mov	r6, r0
   d548a:	b908      	cbnz	r0, d5490 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d548c:	3408      	adds	r4, #8
   d548e:	e7f5      	b.n	d547c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x10>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
   d5490:	b18c      	cbz	r4, d54b6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4a>
   d5492:	1d20      	adds	r0, r4, #4
   d5494:	f7ff ff17 	bl	d52c6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
   d5498:	682b      	ldr	r3, [r5, #0]
   d549a:	686a      	ldr	r2, [r5, #4]
   d549c:	f104 0108 	add.w	r1, r4, #8
   d54a0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d54a4:	4620      	mov	r0, r4
   d54a6:	f7ff ffab 	bl	d5400 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   d54aa:	686b      	ldr	r3, [r5, #4]
   d54ac:	3b01      	subs	r3, #1
   d54ae:	606b      	str	r3, [r5, #4]
    return true;
   d54b0:	e002      	b.n	d54b8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
   d54b2:	2600      	movs	r6, #0
   d54b4:	e000      	b.n	d54b8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>
   d54b6:	4626      	mov	r6, r4
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
    return true;
}
   d54b8:	4630      	mov	r0, r6
   d54ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d54be <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d54be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d54c0:	4604      	mov	r4, r0
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d54c2:	f851 3b04 	ldr.w	r3, [r1], #4
    return insert(size_, std::move(value));
   d54c6:	6847      	ldr	r7, [r0, #4]
   d54c8:	9300      	str	r3, [sp, #0]
   d54ca:	a801      	add	r0, sp, #4
   d54cc:	f7ff fedc 	bl	d5288 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d54d0:	6866      	ldr	r6, [r4, #4]
   d54d2:	68a3      	ldr	r3, [r4, #8]
   d54d4:	429e      	cmp	r6, r3
   d54d6:	db14      	blt.n	d5502 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x44>
   d54d8:	3601      	adds	r6, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d54da:	2e00      	cmp	r6, #0
   d54dc:	dd0b      	ble.n	d54f6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x38>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d54de:	00f0      	lsls	r0, r6, #3
   d54e0:	f7ff fb80 	bl	d4be4 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d54e4:	4605      	mov	r5, r0
   d54e6:	b318      	cbz	r0, d5530 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x72>
                return false;
            }
            move(d, data_, data_ + size_);
   d54e8:	e894 0006 	ldmia.w	r4, {r1, r2}
   d54ec:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d54f0:	f7ff ff86 	bl	d5400 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d54f4:	e000      	b.n	d54f8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d54f6:	2500      	movs	r5, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d54f8:	6820      	ldr	r0, [r4, #0]
   d54fa:	f7ff fb7b 	bl	d4bf4 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d54fe:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d5500:	60a6      	str	r6, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d5502:	6826      	ldr	r6, [r4, #0]
    move(p + 1, p, data_ + size_);
   d5504:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d5506:	eb06 05c7 	add.w	r5, r6, r7, lsl #3
    move(p + 1, p, data_ + size_);
   d550a:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
   d550e:	4629      	mov	r1, r5
   d5510:	f105 0008 	add.w	r0, r5, #8
   d5514:	f7ff ff74 	bl	d5400 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d5518:	b135      	cbz	r5, d5528 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6a>
   d551a:	9b00      	ldr	r3, [sp, #0]
   d551c:	f846 3037 	str.w	r3, [r6, r7, lsl #3]
   d5520:	a901      	add	r1, sp, #4
   d5522:	1d28      	adds	r0, r5, #4
   d5524:	f7ff feb0 	bl	d5288 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    ++size_;
   d5528:	6863      	ldr	r3, [r4, #4]
   d552a:	3301      	adds	r3, #1
   d552c:	6063      	str	r3, [r4, #4]
   d552e:	2501      	movs	r5, #1
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5530:	a801      	add	r0, sp, #4
   d5532:	f7ff fec8 	bl	d52c6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d5536:	4628      	mov	r0, r5
   d5538:	b003      	add	sp, #12
   d553a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d553c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d553c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5540:	4604      	mov	r4, r0
   d5542:	b08e      	sub	sp, #56	; 0x38
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d5544:	a803      	add	r0, sp, #12
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d5546:	460d      	mov	r5, r1
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d5548:	f7ff fbbc 	bl	d4cc4 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   d554c:	6823      	ldr	r3, [r4, #0]
   d554e:	2b03      	cmp	r3, #3
   d5550:	d002      	beq.n	d5558 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
   d5552:	2b04      	cmp	r3, #4
   d5554:	d042      	beq.n	d55dc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xa0>
   d5556:	e087      	b.n	d5668 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
   d5558:	a804      	add	r0, sp, #16
   d555a:	f7ff ff19 	bl	d5390 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   d555e:	9b04      	ldr	r3, [sp, #16]
   d5560:	8922      	ldrh	r2, [r4, #8]
   d5562:	801a      	strh	r2, [r3, #0]
    }
    return address_.addr[i];
}

BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
    address_ = addr;
   d5564:	6862      	ldr	r2, [r4, #4]
   d5566:	9904      	ldr	r1, [sp, #16]
   d5568:	f852 3f08 	ldr.w	r3, [r2, #8]!
   d556c:	f8c1 3002 	str.w	r3, [r1, #2]
   d5570:	6853      	ldr	r3, [r2, #4]
   d5572:	f8c1 3006 	str.w	r3, [r1, #6]
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5576:	a807      	add	r0, sp, #28
   d5578:	9b04      	ldr	r3, [sp, #16]
   d557a:	9306      	str	r3, [sp, #24]
   d557c:	a905      	add	r1, sp, #20
   d557e:	f7ff fe83 	bl	d5288 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d5582:	a906      	add	r1, sp, #24
   d5584:	f105 0018 	add.w	r0, r5, #24
   d5588:	f7ff ff99 	bl	d54be <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   d558c:	4604      	mov	r4, r0
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d558e:	a807      	add	r0, sp, #28
   d5590:	f7ff fe99 	bl	d52c6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5594:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   d5596:	9306      	str	r3, [sp, #24]
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d5598:	b974      	cbnz	r4, d55b8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x7c>
                    LOG(ERROR, "Failed to append peer Central device.");
   d559a:	4b36      	ldr	r3, [pc, #216]	; (d5674 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x138>)
   d559c:	9300      	str	r3, [sp, #0]
   d559e:	aa06      	add	r2, sp, #24
   d55a0:	4623      	mov	r3, r4
   d55a2:	4935      	ldr	r1, [pc, #212]	; (d5678 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d55a4:	9407      	str	r4, [sp, #28]
   d55a6:	2032      	movs	r0, #50	; 0x32
   d55a8:	f7ff fa98 	bl	d4adc <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   d55ac:	9b04      	ldr	r3, [sp, #16]
   d55ae:	4621      	mov	r1, r4
   d55b0:	8818      	ldrh	r0, [r3, #0]
   d55b2:	f7ff f8c3 	bl	d473c <hal_ble_gap_disconnect>
   d55b6:	e00d      	b.n	d55d4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    return;
                }
                LOG(TRACE, "Connected by Central device.");
   d55b8:	4a30      	ldr	r2, [pc, #192]	; (d567c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x140>)
   d55ba:	9200      	str	r2, [sp, #0]
   d55bc:	2300      	movs	r3, #0
   d55be:	aa06      	add	r2, sp, #24
   d55c0:	492d      	ldr	r1, [pc, #180]	; (d5678 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d55c2:	9307      	str	r3, [sp, #28]
   d55c4:	2001      	movs	r0, #1
   d55c6:	f7ff fa89 	bl	d4adc <log_message>
                if (impl->connectedCb_) {
   d55ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   d55cc:	b113      	cbz	r3, d55d4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    impl->connectedCb_(peer, impl->connectedContext_);
   d55ce:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   d55d0:	a804      	add	r0, sp, #16
   d55d2:	4798      	blx	r3
   d55d4:	a805      	add	r0, sp, #20
   d55d6:	f7ff fe76 	bl	d52c6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d55da:	e045      	b.n	d5668 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
                }
                break;
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d55dc:	8921      	ldrh	r1, [r4, #8]
   d55de:	4628      	mov	r0, r5
   d55e0:	f7ff fd66 	bl	d50b0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d55e4:	4607      	mov	r7, r0
   d55e6:	2800      	cmp	r0, #0
   d55e8:	d03e      	beq.n	d5668 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
   d55ea:	6804      	ldr	r4, [r0, #0]
   d55ec:	69a3      	ldr	r3, [r4, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d55ee:	69e1      	ldr	r1, [r4, #28]
    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
    }

    void onDisconnected() {
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   d55f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d55f4:	8022      	strh	r2, [r4, #0]
   d55f6:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
        for (auto& characteristic : characteristics_) {
   d55fa:	4299      	cmp	r1, r3
   d55fc:	d003      	beq.n	d5606 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xca>
   d55fe:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d5602:	8042      	strh	r2, [r0, #2]
   d5604:	e7f9      	b.n	d55fa <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xbe>
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d5606:	68e6      	ldr	r6, [r4, #12]
   d5608:	6923      	ldr	r3, [r4, #16]
   d560a:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d560e:	45b0      	cmp	r8, r6
   d5610:	d004      	beq.n	d561c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
   d5612:	1d30      	adds	r0, r6, #4
   d5614:	f7ff fe57 	bl	d52c6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5618:	3608      	adds	r6, #8
   d561a:	e7f8      	b.n	d560e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xd2>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d561c:	2300      	movs	r3, #0
   d561e:	6123      	str	r3, [r4, #16]
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d5620:	69a6      	ldr	r6, [r4, #24]
   d5622:	69e3      	ldr	r3, [r4, #28]
   d5624:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5628:	45b0      	cmp	r8, r6
   d562a:	d004      	beq.n	d5636 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xfa>
   d562c:	1d30      	adds	r0, r6, #4
   d562e:	f7ff fe4a 	bl	d52c6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5632:	3608      	adds	r6, #8
   d5634:	e7f8      	b.n	d5628 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d5636:	2300      	movs	r3, #0
   d5638:	61e3      	str	r3, [r4, #28]
        }
        services_.clear();
        characteristics_.clear();
        servicesDiscovered_ = false;
   d563a:	72a3      	strb	r3, [r4, #10]
        characteristicsDiscovered_ = false;
   d563c:	72e3      	strb	r3, [r4, #11]
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
                if (peer) {
                    peer->impl()->onDisconnected();
                    if (impl->disconnectedCb_) {
   d563e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   d5640:	b113      	cbz	r3, d5648 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10c>
                        impl->disconnectedCb_(*peer, impl->disconnectedContext_);
   d5642:	6b29      	ldr	r1, [r5, #48]	; 0x30
   d5644:	4638      	mov	r0, r7
   d5646:	4798      	blx	r3
                    }
                    LOG(TRACE, "Disconnected by remote device.");
   d5648:	2320      	movs	r3, #32
   d564a:	4a0d      	ldr	r2, [pc, #52]	; (d5680 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x144>)
   d564c:	9306      	str	r3, [sp, #24]
   d564e:	9200      	str	r2, [sp, #0]
   d5650:	2300      	movs	r3, #0
   d5652:	4909      	ldr	r1, [pc, #36]	; (d5678 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d5654:	9307      	str	r3, [sp, #28]
   d5656:	2001      	movs	r0, #1
   d5658:	aa06      	add	r2, sp, #24
   d565a:	f7ff fa3f 	bl	d4adc <log_message>
                    impl->peers_.removeOne(*peer);
   d565e:	4639      	mov	r1, r7
   d5660:	f105 0018 	add.w	r0, r5, #24
   d5664:	f7ff ff02 	bl	d546c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d5668:	a803      	add	r0, sp, #12
   d566a:	f7ff fb39 	bl	d4ce0 <_ZN8particle3ble13WiringBleLockD1Ev>
            }
            default: {
                break;
            }
        }
    }
   d566e:	b00e      	add	sp, #56	; 0x38
   d5670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5674:	000d7a3e 	.word	0x000d7a3e
   d5678:	000d79dc 	.word	0x000d79dc
   d567c:	000d7a64 	.word	0x000d7a64
   d5680:	000d7a81 	.word	0x000d7a81

000d5684 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d5684:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d5686:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5688:	4606      	mov	r6, r0
   d568a:	460c      	mov	r4, r1
   d568c:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d568e:	d914      	bls.n	d56ba <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d5690:	4290      	cmp	r0, r2
   d5692:	d213      	bcs.n	d56bc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d5694:	f1a2 0508 	sub.w	r5, r2, #8
            dest += end - p - 1;
   d5698:	1a6c      	subs	r4, r5, r1
   d569a:	f1a1 0708 	sub.w	r7, r1, #8
   d569e:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d56a0:	42af      	cmp	r7, r5
   d56a2:	d018      	beq.n	d56d6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d56a4:	b11c      	cbz	r4, d56ae <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept
      : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   d56a6:	4629      	mov	r1, r5
   d56a8:	4620      	mov	r0, r4
   d56aa:	f7ff fe02 	bl	d52b2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d56ae:	1d28      	adds	r0, r5, #4
   d56b0:	f7ff fe09 	bl	d52c6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d56b4:	3d08      	subs	r5, #8
   d56b6:	3c08      	subs	r4, #8
   d56b8:	e7f2      	b.n	d56a0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d56ba:	d00c      	beq.n	d56d6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d56bc:	42ac      	cmp	r4, r5
   d56be:	d00a      	beq.n	d56d6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d56c0:	b11e      	cbz	r6, d56ca <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d56c2:	4621      	mov	r1, r4
   d56c4:	4630      	mov	r0, r6
   d56c6:	f7ff fdf4 	bl	d52b2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d56ca:	1d20      	adds	r0, r4, #4
   d56cc:	f7ff fdfb 	bl	d52c6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d56d0:	3408      	adds	r4, #8
   d56d2:	3608      	adds	r6, #8
   d56d4:	e7f2      	b.n	d56bc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
   d56d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d56d8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d56d8:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d56da:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d56dc:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d56de:	dd0b      	ble.n	d56f8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d56e0:	00f0      	lsls	r0, r6, #3
   d56e2:	f7ff fa7f 	bl	d4be4 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d56e6:	4604      	mov	r4, r0
   d56e8:	b170      	cbz	r0, d5708 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d56ea:	e895 0006 	ldmia.w	r5, {r1, r2}
   d56ee:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d56f2:	f7ff ffc7 	bl	d5684 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d56f6:	e000      	b.n	d56fa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d56f8:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d56fa:	6828      	ldr	r0, [r5, #0]
   d56fc:	f7ff fa7a 	bl	d4bf4 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d5700:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d5702:	60ae      	str	r6, [r5, #8]
        return true;
   d5704:	2001      	movs	r0, #1
   d5706:	bd70      	pop	{r4, r5, r6, pc}
    }
   d5708:	bd70      	pop	{r4, r5, r6, pc}

000d570a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d570a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d570c:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d570e:	6845      	ldr	r5, [r0, #4]
   d5710:	4668      	mov	r0, sp
   d5712:	f7ff fdce 	bl	d52b2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5716:	6861      	ldr	r1, [r4, #4]
   d5718:	68a3      	ldr	r3, [r4, #8]
   d571a:	4299      	cmp	r1, r3
   d571c:	db05      	blt.n	d572a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x20>
   d571e:	3101      	adds	r1, #1
   d5720:	4620      	mov	r0, r4
   d5722:	f7ff ffd9 	bl	d56d8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d5726:	4606      	mov	r6, r0
   d5728:	b198      	cbz	r0, d5752 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x48>
        return false;
    }
    T* const p = data_ + i;
   d572a:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d572c:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d572e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d5732:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d5736:	4629      	mov	r1, r5
   d5738:	f105 0008 	add.w	r0, r5, #8
   d573c:	f7ff ffa2 	bl	d5684 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d5740:	b11d      	cbz	r5, d574a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x40>
   d5742:	4669      	mov	r1, sp
   d5744:	4628      	mov	r0, r5
   d5746:	f7ff fdb4 	bl	d52b2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   d574a:	6863      	ldr	r3, [r4, #4]
   d574c:	3301      	adds	r3, #1
   d574e:	6063      	str	r3, [r4, #4]
   d5750:	2601      	movs	r6, #1
   d5752:	a801      	add	r0, sp, #4
   d5754:	f7ff fdb7 	bl	d52c6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d5758:	4630      	mov	r0, r6
   d575a:	b002      	add	sp, #8
   d575c:	bd70      	pop	{r4, r5, r6, pc}

000d575e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d575e:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d5760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5762:	4606      	mov	r6, r0
   d5764:	460c      	mov	r4, r1
   d5766:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d5768:	d914      	bls.n	d5794 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d576a:	4290      	cmp	r0, r2
   d576c:	d213      	bcs.n	d5796 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d576e:	f1a2 0508 	sub.w	r5, r2, #8
            dest += end - p - 1;
   d5772:	1a6c      	subs	r4, r5, r1
   d5774:	f1a1 0708 	sub.w	r7, r1, #8
   d5778:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d577a:	42af      	cmp	r7, r5
   d577c:	d018      	beq.n	d57b0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d577e:	b11c      	cbz	r4, d5788 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   d5780:	4629      	mov	r1, r5
   d5782:	4620      	mov	r0, r4
   d5784:	f7ff fd87 	bl	d5296 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d5788:	1d28      	adds	r0, r5, #4
   d578a:	f7ff fd9c 	bl	d52c6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d578e:	3d08      	subs	r5, #8
   d5790:	3c08      	subs	r4, #8
   d5792:	e7f2      	b.n	d577a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d5794:	d00c      	beq.n	d57b0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d5796:	42ac      	cmp	r4, r5
   d5798:	d00a      	beq.n	d57b0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d579a:	b11e      	cbz	r6, d57a4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d579c:	4621      	mov	r1, r4
   d579e:	4630      	mov	r0, r6
   d57a0:	f7ff fd79 	bl	d5296 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d57a4:	1d20      	adds	r0, r4, #4
   d57a6:	f7ff fd8e 	bl	d52c6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d57aa:	3408      	adds	r4, #8
   d57ac:	3608      	adds	r6, #8
   d57ae:	e7f2      	b.n	d5796 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
   d57b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d57b2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d57b2:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d57b4:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d57b6:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d57b8:	dd0b      	ble.n	d57d2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d57ba:	00f0      	lsls	r0, r6, #3
   d57bc:	f7ff fa12 	bl	d4be4 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d57c0:	4604      	mov	r4, r0
   d57c2:	b170      	cbz	r0, d57e2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d57c4:	e895 0006 	ldmia.w	r5, {r1, r2}
   d57c8:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d57cc:	f7ff ffc7 	bl	d575e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d57d0:	e000      	b.n	d57d4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d57d2:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d57d4:	6828      	ldr	r0, [r5, #0]
   d57d6:	f7ff fa0d 	bl	d4bf4 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d57da:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d57dc:	60ae      	str	r6, [r5, #8]
        return true;
   d57de:	2001      	movs	r0, #1
   d57e0:	bd70      	pop	{r4, r5, r6, pc}
    }
   d57e2:	bd70      	pop	{r4, r5, r6, pc}

000d57e4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d57e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d57e6:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d57e8:	6845      	ldr	r5, [r0, #4]
   d57ea:	4668      	mov	r0, sp
   d57ec:	f7ff fd53 	bl	d5296 <_ZN8particle17BleCharacteristicC1ERKS0_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d57f0:	6861      	ldr	r1, [r4, #4]
   d57f2:	68a3      	ldr	r3, [r4, #8]
   d57f4:	4299      	cmp	r1, r3
   d57f6:	db05      	blt.n	d5804 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x20>
   d57f8:	3101      	adds	r1, #1
   d57fa:	4620      	mov	r0, r4
   d57fc:	f7ff ffd9 	bl	d57b2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d5800:	4606      	mov	r6, r0
   d5802:	b198      	cbz	r0, d582c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x48>
        return false;
    }
    T* const p = data_ + i;
   d5804:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d5806:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d5808:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d580c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d5810:	4629      	mov	r1, r5
   d5812:	f105 0008 	add.w	r0, r5, #8
   d5816:	f7ff ffa2 	bl	d575e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d581a:	b11d      	cbz	r5, d5824 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x40>
   d581c:	4669      	mov	r1, sp
   d581e:	4628      	mov	r0, r5
   d5820:	f7ff fd39 	bl	d5296 <_ZN8particle17BleCharacteristicC1ERKS0_>
    ++size_;
   d5824:	6863      	ldr	r3, [r4, #4]
   d5826:	3301      	adds	r3, #1
   d5828:	6063      	str	r3, [r4, #4]
   d582a:	2601      	movs	r6, #1
   d582c:	a801      	add	r0, sp, #4
   d582e:	f7ff fd4a 	bl	d52c6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d5832:	4630      	mov	r0, r6
   d5834:	b002      	add	sp, #8
   d5836:	bd70      	pop	{r4, r5, r6, pc}

000d5838 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
   d5838:	b510      	push	{r4, lr}
   d583a:	4604      	mov	r4, r0
      {
	if (_M_ptr != nullptr)
   d583c:	6840      	ldr	r0, [r0, #4]
   d583e:	b108      	cbz	r0, d5844 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d5840:	f7fe fc2d 	bl	d409e <_ZdlPv>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
      }
   d5844:	4620      	mov	r0, r4
   d5846:	bd10      	pop	{r4, pc}

000d5848 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d5848:	b507      	push	{r0, r1, r2, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d584a:	6903      	ldr	r3, [r0, #16]
      template<typename _Alloc>
        struct _Deleter
        {
          void operator()(typename _Alloc::value_type* __ptr)
          {
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
   d584c:	300c      	adds	r0, #12
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(&__a), _M_ptr(__ptr)
   d584e:	e88d 0009 	stmia.w	sp, {r0, r3}
            : BleCharacteristicImpl(desc, properties, callback, context) {
        charUuid_ = charUuid;
        svcUuid_ = svcUuid;
    }

    ~BleCharacteristicImpl() = default;
   d5852:	f103 003c 	add.w	r0, r3, #60	; 0x3c
   d5856:	f000 fe66 	bl	d6526 <_ZN6StringD1Ev>
   d585a:	4668      	mov	r0, sp
   d585c:	f7ff ffec 	bl	d5838 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d5860:	b003      	add	sp, #12
   d5862:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5868 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d5868:	b538      	push	{r3, r4, r5, lr}
   d586a:	2300      	movs	r3, #0
   d586c:	4604      	mov	r4, r0
   d586e:	6003      	str	r3, [r0, #0]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d5870:	2014      	movs	r0, #20
   d5872:	460d      	mov	r5, r1
   d5874:	f7fe fc11 	bl	d409a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d5878:	b128      	cbz	r0, d5886 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d587a:	2301      	movs	r3, #1
   d587c:	6043      	str	r3, [r0, #4]
   d587e:	6083      	str	r3, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d5880:	4b02      	ldr	r3, [pc, #8]	; (d588c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x24>)
   d5882:	6003      	str	r3, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d5884:	6105      	str	r5, [r0, #16]
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
	      _M_pi = __mem;
   d5886:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      __d(__p); // Call _Deleter on __p.
	      __throw_exception_again;
	    }
	}
   d5888:	4620      	mov	r0, r4
   d588a:	bd38      	pop	{r3, r4, r5, pc}
   d588c:	000d7980 	.word	0x000d7980

000d5890 <_ZN8particle17BleCharacteristic9constructEPKcNS_25BleCharacteristicPropertyERNS_7BleUuidES5_PFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(...), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

void BleCharacteristic::construct(const char* desc, BleCharacteristicProperty properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   d5890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5894:	b088      	sub	sp, #32
   d5896:	4605      	mov	r5, r0
   d5898:	461e      	mov	r6, r3
   d589a:	2054      	movs	r0, #84	; 0x54
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d589c:	2300      	movs	r3, #0
   d589e:	460f      	mov	r7, r1
   d58a0:	4690      	mov	r8, r2
   d58a2:	9304      	str	r3, [sp, #16]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d58a4:	9305      	str	r3, [sp, #20]
   d58a6:	f7fe fbf8 	bl	d409a <_Znwj>
   d58aa:	f8cd d018 	str.w	sp, [sp, #24]
   d58ae:	4604      	mov	r4, r0
   d58b0:	9007      	str	r0, [sp, #28]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d58b2:	b1b0      	cbz	r0, d58e2 <_ZN8particle17BleCharacteristic9constructEPKcNS_25BleCharacteristicPropertyERNS_7BleUuidES5_PFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x52>
              callback_(nullptr),
              context_(nullptr) {
    }

    BleCharacteristicImpl(const char* desc, BleCharacteristicProperty properties, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl() {
   d58b4:	f7ff fbdc 	bl	d5070 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
        description_ = desc;
   d58b8:	4639      	mov	r1, r7
   d58ba:	f104 003c 	add.w	r0, r4, #60	; 0x3c
              context_(nullptr) {
    }

    BleCharacteristicImpl(const char* desc, BleCharacteristicProperty properties, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl() {
        properties_ = properties;
   d58be:	f884 8004 	strb.w	r8, [r4, #4]
        description_ = desc;
   d58c2:	f000 fe8a 	bl	d65da <_ZN6StringaSEPKc>
        callback_ = callback;
   d58c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d58c8:	64e3      	str	r3, [r4, #76]	; 0x4c
        context_ = context;
    }

    BleCharacteristicImpl(const char* desc, BleCharacteristicProperty properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl(desc, properties, callback, context) {
        charUuid_ = charUuid;
   d58ca:	4631      	mov	r1, r6
    BleCharacteristicImpl(const char* desc, BleCharacteristicProperty properties, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl() {
        properties_ = properties;
        description_ = desc;
        callback_ = callback;
        context_ = context;
   d58cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d58ce:	6523      	str	r3, [r4, #80]	; 0x50
    }

    BleCharacteristicImpl(const char* desc, BleCharacteristicProperty properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl(desc, properties, callback, context) {
        charUuid_ = charUuid;
   d58d0:	f104 0014 	add.w	r0, r4, #20
   d58d4:	f7ff fa8e 	bl	d4df4 <_ZN8particle7BleUuidaSERKS0_>
        svcUuid_ = svcUuid;
   d58d8:	990e      	ldr	r1, [sp, #56]	; 0x38
   d58da:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d58de:	f7ff fa89 	bl	d4df4 <_ZN8particle7BleUuidaSERKS0_>
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d58e2:	4621      	mov	r1, r4

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
	_M_ptr = nullptr;
   d58e4:	2600      	movs	r6, #0
   d58e6:	ab01      	add	r3, sp, #4
   d58e8:	aa02      	add	r2, sp, #8
   d58ea:	a803      	add	r0, sp, #12
   d58ec:	9607      	str	r6, [sp, #28]
   d58ee:	f7ff ffbb 	bl	d5868 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d58f2:	9b03      	ldr	r3, [sp, #12]
	__r._M_pi = _M_pi;
   d58f4:	9a05      	ldr	r2, [sp, #20]
   d58f6:	9203      	str	r2, [sp, #12]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d58f8:	a803      	add	r0, sp, #12
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d58fa:	9305      	str	r3, [sp, #20]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d58fc:	9404      	str	r4, [sp, #16]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d58fe:	f7ff fce2 	bl	d52c6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	: _M_ptr(), _M_refcount()
	{
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<typename std::remove_cv<_Tp>::type> __traits;
	  _Deleter<typename __traits::allocator_type> __del = { __a };
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
   d5902:	a806      	add	r0, sp, #24
   d5904:	f7ff ff98 	bl	d5838 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5908:	9b04      	ldr	r3, [sp, #16]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d590a:	6829      	ldr	r1, [r5, #0]
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d590c:	9a05      	ldr	r2, [sp, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   d590e:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d5910:	a808      	add	r0, sp, #32
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5912:	686b      	ldr	r3, [r5, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5914:	9106      	str	r1, [sp, #24]
	__r._M_pi = _M_pi;
   d5916:	606a      	str	r2, [r5, #4]
	_M_pi = __tmp;
   d5918:	f840 3d04 	str.w	r3, [r0, #-4]!

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d591c:	9605      	str	r6, [sp, #20]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d591e:	9604      	str	r6, [sp, #16]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5920:	f7ff fcd1 	bl	d52c6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5924:	a805      	add	r0, sp, #20
   d5926:	f7ff fcce 	bl	d52c6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    DEBUG("BleCharacteristic(...), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

void BleCharacteristic::construct(const char* desc, BleCharacteristicProperty properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
    impl_ = std::make_shared<BleCharacteristicImpl>(desc, properties, charUuid, svcUuid, callback, context);
    if (!impl()) {
   d592a:	6829      	ldr	r1, [r5, #0]
   d592c:	b919      	cbnz	r1, d5936 <_ZN8particle17BleCharacteristic9constructEPKcNS_25BleCharacteristicPropertyERNS_7BleUuidES5_PFvPKhjRKNS_13BlePeerDeviceEPvESB_+0xa6>
        SPARK_ASSERT(false);
   d592e:	4a03      	ldr	r2, [pc, #12]	; (d593c <_ZN8particle17BleCharacteristic9constructEPKcNS_25BleCharacteristicPropertyERNS_7BleUuidES5_PFvPKhjRKNS_13BlePeerDeviceEPvESB_+0xac>)
   d5930:	200a      	movs	r0, #10
   d5932:	f7ff f8cb 	bl	d4acc <panic_>
    }
    DEBUG("BleCharacteristic(), construct(...):0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}
   d5936:	b008      	add	sp, #32
   d5938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d593c:	000d480d 	.word	0x000d480d

000d5940 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
   d5940:	b510      	push	{r4, lr}
   d5942:	4604      	mov	r4, r0
      {
	if (_M_ptr != nullptr)
   d5944:	6840      	ldr	r0, [r0, #4]
   d5946:	b108      	cbz	r0, d594c <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d5948:	f7fe fba9 	bl	d409e <_ZdlPv>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
      }
   d594c:	4620      	mov	r0, r4
   d594e:	bd10      	pop	{r4, pc}

000d5950 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d5950:	b507      	push	{r0, r1, r2, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d5952:	6903      	ldr	r3, [r0, #16]
      template<typename _Alloc>
        struct _Deleter
        {
          void operator()(typename _Alloc::value_type* __ptr)
          {
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
   d5954:	300c      	adds	r0, #12
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(&__a), _M_ptr(__ptr)
   d5956:	e88d 0009 	stmia.w	sp, {r0, r3}
   d595a:	4668      	mov	r0, sp
   d595c:	f7ff fff0 	bl	d5940 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d5960:	b003      	add	sp, #12
   d5962:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5968 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d5968:	b538      	push	{r3, r4, r5, lr}
   d596a:	2300      	movs	r3, #0
   d596c:	4604      	mov	r4, r0
   d596e:	6003      	str	r3, [r0, #0]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d5970:	2014      	movs	r0, #20
   d5972:	460d      	mov	r5, r1
   d5974:	f7fe fb91 	bl	d409a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d5978:	b128      	cbz	r0, d5986 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d597a:	2301      	movs	r3, #1
   d597c:	6043      	str	r3, [r0, #4]
   d597e:	6083      	str	r3, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d5980:	4b02      	ldr	r3, [pc, #8]	; (d598c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x24>)
   d5982:	6003      	str	r3, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d5984:	6105      	str	r5, [r0, #16]
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
	      _M_pi = __mem;
   d5986:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      __d(__p); // Call _Deleter on __p.
	      __throw_exception_again;
	    }
	}
   d5988:	4620      	mov	r0, r4
   d598a:	bd38      	pop	{r3, r4, r5, pc}
   d598c:	000d799c 	.word	0x000d799c

000d5990 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   d5990:	b5f0      	push	{r4, r5, r6, r7, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d5992:	2600      	movs	r6, #0
   d5994:	b087      	sub	sp, #28
   d5996:	6006      	str	r6, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d5998:	6046      	str	r6, [r0, #4]
   d599a:	4604      	mov	r4, r0
   d599c:	2018      	movs	r0, #24
   d599e:	460f      	mov	r7, r1
   d59a0:	f7fe fb7b 	bl	d409a <_Znwj>
   d59a4:	f8cd d010 	str.w	sp, [sp, #16]
   d59a8:	4605      	mov	r5, r0
   d59aa:	9005      	str	r0, [sp, #20]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d59ac:	b138      	cbz	r0, d59be <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x2e>
class BleServiceImpl {
public:
    BleServiceImpl()
            : uuid_(),
              startHandle_(BLE_INVALID_ATTR_HANDLE),
              endHandle_(BLE_INVALID_ATTR_HANDLE) {
   d59ae:	f7ff f9b1 	bl	d4d14 <_ZN8particle7BleUuidC1Ev>
    }

    BleServiceImpl(const BleUuid& svcUuid)
            : BleServiceImpl() {
        uuid_ = svcUuid;
   d59b2:	4639      	mov	r1, r7
   d59b4:	4628      	mov	r0, r5
class BleServiceImpl {
public:
    BleServiceImpl()
            : uuid_(),
              startHandle_(BLE_INVALID_ATTR_HANDLE),
              endHandle_(BLE_INVALID_ATTR_HANDLE) {
   d59b6:	82ae      	strh	r6, [r5, #20]
   d59b8:	82ee      	strh	r6, [r5, #22]
    }

    BleServiceImpl(const BleUuid& svcUuid)
            : BleServiceImpl() {
        uuid_ = svcUuid;
   d59ba:	f7ff fa1b 	bl	d4df4 <_ZN8particle7BleUuidaSERKS0_>

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
	_M_ptr = nullptr;
   d59be:	2300      	movs	r3, #0
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d59c0:	4629      	mov	r1, r5
   d59c2:	9305      	str	r3, [sp, #20]
   d59c4:	aa02      	add	r2, sp, #8
   d59c6:	ab01      	add	r3, sp, #4
   d59c8:	a803      	add	r0, sp, #12
   d59ca:	f7ff ffcd 	bl	d5968 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d59ce:	9b03      	ldr	r3, [sp, #12]
	__r._M_pi = _M_pi;
   d59d0:	6862      	ldr	r2, [r4, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d59d2:	6025      	str	r5, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d59d4:	6063      	str	r3, [r4, #4]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d59d6:	a803      	add	r0, sp, #12

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d59d8:	9203      	str	r2, [sp, #12]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d59da:	f7ff fc74 	bl	d52c6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	: _M_ptr(), _M_refcount()
	{
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<typename std::remove_cv<_Tp>::type> __traits;
	  _Deleter<typename __traits::allocator_type> __del = { __a };
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
   d59de:	a804      	add	r0, sp, #16
   d59e0:	f7ff ffae 	bl	d5940 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>
    }
}

BleService::BleService(const BleUuid& uuid)
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
   d59e4:	6823      	ldr	r3, [r4, #0]
   d59e6:	b90b      	cbnz	r3, d59ec <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x5c>
   d59e8:	f7ff f93c 	bl	d4c64 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.101>
        SPARK_ASSERT(false);
    }
}
   d59ec:	4620      	mov	r0, r4
   d59ee:	b007      	add	sp, #28
   d59f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d59f4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        p.disconnect();
    }
    return SYSTEM_ERROR_NONE;
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   d59f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d59f8:	4617      	mov	r7, r2
   d59fa:	b09f      	sub	sp, #124	; 0x7c
   d59fc:	4680      	mov	r8, r0
    WiringBleLock lk;
   d59fe:	a805      	add	r0, sp, #20
        p.disconnect();
    }
    return SYSTEM_ERROR_NONE;
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   d5a00:	460e      	mov	r6, r1
    WiringBleLock lk;
   d5a02:	f7ff f95f 	bl	d4cc4 <_ZN8particle3ble13WiringBleLockC1Ev>
   d5a06:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   d5a08:	7923      	ldrb	r3, [r4, #4]
   d5a0a:	2b00      	cmp	r3, #0
   d5a0c:	f000 80f3 	beq.w	d5bf6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x202>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5a10:	6833      	ldr	r3, [r6, #0]
   d5a12:	68dd      	ldr	r5, [r3, #12]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d5a14:	691b      	ldr	r3, [r3, #16]
   d5a16:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   d5a1a:	9303      	str	r3, [sp, #12]
    }

    BleCharacteristicImpl& operator=(const BleCharacteristicImpl& charImpl) = delete;

    bool operator==(const BleCharacteristicImpl& impl) {
        if (charUuid_ == impl.charUuid_ &&
   d5a1c:	f104 0a14 	add.w	sl, r4, #20
                svcUuid_ == impl.svcUuid_ &&
   d5a20:	f104 0b28 	add.w	fp, r4, #40	; 0x28
    WiringBleLock lk;
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
   d5a24:	9b03      	ldr	r3, [sp, #12]
   d5a26:	42ab      	cmp	r3, r5
   d5a28:	d023      	beq.n	d5a72 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
   d5a2a:	f8d5 9000 	ldr.w	r9, [r5]
    }

    BleCharacteristicImpl& operator=(const BleCharacteristicImpl& charImpl) = delete;

    bool operator==(const BleCharacteristicImpl& impl) {
        if (charUuid_ == impl.charUuid_ &&
   d5a2e:	4650      	mov	r0, sl
   d5a30:	f109 0114 	add.w	r1, r9, #20
   d5a34:	f7ff f9f7 	bl	d4e26 <_ZNK8particle7BleUuideqERKS0_>
                svcUuid_ == impl.svcUuid_ &&
                isLocal_ == impl.isLocal_ &&
   d5a38:	2800      	cmp	r0, #0
   d5a3a:	f000 80e1 	beq.w	d5c00 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>

    BleCharacteristicImpl& operator=(const BleCharacteristicImpl& charImpl) = delete;

    bool operator==(const BleCharacteristicImpl& impl) {
        if (charUuid_ == impl.charUuid_ &&
                svcUuid_ == impl.svcUuid_ &&
   d5a3e:	f109 0128 	add.w	r1, r9, #40	; 0x28
   d5a42:	4658      	mov	r0, fp
   d5a44:	f7ff f9ef 	bl	d4e26 <_ZNK8particle7BleUuideqERKS0_>
    }

    BleCharacteristicImpl& operator=(const BleCharacteristicImpl& charImpl) = delete;

    bool operator==(const BleCharacteristicImpl& impl) {
        if (charUuid_ == impl.charUuid_ &&
   d5a48:	2800      	cmp	r0, #0
   d5a4a:	f000 80d9 	beq.w	d5c00 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>
                svcUuid_ == impl.svcUuid_ &&
                isLocal_ == impl.isLocal_ &&
   d5a4e:	6823      	ldr	r3, [r4, #0]
   d5a50:	f423 417f 	bic.w	r1, r3, #65280	; 0xff00
   d5a54:	f8d9 3000 	ldr.w	r3, [r9]
   d5a58:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
   d5a5c:	4299      	cmp	r1, r3
   d5a5e:	f040 80cf 	bne.w	d5c00 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   d5a62:	2320      	movs	r3, #32
   d5a64:	4a6b      	ldr	r2, [pc, #428]	; (d5c14 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x220>)
   d5a66:	9313      	str	r3, [sp, #76]	; 0x4c
   d5a68:	2300      	movs	r3, #0
   d5a6a:	9200      	str	r2, [sp, #0]
   d5a6c:	9314      	str	r3, [sp, #80]	; 0x50
   d5a6e:	aa13      	add	r2, sp, #76	; 0x4c
   d5a70:	e0bd      	b.n	d5bee <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fa>
    BleUuid& charUUID() {
        return charUuid_;
    }

    BleUuid& svcUUID() {
        return svcUuid_;
   d5a72:	f104 0528 	add.w	r5, r4, #40	; 0x28
            return characteristic;
        }
    }
    // If the service that the characteristic belongs to is not specified,
    // put the characteristic to the default service.
    if (!charImpl->svcUUID().isValid()) {
   d5a76:	4628      	mov	r0, r5
   d5a78:	f7ff f9a3 	bl	d4dc2 <_ZNK8particle7BleUuid7isValidEv>
   d5a7c:	b918      	cbnz	r0, d5a86 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x92>
        LOG_DEBUG(TRACE, "Assign default service UUID.");
        charImpl->svcUUID() = PARTICLE_DEFAULT_BLE_SVC_UUID;
   d5a7e:	4966      	ldr	r1, [pc, #408]	; (d5c18 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x224>)
   d5a80:	4628      	mov	r0, r5
   d5a82:	f7ff f9c2 	bl	d4e0a <_ZN8particle7BleUuidaSEPKh>
   d5a86:	6833      	ldr	r3, [r6, #0]
   d5a88:	f8d3 9000 	ldr.w	r9, [r3]
   d5a8c:	685b      	ldr	r3, [r3, #4]
   d5a8e:	eb09 0ac3 	add.w	sl, r9, r3, lsl #3
    }
    BleService* service = nullptr;
    for (auto& svc : impl()->services()) {
   d5a92:	45d1      	cmp	r9, sl
            break;
        }
    }
    // Add service as needed.
    if (!service) {
        BleService svc(charImpl->svcUUID());
   d5a94:	4629      	mov	r1, r5
    if (!charImpl->svcUUID().isValid()) {
        LOG_DEBUG(TRACE, "Assign default service UUID.");
        charImpl->svcUUID() = PARTICLE_DEFAULT_BLE_SVC_UUID;
    }
    BleService* service = nullptr;
    for (auto& svc : impl()->services()) {
   d5a96:	d008      	beq.n	d5aaa <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb6>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   d5a98:	f8d9 0000 	ldr.w	r0, [r9]
   d5a9c:	f7ff f9c3 	bl	d4e26 <_ZNK8particle7BleUuideqERKS0_>
   d5aa0:	2800      	cmp	r0, #0
   d5aa2:	d137      	bne.n	d5b14 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x120>
    if (!charImpl->svcUUID().isValid()) {
        LOG_DEBUG(TRACE, "Assign default service UUID.");
        charImpl->svcUUID() = PARTICLE_DEFAULT_BLE_SVC_UUID;
    }
    BleService* service = nullptr;
    for (auto& svc : impl()->services()) {
   d5aa4:	f109 0908 	add.w	r9, r9, #8
   d5aa8:	e7f3      	b.n	d5a92 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x9e>
            break;
        }
    }
    // Add service as needed.
    if (!service) {
        BleService svc(charImpl->svcUUID());
   d5aaa:	a806      	add	r0, sp, #24
   d5aac:	f7ff ff70 	bl	d5990 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        return BleUuidType::LONG;
    }
}

hal_ble_uuid_t BleUuid::halUUID() {
    return uuid_;
   d5ab0:	aa13      	add	r2, sp, #76	; 0x4c
   d5ab2:	462b      	mov	r3, r5
   d5ab4:	f104 0c38 	add.w	ip, r4, #56	; 0x38
   d5ab8:	4696      	mov	lr, r2
   d5aba:	6818      	ldr	r0, [r3, #0]
   d5abc:	6859      	ldr	r1, [r3, #4]
   d5abe:	4615      	mov	r5, r2
   d5ac0:	c503      	stmia	r5!, {r0, r1}
   d5ac2:	3308      	adds	r3, #8
   d5ac4:	4563      	cmp	r3, ip
   d5ac6:	462a      	mov	r2, r5
   d5ac8:	d1f7      	bne.n	d5aba <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xc6>
   d5aca:	6818      	ldr	r0, [r3, #0]
   d5acc:	6028      	str	r0, [r5, #0]
    }
    // Add service as needed.
    if (!service) {
        BleService svc(charImpl->svcUUID());
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   d5ace:	9a06      	ldr	r2, [sp, #24]
   d5ad0:	2300      	movs	r3, #0
   d5ad2:	3214      	adds	r2, #20
   d5ad4:	4671      	mov	r1, lr
   d5ad6:	2001      	movs	r0, #1
   d5ad8:	f7fe fe3a 	bl	d4750 <hal_ble_gatt_server_add_service>
   d5adc:	2800      	cmp	r0, #0
   d5ade:	d17e      	bne.n	d5bde <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1ea>
    }

    ~BleLocalDeviceImpl() = default;

    Vector<BleService>& services() {
        return services_;
   d5ae0:	6835      	ldr	r5, [r6, #0]
   d5ae2:	a906      	add	r1, sp, #24
   d5ae4:	a80b      	add	r0, sp, #44	; 0x2c
   d5ae6:	f7ff fbe4 	bl	d52b2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        BleService svc(charImpl->svcUUID());
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
            return characteristic;
        }
        if(!impl()->services().append(svc)) {
   d5aea:	4628      	mov	r0, r5
   d5aec:	a90b      	add	r1, sp, #44	; 0x2c
   d5aee:	f7ff fe0c 	bl	d570a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   d5af2:	4605      	mov	r5, r0
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5af4:	a80c      	add	r0, sp, #48	; 0x30
   d5af6:	f7ff fbe6 	bl	d52c6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5afa:	2d00      	cmp	r5, #0
   d5afc:	d06f      	beq.n	d5bde <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1ea>
   d5afe:	6832      	ldr	r2, [r6, #0]
    return data_[0];
}

template<typename T, typename AllocatorT>
inline T& spark::Vector<T, AllocatorT>::last() {
    return data_[size_ - 1];
   d5b00:	6853      	ldr	r3, [r2, #4]
   d5b02:	6812      	ldr	r2, [r2, #0]
   d5b04:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   d5b08:	3b01      	subs	r3, #1
   d5b0a:	a807      	add	r0, sp, #28
   d5b0c:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   d5b10:	f7ff fbd9 	bl	d52c6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            context_ = charImpl.context_;
        }
    }

    void assignUuidIfNeeded() {
        if (!charUuid_.isValid()) {
   d5b14:	f104 0514 	add.w	r5, r4, #20
   d5b18:	4628      	mov	r0, r5
   d5b1a:	f7ff f952 	bl	d4dc2 <_ZNK8particle7BleUuid7isValidEv>
   d5b1e:	b968      	cbnz	r0, d5b3c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x148>
            LOG_DEBUG(TRACE, "Assign default characteristic UUID.");
            defaultUuidCharCount_++;
   d5b20:	4b3e      	ldr	r3, [pc, #248]	; (d5c1c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x228>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d5b22:	493d      	ldr	r1, [pc, #244]	; (d5c18 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x224>)
    }

    void assignUuidIfNeeded() {
        if (!charUuid_.isValid()) {
            LOG_DEBUG(TRACE, "Assign default characteristic UUID.");
            defaultUuidCharCount_++;
   d5b24:	881a      	ldrh	r2, [r3, #0]
   d5b26:	3201      	adds	r2, #1
   d5b28:	b292      	uxth	r2, r2
   d5b2a:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d5b2c:	a813      	add	r0, sp, #76	; 0x4c
   d5b2e:	2301      	movs	r3, #1
   d5b30:	f7ff f933 	bl	d4d9a <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   d5b34:	a913      	add	r1, sp, #76	; 0x4c
   d5b36:	4628      	mov	r0, r5
   d5b38:	f7ff f95c 	bl	d4df4 <_ZN8particle7BleUuidaSERKS0_>
            return characteristic;
        }
        service = &impl()->services().last();
    }
    charImpl->assignUuidIfNeeded();
    hal_ble_char_init_t charInit = {};
   d5b3c:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
   d5b40:	4652      	mov	r2, sl
   d5b42:	2100      	movs	r1, #0
   d5b44:	a813      	add	r0, sp, #76	; 0x4c
   d5b46:	f001 fe42 	bl	d77ce <memset>
    charInit.version = BLE_API_VERSION;
   d5b4a:	2301      	movs	r3, #1
        return BleUuidType::LONG;
    }
}

hal_ble_uuid_t BleUuid::halUUID() {
    return uuid_;
   d5b4c:	aa06      	add	r2, sp, #24
        }
        service = &impl()->services().last();
    }
    charImpl->assignUuidIfNeeded();
    hal_ble_char_init_t charInit = {};
    charInit.version = BLE_API_VERSION;
   d5b4e:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
    charInit.size = sizeof(hal_ble_char_init_t);
   d5b52:	f8ad a04e 	strh.w	sl, [sp, #78]	; 0x4e
        return BleUuidType::LONG;
    }
}

hal_ble_uuid_t BleUuid::halUUID() {
    return uuid_;
   d5b56:	462b      	mov	r3, r5
   d5b58:	f104 0c24 	add.w	ip, r4, #36	; 0x24
   d5b5c:	4615      	mov	r5, r2
   d5b5e:	6818      	ldr	r0, [r3, #0]
   d5b60:	6859      	ldr	r1, [r3, #4]
   d5b62:	4696      	mov	lr, r2
   d5b64:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   d5b68:	3308      	adds	r3, #8
   d5b6a:	4563      	cmp	r3, ip
   d5b6c:	4672      	mov	r2, lr
   d5b6e:	d1f6      	bne.n	d5b5e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x16a>
   d5b70:	6818      	ldr	r0, [r3, #0]
   d5b72:	f8ce 0000 	str.w	r0, [lr]
    }
    charImpl->assignUuidIfNeeded();
    hal_ble_char_init_t charInit = {};
    charInit.version = BLE_API_VERSION;
    charInit.size = sizeof(hal_ble_char_init_t);
    charInit.uuid = charImpl->charUUID().halUUID();
   d5b76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5b78:	f10d 0e58 	add.w	lr, sp, #88	; 0x58
   d5b7c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   d5b80:	682b      	ldr	r3, [r5, #0]
   d5b82:	f8ce 3000 	str.w	r3, [lr]
    charInit.properties = static_cast<uint8_t>(charImpl->properties());
   d5b86:	7923      	ldrb	r3, [r4, #4]
   d5b88:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
    charInit.service_handle = service->impl()->startHandle();
   d5b8c:	f8d9 3000 	ldr.w	r3, [r9]
   d5b90:	8a9b      	ldrh	r3, [r3, #20]
   d5b92:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
    charInit.description = charImpl->description().c_str();
   d5b96:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d5b98:	9315      	str	r3, [sp, #84]	; 0x54
    charInit.callback = charImpl->onBleCharEvents;
    charInit.context = charImpl;
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d5b9a:	2200      	movs	r2, #0
    charInit.size = sizeof(hal_ble_char_init_t);
    charInit.uuid = charImpl->charUUID().halUUID();
    charInit.properties = static_cast<uint8_t>(charImpl->properties());
    charInit.service_handle = service->impl()->startHandle();
    charInit.description = charImpl->description().c_str();
    charInit.callback = charImpl->onBleCharEvents;
   d5b9c:	4b20      	ldr	r3, [pc, #128]	; (d5c20 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x22c>)
   d5b9e:	931c      	str	r3, [sp, #112]	; 0x70
    charInit.context = charImpl;
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d5ba0:	1da1      	adds	r1, r4, #6
   d5ba2:	a813      	add	r0, sp, #76	; 0x4c
    charInit.uuid = charImpl->charUUID().halUUID();
    charInit.properties = static_cast<uint8_t>(charImpl->properties());
    charInit.service_handle = service->impl()->startHandle();
    charInit.description = charImpl->description().c_str();
    charInit.callback = charImpl->onBleCharEvents;
    charInit.context = charImpl;
   d5ba4:	941d      	str	r4, [sp, #116]	; 0x74
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d5ba6:	f7fe fddd 	bl	d4764 <hal_ble_gatt_server_add_characteristic>
   d5baa:	bb20      	cbnz	r0, d5bf6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x202>
        return characteristic;
    }
    charImpl->local() = true;
   d5bac:	2301      	movs	r3, #1
   d5bae:	7023      	strb	r3, [r4, #0]
    Vector<BleService>& services() {
        return services_;
    }

    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
   d5bb0:	6834      	ldr	r4, [r6, #0]
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
        return characteristic;
    }
    charImpl->local() = true;
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
   d5bb2:	4639      	mov	r1, r7
    Vector<BleService>& services() {
        return services_;
    }

    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
   d5bb4:	340c      	adds	r4, #12
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
        return characteristic;
    }
    charImpl->local() = true;
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
   d5bb6:	a80b      	add	r0, sp, #44	; 0x2c
   d5bb8:	f7ff fb6d 	bl	d5296 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d5bbc:	4620      	mov	r0, r4
   d5bbe:	a90b      	add	r1, sp, #44	; 0x2c
   d5bc0:	f7ff fe10 	bl	d57e4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   d5bc4:	4604      	mov	r4, r0
   d5bc6:	a80c      	add	r0, sp, #48	; 0x30
   d5bc8:	f7ff fb7d 	bl	d52c6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5bcc:	b99c      	cbnz	r4, d5bf6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x202>
        LOG(ERROR, "Failed to append local characteristic.");
   d5bce:	2320      	movs	r3, #32
   d5bd0:	930b      	str	r3, [sp, #44]	; 0x2c
   d5bd2:	4b14      	ldr	r3, [pc, #80]	; (d5c24 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x230>)
   d5bd4:	9300      	str	r3, [sp, #0]
   d5bd6:	940c      	str	r4, [sp, #48]	; 0x30
   d5bd8:	4623      	mov	r3, r4
   d5bda:	aa0b      	add	r2, sp, #44	; 0x2c
   d5bdc:	e007      	b.n	d5bee <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fa>
    // Add service as needed.
    if (!service) {
        BleService svc(charImpl->svcUUID());
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
            return characteristic;
   d5bde:	4639      	mov	r1, r7
   d5be0:	4640      	mov	r0, r8
   d5be2:	f7ff fb58 	bl	d5296 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d5be6:	a807      	add	r0, sp, #28
   d5be8:	f7ff fb6d 	bl	d52c6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5bec:	e00a      	b.n	d5c04 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x210>
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   d5bee:	490e      	ldr	r1, [pc, #56]	; (d5c28 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x234>)
   d5bf0:	2032      	movs	r0, #50	; 0x32
   d5bf2:	f7fe ff73 	bl	d4adc <log_message>
            return characteristic;
   d5bf6:	4639      	mov	r1, r7
   d5bf8:	4640      	mov	r0, r8
   d5bfa:	f7ff fb4c 	bl	d5296 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d5bfe:	e001      	b.n	d5c04 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x210>
   d5c00:	3508      	adds	r5, #8
    WiringBleLock lk;
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
   d5c02:	e70f      	b.n	d5a24 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x30>
    }
    return SYSTEM_ERROR_NONE;
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
    WiringBleLock lk;
   d5c04:	a805      	add	r0, sp, #20
   d5c06:	f7ff f86b 	bl	d4ce0 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   d5c0a:	4640      	mov	r0, r8
   d5c0c:	b01f      	add	sp, #124	; 0x7c
   d5c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5c12:	bf00      	nop
   d5c14:	000d7b51 	.word	0x000d7b51
   d5c18:	000d79cc 	.word	0x000d79cc
   d5c1c:	2003e3c4 	.word	0x2003e3c4
   d5c20:	000d51b1 	.word	0x000d51b1
   d5c24:	000d7b2a 	.word	0x000d7b2a
   d5c28:	000d79dc 	.word	0x000d79dc

000d5c2c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5c2c:	4802      	ldr	r0, [pc, #8]	; (d5c38 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d5c2e:	2300      	movs	r3, #0
   d5c30:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d5c32:	f7fe bdcb 	b.w	d47cc <os_mutex_recursive_create>
   d5c36:	bf00      	nop
   d5c38:	2003e3c8 	.word	0x2003e3c8

000d5c3c <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5c3c:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d5c3e:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5c40:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d5c42:	b113      	cbz	r3, d5c4a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5c44:	2203      	movs	r2, #3
   d5c46:	4601      	mov	r1, r0
   d5c48:	4798      	blx	r3
    }
   d5c4a:	4620      	mov	r0, r4
   d5c4c:	bd10      	pop	{r4, pc}

000d5c4e <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5c4e:	2200      	movs	r2, #0
   d5c50:	4611      	mov	r1, r2
   d5c52:	6840      	ldr	r0, [r0, #4]
   d5c54:	f7fe bfae 	b.w	d4bb4 <network_listening>

000d5c58 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5c58:	2200      	movs	r2, #0
   d5c5a:	4611      	mov	r1, r2
   d5c5c:	6840      	ldr	r0, [r0, #4]
   d5c5e:	f7fe bfb9 	b.w	d4bd4 <network_get_listen_timeout>

000d5c62 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5c62:	2200      	movs	r2, #0
   d5c64:	6840      	ldr	r0, [r0, #4]
   d5c66:	f7fe bfad 	b.w	d4bc4 <network_set_listen_timeout>

000d5c6a <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5c6a:	2200      	movs	r2, #0
   d5c6c:	f081 0101 	eor.w	r1, r1, #1
   d5c70:	6840      	ldr	r0, [r0, #4]
   d5c72:	f7fe bf97 	b.w	d4ba4 <network_listen>

000d5c76 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5c76:	2300      	movs	r3, #0
   d5c78:	461a      	mov	r2, r3
   d5c7a:	4619      	mov	r1, r3
   d5c7c:	6840      	ldr	r0, [r0, #4]
   d5c7e:	f7fe bf89 	b.w	d4b94 <network_off>

000d5c82 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5c82:	2300      	movs	r3, #0
   d5c84:	461a      	mov	r2, r3
   d5c86:	4619      	mov	r1, r3
   d5c88:	6840      	ldr	r0, [r0, #4]
   d5c8a:	f7fe bf7b 	b.w	d4b84 <network_on>

000d5c8e <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5c8e:	2200      	movs	r2, #0
   d5c90:	4611      	mov	r1, r2
   d5c92:	6840      	ldr	r0, [r0, #4]
   d5c94:	f7fe bf6e 	b.w	d4b74 <network_ready>

000d5c98 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5c98:	2200      	movs	r2, #0
   d5c9a:	4611      	mov	r1, r2
   d5c9c:	6840      	ldr	r0, [r0, #4]
   d5c9e:	f7fe bf59 	b.w	d4b54 <network_connecting>

000d5ca2 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5ca2:	2200      	movs	r2, #0
   d5ca4:	2102      	movs	r1, #2
   d5ca6:	6840      	ldr	r0, [r0, #4]
   d5ca8:	f7fe bf5c 	b.w	d4b64 <network_disconnect>

000d5cac <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5cac:	2300      	movs	r3, #0
   d5cae:	461a      	mov	r2, r3
   d5cb0:	6840      	ldr	r0, [r0, #4]
   d5cb2:	f7fe bf47 	b.w	d4b44 <network_connect>
	...

000d5cb8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5cb8:	4b02      	ldr	r3, [pc, #8]	; (d5cc4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5cba:	2203      	movs	r2, #3
   d5cbc:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5cbe:	4a02      	ldr	r2, [pc, #8]	; (d5cc8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5cc0:	601a      	str	r2, [r3, #0]
   d5cc2:	4770      	bx	lr
   d5cc4:	2003e3cc 	.word	0x2003e3cc
   d5cc8:	000d7b84 	.word	0x000d7b84

000d5ccc <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d5ccc:	4770      	bx	lr

000d5cce <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d5cce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5cd0:	4606      	mov	r6, r0
   d5cd2:	4615      	mov	r5, r2
   d5cd4:	460c      	mov	r4, r1
   d5cd6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5cd8:	42bc      	cmp	r4, r7
   d5cda:	d006      	beq.n	d5cea <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5cdc:	6833      	ldr	r3, [r6, #0]
   d5cde:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5ce2:	689b      	ldr	r3, [r3, #8]
   d5ce4:	4630      	mov	r0, r6
   d5ce6:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5ce8:	e7f6      	b.n	d5cd8 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d5cea:	4628      	mov	r0, r5
   d5cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5cee <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d5cee:	2200      	movs	r2, #0
   d5cf0:	7c00      	ldrb	r0, [r0, #16]
   d5cf2:	f7fe bddb 	b.w	d48ac <HAL_I2C_Write_Data>

000d5cf6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d5cf6:	2100      	movs	r1, #0
   d5cf8:	7c00      	ldrb	r0, [r0, #16]
   d5cfa:	f7fe bddf 	b.w	d48bc <HAL_I2C_Available_Data>

000d5cfe <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d5cfe:	2100      	movs	r1, #0
   d5d00:	7c00      	ldrb	r0, [r0, #16]
   d5d02:	f7fe bde3 	b.w	d48cc <HAL_I2C_Read_Data>

000d5d06 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d5d06:	2100      	movs	r1, #0
   d5d08:	7c00      	ldrb	r0, [r0, #16]
   d5d0a:	f7fe bde7 	b.w	d48dc <HAL_I2C_Peek_Data>

000d5d0e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d5d0e:	2100      	movs	r1, #0
   d5d10:	7c00      	ldrb	r0, [r0, #16]
   d5d12:	f7fe bdeb 	b.w	d48ec <HAL_I2C_Flush_Data>

000d5d16 <_ZN7TwoWireD0Ev>:
   d5d16:	b510      	push	{r4, lr}
   d5d18:	2114      	movs	r1, #20
   d5d1a:	4604      	mov	r4, r0
   d5d1c:	f000 fec9 	bl	d6ab2 <_ZdlPvj>
   d5d20:	4620      	mov	r0, r4
   d5d22:	bd10      	pop	{r4, pc}

000d5d24 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d5d24:	b510      	push	{r4, lr}
   d5d26:	4604      	mov	r4, r0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5d28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5d2c:	4608      	mov	r0, r1
   d5d2e:	60a3      	str	r3, [r4, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5d30:	2100      	movs	r1, #0
   d5d32:	4b04      	ldr	r3, [pc, #16]	; (d5d44 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d5d34:	7420      	strb	r0, [r4, #16]
   d5d36:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d5d38:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d5d3a:	f7fe fde7 	bl	d490c <HAL_I2C_Init>

}
   d5d3e:	4620      	mov	r0, r4
   d5d40:	bd10      	pop	{r4, pc}
   d5d42:	bf00      	nop
   d5d44:	000d7bb8 	.word	0x000d7bb8

000d5d48 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d5d48:	2300      	movs	r3, #0
   d5d4a:	461a      	mov	r2, r3
   d5d4c:	4619      	mov	r1, r3
   d5d4e:	7c00      	ldrb	r0, [r0, #16]
   d5d50:	f7fe bd8c 	b.w	d486c <HAL_I2C_Begin>

000d5d54 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
   d5d54:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
   d5d56:	2400      	movs	r4, #0
   d5d58:	7c00      	ldrb	r0, [r0, #16]
   d5d5a:	9400      	str	r4, [sp, #0]
   d5d5c:	f7fe fd8e 	bl	d487c <HAL_I2C_Request_Data>
  return result;
}
   d5d60:	b2c0      	uxtb	r0, r0
   d5d62:	b002      	add	sp, #8
   d5d64:	bd10      	pop	{r4, pc}

000d5d66 <_ZN7TwoWire11requestFromEii>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
   d5d66:	2301      	movs	r3, #1
   d5d68:	b2d2      	uxtb	r2, r2
   d5d6a:	b2c9      	uxtb	r1, r1
   d5d6c:	f7ff bff2 	b.w	d5d54 <_ZN7TwoWire11requestFromEhhh>

000d5d70 <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d5d70:	2200      	movs	r2, #0
   d5d72:	7c00      	ldrb	r0, [r0, #16]
   d5d74:	f7fe bd8a 	b.w	d488c <HAL_I2C_Begin_Transmission>

000d5d78 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d5d78:	b2c9      	uxtb	r1, r1
   d5d7a:	f7ff bff9 	b.w	d5d70 <_ZN7TwoWire17beginTransmissionEh>

000d5d7e <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d5d7e:	2200      	movs	r2, #0
   d5d80:	7c00      	ldrb	r0, [r0, #16]
   d5d82:	f7fe bd8b 	b.w	d489c <HAL_I2C_End_Transmission>

000d5d86 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d5d86:	2101      	movs	r1, #1
   d5d88:	f7ff bff9 	b.w	d5d7e <_ZN7TwoWire15endTransmissionEh>

000d5d8c <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d5d8c:	2100      	movs	r1, #0
   d5d8e:	7c00      	ldrb	r0, [r0, #16]
   d5d90:	f7fe bdb4 	b.w	d48fc <HAL_I2C_Is_Enabled>

000d5d94 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5d94:	4770      	bx	lr

000d5d96 <_ZN9IPAddressD0Ev>:
   d5d96:	b510      	push	{r4, lr}
   d5d98:	2118      	movs	r1, #24
   d5d9a:	4604      	mov	r4, r0
   d5d9c:	f000 fe89 	bl	d6ab2 <_ZdlPvj>
   d5da0:	4620      	mov	r0, r4
   d5da2:	bd10      	pop	{r4, pc}

000d5da4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5da4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5da6:	7d03      	ldrb	r3, [r0, #20]
   d5da8:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5daa:	b08d      	sub	sp, #52	; 0x34
   d5dac:	460e      	mov	r6, r1
   d5dae:	f100 0704 	add.w	r7, r0, #4
   d5db2:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5db6:	d002      	beq.n	d5dbe <_ZNK9IPAddress7printToER5Print+0x1a>
   d5db8:	f100 0508 	add.w	r5, r0, #8
   d5dbc:	e018      	b.n	d5df0 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5dbe:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5dc0:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5dc2:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5dc6:	232f      	movs	r3, #47	; 0x2f
   d5dc8:	462a      	mov	r2, r5
   d5dca:	200a      	movs	r0, #10
   d5dcc:	f7fe fda6 	bl	d491c <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5dd0:	4628      	mov	r0, r5
   d5dd2:	f001 fd2d 	bl	d7830 <strlen>
   d5dd6:	6833      	ldr	r3, [r6, #0]
   d5dd8:	4602      	mov	r2, r0
   d5dda:	68db      	ldr	r3, [r3, #12]
   d5ddc:	4629      	mov	r1, r5
   d5dde:	4630      	mov	r0, r6
   d5de0:	4798      	blx	r3
   d5de2:	e00f      	b.n	d5e04 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d5de4:	b124      	cbz	r4, d5df0 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d5de6:	212e      	movs	r1, #46	; 0x2e
   d5de8:	4630      	mov	r0, r6
   d5dea:	f000 f9cd 	bl	d6188 <_ZN5Print5printEc>
   d5dee:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d5df0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5df4:	220a      	movs	r2, #10
   d5df6:	4630      	mov	r0, r6
   d5df8:	f000 fa0c 	bl	d6214 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5dfc:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5dfe:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5e00:	d1f0      	bne.n	d5de4 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5e02:	4620      	mov	r0, r4
    }
    return n;
}
   d5e04:	b00d      	add	sp, #52	; 0x34
   d5e06:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5e08 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d5e08:	b510      	push	{r4, lr}
   d5e0a:	4b05      	ldr	r3, [pc, #20]	; (d5e20 <_ZN9IPAddressC1Ev+0x18>)
   d5e0c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5e0e:	2211      	movs	r2, #17
   d5e10:	f840 3b04 	str.w	r3, [r0], #4
   d5e14:	2100      	movs	r1, #0
   d5e16:	f001 fcda 	bl	d77ce <memset>
{
    clear();
}
   d5e1a:	4620      	mov	r0, r4
   d5e1c:	bd10      	pop	{r4, pc}
   d5e1e:	bf00      	nop
   d5e20:	000d7be0 	.word	0x000d7be0

000d5e24 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d5e24:	4603      	mov	r3, r0
   d5e26:	4a07      	ldr	r2, [pc, #28]	; (d5e44 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5e28:	b510      	push	{r4, lr}
   d5e2a:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d5e2e:	f101 0210 	add.w	r2, r1, #16
   d5e32:	f851 4b04 	ldr.w	r4, [r1], #4
   d5e36:	f843 4b04 	str.w	r4, [r3], #4
   d5e3a:	4291      	cmp	r1, r2
   d5e3c:	d1f9      	bne.n	d5e32 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5e3e:	780a      	ldrb	r2, [r1, #0]
   d5e40:	701a      	strb	r2, [r3, #0]
}
   d5e42:	bd10      	pop	{r4, pc}
   d5e44:	000d7be0 	.word	0x000d7be0

000d5e48 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d5e48:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5e4a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5e4e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5e52:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5e56:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d5e5a:	2304      	movs	r3, #4
   d5e5c:	6041      	str	r1, [r0, #4]
   d5e5e:	7503      	strb	r3, [r0, #20]
   d5e60:	bd10      	pop	{r4, pc}

000d5e62 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d5e62:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5e64:	780d      	ldrb	r5, [r1, #0]
   d5e66:	788b      	ldrb	r3, [r1, #2]
   d5e68:	784a      	ldrb	r2, [r1, #1]
   d5e6a:	78c9      	ldrb	r1, [r1, #3]
   d5e6c:	9100      	str	r1, [sp, #0]
   d5e6e:	4629      	mov	r1, r5
   d5e70:	f7ff ffea 	bl	d5e48 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d5e74:	b003      	add	sp, #12
   d5e76:	bd30      	pop	{r4, r5, pc}

000d5e78 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5e78:	4b01      	ldr	r3, [pc, #4]	; (d5e80 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5e7a:	4a02      	ldr	r2, [pc, #8]	; (d5e84 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5e7c:	601a      	str	r2, [r3, #0]
   d5e7e:	4770      	bx	lr
   d5e80:	2003e3d4 	.word	0x2003e3d4
   d5e84:	000d7c5f 	.word	0x000d7c5f

000d5e88 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5e88:	2200      	movs	r2, #0
   d5e8a:	4611      	mov	r1, r2
   d5e8c:	6840      	ldr	r0, [r0, #4]
   d5e8e:	f7fe be91 	b.w	d4bb4 <network_listening>

000d5e92 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5e92:	2200      	movs	r2, #0
   d5e94:	4611      	mov	r1, r2
   d5e96:	6840      	ldr	r0, [r0, #4]
   d5e98:	f7fe be9c 	b.w	d4bd4 <network_get_listen_timeout>

000d5e9c <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5e9c:	2200      	movs	r2, #0
   d5e9e:	6840      	ldr	r0, [r0, #4]
   d5ea0:	f7fe be90 	b.w	d4bc4 <network_set_listen_timeout>

000d5ea4 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5ea4:	2200      	movs	r2, #0
   d5ea6:	f081 0101 	eor.w	r1, r1, #1
   d5eaa:	6840      	ldr	r0, [r0, #4]
   d5eac:	f7fe be7a 	b.w	d4ba4 <network_listen>

000d5eb0 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d5eb0:	2300      	movs	r3, #0
   d5eb2:	461a      	mov	r2, r3
   d5eb4:	2101      	movs	r1, #1
   d5eb6:	6840      	ldr	r0, [r0, #4]
   d5eb8:	f7fe be6c 	b.w	d4b94 <network_off>

000d5ebc <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5ebc:	2300      	movs	r3, #0
   d5ebe:	461a      	mov	r2, r3
   d5ec0:	4619      	mov	r1, r3
   d5ec2:	6840      	ldr	r0, [r0, #4]
   d5ec4:	f7fe be5e 	b.w	d4b84 <network_on>

000d5ec8 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5ec8:	2200      	movs	r2, #0
   d5eca:	4611      	mov	r1, r2
   d5ecc:	6840      	ldr	r0, [r0, #4]
   d5ece:	f7fe be51 	b.w	d4b74 <network_ready>

000d5ed2 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5ed2:	2200      	movs	r2, #0
   d5ed4:	4611      	mov	r1, r2
   d5ed6:	6840      	ldr	r0, [r0, #4]
   d5ed8:	f7fe be3c 	b.w	d4b54 <network_connecting>

000d5edc <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5edc:	2200      	movs	r2, #0
   d5ede:	2102      	movs	r1, #2
   d5ee0:	6840      	ldr	r0, [r0, #4]
   d5ee2:	f7fe be3f 	b.w	d4b64 <network_disconnect>

000d5ee6 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5ee6:	2300      	movs	r3, #0
   d5ee8:	461a      	mov	r2, r3
   d5eea:	6840      	ldr	r0, [r0, #4]
   d5eec:	f7fe be2a 	b.w	d4b44 <network_connect>

000d5ef0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d5ef0:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5ef2:	4605      	mov	r5, r0
   d5ef4:	b188      	cbz	r0, d5f1a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5ef6:	6804      	ldr	r4, [r0, #0]
   d5ef8:	b14c      	cbz	r4, d5f0e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d5efa:	68a3      	ldr	r3, [r4, #8]
   d5efc:	b11b      	cbz	r3, d5f06 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5efe:	2203      	movs	r2, #3
   d5f00:	4621      	mov	r1, r4
   d5f02:	4620      	mov	r0, r4
   d5f04:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5f06:	2110      	movs	r1, #16
   d5f08:	4620      	mov	r0, r4
   d5f0a:	f000 fdd2 	bl	d6ab2 <_ZdlPvj>
   d5f0e:	4628      	mov	r0, r5
   d5f10:	2114      	movs	r1, #20
      }
   d5f12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5f16:	f000 bdcc 	b.w	d6ab2 <_ZdlPvj>
   d5f1a:	bd38      	pop	{r3, r4, r5, pc}

000d5f1c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d5f1c:	b110      	cbz	r0, d5f24 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d5f1e:	6803      	ldr	r3, [r0, #0]
   d5f20:	685b      	ldr	r3, [r3, #4]
   d5f22:	4718      	bx	r3
   d5f24:	4770      	bx	lr

000d5f26 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d5f26:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5f28:	6803      	ldr	r3, [r0, #0]
   d5f2a:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d5f2c:	b1bb      	cbz	r3, d5f5e <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d5f2e:	6858      	ldr	r0, [r3, #4]
   d5f30:	f7fe fc2c 	bl	d478c <os_thread_is_current>
   d5f34:	b978      	cbnz	r0, d5f56 <_ZN6ThreadD1Ev+0x30>
   d5f36:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d5f38:	7c5a      	ldrb	r2, [r3, #17]
   d5f3a:	b912      	cbnz	r2, d5f42 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d5f3c:	6858      	ldr	r0, [r3, #4]
   d5f3e:	f7fe fc2d 	bl	d479c <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d5f42:	6823      	ldr	r3, [r4, #0]
   d5f44:	6858      	ldr	r0, [r3, #4]
   d5f46:	f7fe fc31 	bl	d47ac <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5f4a:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5f4c:	2300      	movs	r3, #0
   d5f4e:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5f50:	b128      	cbz	r0, d5f5e <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d5f52:	f7ff ffcd 	bl	d5ef0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5f56:	6820      	ldr	r0, [r4, #0]
   d5f58:	b108      	cbz	r0, d5f5e <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d5f5a:	f7ff ffc9 	bl	d5ef0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d5f5e:	4620      	mov	r0, r4
   d5f60:	bd10      	pop	{r4, pc}
	...

000d5f64 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d5f64:	b538      	push	{r3, r4, r5, lr}
   d5f66:	4b0c      	ldr	r3, [pc, #48]	; (d5f98 <_ZN5spark9MeshClassD1Ev+0x34>)
   d5f68:	6003      	str	r3, [r0, #0]
   d5f6a:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5f6c:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d5f70:	b108      	cbz	r0, d5f76 <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5f72:	f7fe f896 	bl	d40a2 <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5f76:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d5f7a:	b135      	cbz	r5, d5f8a <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5f7c:	4628      	mov	r0, r5
   d5f7e:	f7ff ffd2 	bl	d5f26 <_ZN6ThreadD1Ev>
   d5f82:	2104      	movs	r1, #4
   d5f84:	4628      	mov	r0, r5
   d5f86:	f000 fd94 	bl	d6ab2 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5f8a:	68a0      	ldr	r0, [r4, #8]
   d5f8c:	b108      	cbz	r0, d5f92 <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d5f8e:	f7ff ffc5 	bl	d5f1c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d5f92:	4620      	mov	r0, r4
   d5f94:	bd38      	pop	{r3, r4, r5, pc}
   d5f96:	bf00      	nop
   d5f98:	000d7cd0 	.word	0x000d7cd0

000d5f9c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5f9c:	b538      	push	{r3, r4, r5, lr}
   d5f9e:	4c0e      	ldr	r4, [pc, #56]	; (d5fd8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d5fa0:	4b0e      	ldr	r3, [pc, #56]	; (d5fdc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d5fa2:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5fa4:	2500      	movs	r5, #0
   d5fa6:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d5fa8:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5fac:	6063      	str	r3, [r4, #4]
   d5fae:	60a5      	str	r5, [r4, #8]
   d5fb0:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5fb4:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d5fb8:	f7fe fc08 	bl	d47cc <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d5fbc:	4b08      	ldr	r3, [pc, #32]	; (d5fe0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d5fbe:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5fc2:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d5fc6:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d5fc8:	4620      	mov	r0, r4
   d5fca:	4a06      	ldr	r2, [pc, #24]	; (d5fe4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d5fcc:	4906      	ldr	r1, [pc, #24]	; (d5fe8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d5fce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d5fd2:	f000 bd69 	b.w	d6aa8 <__aeabi_atexit>
   d5fd6:	bf00      	nop
   d5fd8:	2003e3d8 	.word	0x2003e3d8
   d5fdc:	000d7d04 	.word	0x000d7d04
   d5fe0:	000d7cd0 	.word	0x000d7cd0
   d5fe4:	2003e364 	.word	0x2003e364
   d5fe8:	000d5f65 	.word	0x000d5f65

000d5fec <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5fec:	2300      	movs	r3, #0
   d5fee:	461a      	mov	r2, r3
   d5ff0:	6840      	ldr	r0, [r0, #4]
   d5ff2:	f7fe bda7 	b.w	d4b44 <network_connect>

000d5ff6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5ff6:	2200      	movs	r2, #0
   d5ff8:	2102      	movs	r1, #2
   d5ffa:	6840      	ldr	r0, [r0, #4]
   d5ffc:	f7fe bdb2 	b.w	d4b64 <network_disconnect>

000d6000 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6000:	2200      	movs	r2, #0
   d6002:	4611      	mov	r1, r2
   d6004:	6840      	ldr	r0, [r0, #4]
   d6006:	f7fe bda5 	b.w	d4b54 <network_connecting>

000d600a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d600a:	2200      	movs	r2, #0
   d600c:	4611      	mov	r1, r2
   d600e:	6840      	ldr	r0, [r0, #4]
   d6010:	f7fe bdb0 	b.w	d4b74 <network_ready>

000d6014 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d6014:	2300      	movs	r3, #0
   d6016:	461a      	mov	r2, r3
   d6018:	4619      	mov	r1, r3
   d601a:	6840      	ldr	r0, [r0, #4]
   d601c:	f7fe bdb2 	b.w	d4b84 <network_on>

000d6020 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d6020:	2300      	movs	r3, #0
   d6022:	461a      	mov	r2, r3
   d6024:	4619      	mov	r1, r3
   d6026:	6840      	ldr	r0, [r0, #4]
   d6028:	f7fe bdb4 	b.w	d4b94 <network_off>

000d602c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d602c:	2200      	movs	r2, #0
   d602e:	f081 0101 	eor.w	r1, r1, #1
   d6032:	6840      	ldr	r0, [r0, #4]
   d6034:	f7fe bdb6 	b.w	d4ba4 <network_listen>

000d6038 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d6038:	2200      	movs	r2, #0
   d603a:	6840      	ldr	r0, [r0, #4]
   d603c:	f7fe bdc2 	b.w	d4bc4 <network_set_listen_timeout>

000d6040 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d6040:	2200      	movs	r2, #0
   d6042:	4611      	mov	r1, r2
   d6044:	6840      	ldr	r0, [r0, #4]
   d6046:	f7fe bdc5 	b.w	d4bd4 <network_get_listen_timeout>

000d604a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d604a:	2200      	movs	r2, #0
   d604c:	4611      	mov	r1, r2
   d604e:	6840      	ldr	r0, [r0, #4]
   d6050:	f7fe bdb0 	b.w	d4bb4 <network_listening>

000d6054 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d6054:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6058:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d605a:	b095      	sub	sp, #84	; 0x54
   d605c:	4616      	mov	r6, r2
   d605e:	460d      	mov	r5, r1
   d6060:	4607      	mov	r7, r0
    IPAddress addr;
   d6062:	f7ff fed1 	bl	d5e08 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d6066:	4621      	mov	r1, r4
   d6068:	2220      	movs	r2, #32
   d606a:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d606c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d606e:	f001 fbae 	bl	d77ce <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d6072:	2340      	movs	r3, #64	; 0x40
   d6074:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d6076:	4621      	mov	r1, r4
   d6078:	466b      	mov	r3, sp
   d607a:	aa0c      	add	r2, sp, #48	; 0x30
   d607c:	4630      	mov	r0, r6
   d607e:	f7fe fc5d 	bl	d493c <netdb_getaddrinfo>
    if (!r) {
   d6082:	4604      	mov	r4, r0
   d6084:	2800      	cmp	r0, #0
   d6086:	d144      	bne.n	d6112 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6088:	4602      	mov	r2, r0
   d608a:	2101      	movs	r1, #1
   d608c:	6868      	ldr	r0, [r5, #4]
   d608e:	f7fe fd71 	bl	d4b74 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6092:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6094:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6096:	4622      	mov	r2, r4
   d6098:	6868      	ldr	r0, [r5, #4]
   d609a:	f7fe fd6b 	bl	d4b74 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d609e:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d60a0:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d60a2:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d60a4:	2e00      	cmp	r6, #0
   d60a6:	d034      	beq.n	d6112 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d60a8:	2900      	cmp	r1, #0
   d60aa:	d132      	bne.n	d6112 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d60ac:	6873      	ldr	r3, [r6, #4]
   d60ae:	2b02      	cmp	r3, #2
   d60b0:	d002      	beq.n	d60b8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d60b2:	2b0a      	cmp	r3, #10
   d60b4:	d009      	beq.n	d60ca <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d60b6:	e02a      	b.n	d610e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d60b8:	f1b8 0f00 	cmp.w	r8, #0
   d60bc:	d027      	beq.n	d610e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d60be:	6971      	ldr	r1, [r6, #20]
   d60c0:	4638      	mov	r0, r7
   d60c2:	3104      	adds	r1, #4
   d60c4:	f7ff fecd 	bl	d5e62 <_ZN9IPAddressaSEPKh>
   d60c8:	e020      	b.n	d610c <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d60ca:	f1b9 0f00 	cmp.w	r9, #0
   d60ce:	d01e      	beq.n	d610e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d60d0:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d60d2:	2211      	movs	r2, #17
   d60d4:	a801      	add	r0, sp, #4
   d60d6:	f001 fb7a 	bl	d77ce <memset>
                    a.v = 6;
   d60da:	2306      	movs	r3, #6
   d60dc:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d60e0:	ad01      	add	r5, sp, #4
   d60e2:	f104 0308 	add.w	r3, r4, #8
   d60e6:	3418      	adds	r4, #24
   d60e8:	6818      	ldr	r0, [r3, #0]
   d60ea:	6859      	ldr	r1, [r3, #4]
   d60ec:	462a      	mov	r2, r5
   d60ee:	c203      	stmia	r2!, {r0, r1}
   d60f0:	3308      	adds	r3, #8
   d60f2:	42a3      	cmp	r3, r4
   d60f4:	4615      	mov	r5, r2
   d60f6:	d1f7      	bne.n	d60e8 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d60f8:	a901      	add	r1, sp, #4
   d60fa:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d60fc:	ad07      	add	r5, sp, #28
   d60fe:	f7ff fe91 	bl	d5e24 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6102:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6104:	1d3c      	adds	r4, r7, #4
   d6106:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6108:	682b      	ldr	r3, [r5, #0]
   d610a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d610c:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d610e:	69f6      	ldr	r6, [r6, #28]
   d6110:	e7c8      	b.n	d60a4 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d6112:	9800      	ldr	r0, [sp, #0]
   d6114:	f7fe fc0a 	bl	d492c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d6118:	4638      	mov	r0, r7
   d611a:	b015      	add	sp, #84	; 0x54
   d611c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d6120 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d6120:	4b02      	ldr	r3, [pc, #8]	; (d612c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d6122:	4a03      	ldr	r2, [pc, #12]	; (d6130 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6124:	601a      	str	r2, [r3, #0]
   d6126:	2200      	movs	r2, #0
   d6128:	605a      	str	r2, [r3, #4]
   d612a:	4770      	bx	lr
   d612c:	2003e5ac 	.word	0x2003e5ac
   d6130:	000d7d04 	.word	0x000d7d04

000d6134 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d6134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6136:	4606      	mov	r6, r0
   d6138:	460d      	mov	r5, r1
   d613a:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d613c:	2400      	movs	r4, #0
  while (size--) {
   d613e:	42bd      	cmp	r5, r7
   d6140:	d00c      	beq.n	d615c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d6142:	6833      	ldr	r3, [r6, #0]
   d6144:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6148:	689b      	ldr	r3, [r3, #8]
   d614a:	4630      	mov	r0, r6
   d614c:	4798      	blx	r3
     if (chunk>=0)
   d614e:	2800      	cmp	r0, #0
   d6150:	db01      	blt.n	d6156 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d6152:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d6154:	e7f3      	b.n	d613e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d6156:	2c00      	cmp	r4, #0
   d6158:	bf08      	it	eq
   d615a:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d615c:	4620      	mov	r0, r4
   d615e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6160 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d6160:	b570      	push	{r4, r5, r6, lr}
   d6162:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d6164:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d6166:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d6168:	b149      	cbz	r1, d617e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d616a:	f001 fb61 	bl	d7830 <strlen>
   d616e:	682b      	ldr	r3, [r5, #0]
   d6170:	4602      	mov	r2, r0
   d6172:	4621      	mov	r1, r4
   d6174:	4628      	mov	r0, r5
   d6176:	68db      	ldr	r3, [r3, #12]
    }
   d6178:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d617c:	4718      	bx	r3
    }
   d617e:	bd70      	pop	{r4, r5, r6, pc}

000d6180 <_ZN5Print5printEPKc>:
   d6180:	b508      	push	{r3, lr}
   d6182:	f7ff ffed 	bl	d6160 <_ZN5Print5writeEPKc>
   d6186:	bd08      	pop	{r3, pc}

000d6188 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d6188:	6803      	ldr	r3, [r0, #0]
   d618a:	689b      	ldr	r3, [r3, #8]
   d618c:	4718      	bx	r3

000d618e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d618e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d6190:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6192:	4605      	mov	r5, r0
  size_t n = print('\r');
   d6194:	f7ff fff8 	bl	d6188 <_ZN5Print5printEc>
  n += print('\n');
   d6198:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d619a:	4604      	mov	r4, r0
  n += print('\n');
   d619c:	4628      	mov	r0, r5
   d619e:	f7ff fff3 	bl	d6188 <_ZN5Print5printEc>
  return n;
}
   d61a2:	4420      	add	r0, r4
   d61a4:	bd38      	pop	{r3, r4, r5, pc}

000d61a6 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d61a6:	b538      	push	{r3, r4, r5, lr}
   d61a8:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d61aa:	f7ff ffd9 	bl	d6160 <_ZN5Print5writeEPKc>
   d61ae:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d61b0:	4628      	mov	r0, r5
   d61b2:	f7ff ffec 	bl	d618e <_ZN5Print7printlnEv>
  return n;
}
   d61b6:	4420      	add	r0, r4
   d61b8:	bd38      	pop	{r3, r4, r5, pc}

000d61ba <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d61ba:	b530      	push	{r4, r5, lr}
   d61bc:	b08b      	sub	sp, #44	; 0x2c
   d61be:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d61c0:	2100      	movs	r1, #0
   d61c2:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d61c6:	2a01      	cmp	r2, #1
   d61c8:	bf98      	it	ls
   d61ca:	220a      	movls	r2, #10
   d61cc:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d61d0:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d61d4:	fb05 3312 	mls	r3, r5, r2, r3
   d61d8:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d61dc:	2b09      	cmp	r3, #9
   d61de:	bf94      	ite	ls
   d61e0:	3330      	addls	r3, #48	; 0x30
   d61e2:	3337      	addhi	r3, #55	; 0x37
   d61e4:	b2db      	uxtb	r3, r3
   d61e6:	4621      	mov	r1, r4
   d61e8:	f804 3901 	strb.w	r3, [r4], #-1
   d61ec:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d61ee:	2d00      	cmp	r5, #0
   d61f0:	d1ee      	bne.n	d61d0 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d61f2:	f7ff ffb5 	bl	d6160 <_ZN5Print5writeEPKc>
}
   d61f6:	b00b      	add	sp, #44	; 0x2c
   d61f8:	bd30      	pop	{r4, r5, pc}

000d61fa <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d61fa:	b410      	push	{r4}
  if (base == 0) return write(n);
   d61fc:	b92a      	cbnz	r2, d620a <_ZN5Print5printEmi+0x10>
   d61fe:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d6200:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d6204:	689b      	ldr	r3, [r3, #8]
   d6206:	b2c9      	uxtb	r1, r1
   d6208:	4718      	bx	r3
  else return printNumber(n, base);
   d620a:	b2d2      	uxtb	r2, r2
}
   d620c:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d6210:	f7ff bfd3 	b.w	d61ba <_ZN5Print11printNumberEmh>

000d6214 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d6214:	f7ff bff1 	b.w	d61fa <_ZN5Print5printEmi>

000d6218 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
   d6218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d621c:	4607      	mov	r7, r0
   d621e:	460e      	mov	r6, r1
  if (base == 0) {
   d6220:	4615      	mov	r5, r2
   d6222:	b92a      	cbnz	r2, d6230 <_ZN5Print5printEli+0x18>
    return write(n);
   d6224:	6803      	ldr	r3, [r0, #0]
   d6226:	b2c9      	uxtb	r1, r1
   d6228:	689b      	ldr	r3, [r3, #8]
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d622a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
   d622e:	4718      	bx	r3
  } else if (base == 10) {
   d6230:	2a0a      	cmp	r2, #10
   d6232:	d102      	bne.n	d623a <_ZN5Print5printEli+0x22>
    if (n < 0) {
   d6234:	2900      	cmp	r1, #0
   d6236:	da01      	bge.n	d623c <_ZN5Print5printEli+0x24>
   d6238:	e004      	b.n	d6244 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d623a:	b2d2      	uxtb	r2, r2
  }
}
   d623c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d6240:	f7ff bfbb 	b.w	d61ba <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d6244:	212d      	movs	r1, #45	; 0x2d
   d6246:	f7ff ff9f 	bl	d6188 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
   d624a:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d624c:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
   d624e:	4271      	negs	r1, r6
   d6250:	4638      	mov	r0, r7
   d6252:	f7ff ffb2 	bl	d61ba <_ZN5Print11printNumberEmh>
   d6256:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d6258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d625c <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d625c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6260:	ec57 6b10 	vmov	r6, r7, d0
   d6264:	4682      	mov	sl, r0
   d6266:	460d      	mov	r5, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d6268:	ee10 2a10 	vmov	r2, s0
   d626c:	463b      	mov	r3, r7
   d626e:	ee10 0a10 	vmov	r0, s0
   d6272:	4639      	mov	r1, r7
   d6274:	f001 f9ba 	bl	d75ec <__aeabi_dcmpun>
   d6278:	b108      	cbz	r0, d627e <_ZN5Print10printFloatEdh+0x22>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d627a:	4948      	ldr	r1, [pc, #288]	; (d639c <_ZN5Print10printFloatEdh+0x140>)
   d627c:	e012      	b.n	d62a4 <_ZN5Print10printFloatEdh+0x48>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d627e:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   d6282:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d6286:	4b46      	ldr	r3, [pc, #280]	; (d63a0 <_ZN5Print10printFloatEdh+0x144>)
   d6288:	4630      	mov	r0, r6
   d628a:	4649      	mov	r1, r9
   d628c:	f001 f9ae 	bl	d75ec <__aeabi_dcmpun>
   d6290:	b968      	cbnz	r0, d62ae <_ZN5Print10printFloatEdh+0x52>
   d6292:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d6296:	4b42      	ldr	r3, [pc, #264]	; (d63a0 <_ZN5Print10printFloatEdh+0x144>)
   d6298:	4630      	mov	r0, r6
   d629a:	4649      	mov	r1, r9
   d629c:	f001 f988 	bl	d75b0 <__aeabi_dcmple>
   d62a0:	b928      	cbnz	r0, d62ae <_ZN5Print10printFloatEdh+0x52>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d62a2:	4940      	ldr	r1, [pc, #256]	; (d63a4 <_ZN5Print10printFloatEdh+0x148>)
   d62a4:	4650      	mov	r0, sl
   d62a6:	f7ff ff5b 	bl	d6160 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d62aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d62ae:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d62b2:	4b3d      	ldr	r3, [pc, #244]	; (d63a8 <_ZN5Print10printFloatEdh+0x14c>)
   d62b4:	4630      	mov	r0, r6
   d62b6:	4639      	mov	r1, r7
   d62b8:	f001 f98e 	bl	d75d8 <__aeabi_dcmpgt>
   d62bc:	b108      	cbz	r0, d62c2 <_ZN5Print10printFloatEdh+0x66>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d62be:	493b      	ldr	r1, [pc, #236]	; (d63ac <_ZN5Print10printFloatEdh+0x150>)
   d62c0:	e7f0      	b.n	d62a4 <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d62c2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d62c6:	4b3a      	ldr	r3, [pc, #232]	; (d63b0 <_ZN5Print10printFloatEdh+0x154>)
   d62c8:	4630      	mov	r0, r6
   d62ca:	4639      	mov	r1, r7
   d62cc:	f001 f966 	bl	d759c <__aeabi_dcmplt>
   d62d0:	2800      	cmp	r0, #0
   d62d2:	d1f4      	bne.n	d62be <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
   d62d4:	2200      	movs	r2, #0
   d62d6:	2300      	movs	r3, #0
   d62d8:	4630      	mov	r0, r6
   d62da:	4639      	mov	r1, r7
   d62dc:	f001 f95e 	bl	d759c <__aeabi_dcmplt>
   d62e0:	b140      	cbz	r0, d62f4 <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
   d62e2:	212d      	movs	r1, #45	; 0x2d
   d62e4:	4650      	mov	r0, sl
   d62e6:	f7ff ff4f 	bl	d6188 <_ZN5Print5printEc>
     number = -number;
   d62ea:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
   d62ee:	4604      	mov	r4, r0
     number = -number;
   d62f0:	461f      	mov	r7, r3
   d62f2:	e000      	b.n	d62f6 <_ZN5Print10printFloatEdh+0x9a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d62f4:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d62f6:	492f      	ldr	r1, [pc, #188]	; (d63b4 <_ZN5Print10printFloatEdh+0x158>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d62f8:	f04f 0800 	mov.w	r8, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d62fc:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
   d62fe:	fa5f f388 	uxtb.w	r3, r8
   d6302:	429d      	cmp	r5, r3
   d6304:	d906      	bls.n	d6314 <_ZN5Print10printFloatEdh+0xb8>
    rounding /= 10.0;
   d6306:	2200      	movs	r2, #0
   d6308:	4b2b      	ldr	r3, [pc, #172]	; (d63b8 <_ZN5Print10printFloatEdh+0x15c>)
   d630a:	f000 ffff 	bl	d730c <__aeabi_ddiv>
   d630e:	f108 0801 	add.w	r8, r8, #1
   d6312:	e7f4      	b.n	d62fe <_ZN5Print10printFloatEdh+0xa2>

  number += rounding;
   d6314:	4632      	mov	r2, r6
   d6316:	463b      	mov	r3, r7
   d6318:	f000 fd1c 	bl	d6d54 <__adddf3>
   d631c:	460f      	mov	r7, r1
   d631e:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d6320:	f001 f9a2 	bl	d7668 <__aeabi_d2uiz>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d6324:	220a      	movs	r2, #10
   d6326:	4601      	mov	r1, r0
    rounding /= 10.0;

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d6328:	4680      	mov	r8, r0
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d632a:	4650      	mov	r0, sl
   d632c:	f7ff ff45 	bl	d61ba <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d6330:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   d6332:	b37d      	cbz	r5, d6394 <_ZN5Print10printFloatEdh+0x138>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   d6334:	4640      	mov	r0, r8
   d6336:	f000 fe49 	bl	d6fcc <__aeabi_ui2d>
   d633a:	4602      	mov	r2, r0
   d633c:	460b      	mov	r3, r1
   d633e:	4630      	mov	r0, r6
   d6340:	4639      	mov	r1, r7
   d6342:	f000 fd05 	bl	d6d50 <__aeabi_dsub>
   d6346:	4606      	mov	r6, r0
   d6348:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d634a:	4650      	mov	r0, sl
   d634c:	491b      	ldr	r1, [pc, #108]	; (d63bc <_ZN5Print10printFloatEdh+0x160>)
   d634e:	f7ff ff07 	bl	d6160 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
   d6352:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
   d6354:	4b18      	ldr	r3, [pc, #96]	; (d63b8 <_ZN5Print10printFloatEdh+0x15c>)
   d6356:	2200      	movs	r2, #0
   d6358:	4630      	mov	r0, r6
   d635a:	4639      	mov	r1, r7
   d635c:	f000 feac 	bl	d70b8 <__aeabi_dmul>
   d6360:	460f      	mov	r7, r1
   d6362:	4606      	mov	r6, r0
    int toPrint = int(remainder);
   d6364:	f001 f958 	bl	d7618 <__aeabi_d2iz>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d6368:	220a      	movs	r2, #10
   d636a:	4601      	mov	r1, r0

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
   d636c:	4680      	mov	r8, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d636e:	4650      	mov	r0, sl
   d6370:	f7ff ff52 	bl	d6218 <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
   d6374:	4404      	add	r4, r0
    remainder -= toPrint;
   d6376:	4640      	mov	r0, r8
   d6378:	f000 fe38 	bl	d6fec <__aeabi_i2d>
   d637c:	4602      	mov	r2, r0
   d637e:	460b      	mov	r3, r1
   d6380:	4630      	mov	r0, r6
   d6382:	4639      	mov	r1, r7
   d6384:	f000 fce4 	bl	d6d50 <__aeabi_dsub>
   d6388:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d638a:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
   d638e:	4606      	mov	r6, r0
   d6390:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d6392:	d1df      	bne.n	d6354 <_ZN5Print10printFloatEdh+0xf8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d6394:	4620      	mov	r0, r4
   d6396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d639a:	bf00      	nop
   d639c:	000d7d30 	.word	0x000d7d30
   d63a0:	7fefffff 	.word	0x7fefffff
   d63a4:	000d7d38 	.word	0x000d7d38
   d63a8:	41efffff 	.word	0x41efffff
   d63ac:	000d7d34 	.word	0x000d7d34
   d63b0:	c1efffff 	.word	0xc1efffff
   d63b4:	3fe00000 	.word	0x3fe00000
   d63b8:	40240000 	.word	0x40240000
   d63bc:	000d7b03 	.word	0x000d7b03

000d63c0 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d63c0:	b2c9      	uxtb	r1, r1
   d63c2:	f7ff bf4b 	b.w	d625c <_ZN5Print10printFloatEdh>

000d63c6 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   d63c6:	b538      	push	{r3, r4, r5, lr}
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d63c8:	b2c9      	uxtb	r1, r1
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   d63ca:	4605      	mov	r5, r0
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d63cc:	f7ff ff46 	bl	d625c <_ZN5Print10printFloatEdh>
   d63d0:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
   d63d2:	4628      	mov	r0, r5
   d63d4:	f7ff fedb 	bl	d618e <_ZN5Print7printlnEv>
  return n;
}
   d63d8:	4420      	add	r0, r4
   d63da:	bd38      	pop	{r3, r4, r5, pc}

000d63dc <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d63dc:	b510      	push	{r4, lr}
   d63de:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d63e0:	f7ff fc2c 	bl	d5c3c <_ZNSt14_Function_baseD1Ev>
   d63e4:	4620      	mov	r0, r4
   d63e6:	bd10      	pop	{r4, pc}

000d63e8 <_ZN8RGBClass7controlEb>:
{
    return LED_RGB_IsOverRidden();
}

void RGBClass::control(bool override)
{
   d63e8:	b510      	push	{r4, lr}
   d63ea:	4604      	mov	r4, r0

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
   d63ec:	f7fe fb5e 	bl	d4aac <LED_RGB_IsOverRidden>
}

void RGBClass::control(bool override)
{
    if (override == controlled()) {
   d63f0:	4284      	cmp	r4, r0
   d63f2:	d008      	beq.n	d6406 <_ZN8RGBClass7controlEb+0x1e>
        return;
    } else if (override) {
   d63f4:	b11c      	cbz	r4, d63fe <_ZN8RGBClass7controlEb+0x16>
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
    }
}
   d63f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void RGBClass::control(bool override)
{
    if (override == controlled()) {
        return;
    } else if (override) {
        LED_Signaling_Start();
   d63fa:	f7fe bb47 	b.w	d4a8c <LED_Signaling_Start>
    } else {
        LED_Signaling_Stop();
    }
}
   d63fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (override == controlled()) {
        return;
    } else if (override) {
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
   d6402:	f7fe bb4b 	b.w	d4a9c <LED_Signaling_Stop>
   d6406:	bd10      	pop	{r4, pc}

000d6408 <_ZN8RGBClass5colorEiii>:
void RGBClass::color(uint32_t rgb) {
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
   d6408:	b570      	push	{r4, r5, r6, lr}
   d640a:	4605      	mov	r5, r0
   d640c:	460e      	mov	r6, r1
   d640e:	4614      	mov	r4, r2

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
   d6410:	f7fe fb4c 	bl	d4aac <LED_RGB_IsOverRidden>
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
    if (!controlled()) {
   d6414:	b150      	cbz	r0, d642c <_ZN8RGBClass5colorEiii+0x24>
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
   d6416:	ea44 2006 	orr.w	r0, r4, r6, lsl #8
   d641a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
   d641e:	f7fe fb2d 	bl	d4a7c <LED_SetSignalingColor>
    LED_On(LED_RGB);
   d6422:	20e7      	movs	r0, #231	; 0xe7
}
   d6424:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
{
    if (!controlled()) {
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
    LED_On(LED_RGB);
   d6428:	f7fe bb48 	b.w	d4abc <LED_On>
   d642c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6430 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6430:	4803      	ldr	r0, [pc, #12]	; (d6440 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d6432:	4a04      	ldr	r2, [pc, #16]	; (d6444 <_GLOBAL__sub_I_RGB+0x14>)
   d6434:	4904      	ldr	r1, [pc, #16]	; (d6448 <_GLOBAL__sub_I_RGB+0x18>)
   d6436:	2300      	movs	r3, #0
   d6438:	6083      	str	r3, [r0, #8]
   d643a:	f000 bb35 	b.w	d6aa8 <__aeabi_atexit>
   d643e:	bf00      	nop
   d6440:	2003e5b4 	.word	0x2003e5b4
   d6444:	2003e364 	.word	0x2003e364
   d6448:	000d63dd 	.word	0x000d63dd

000d644c <_ZN5Servo11resetFieldsEv>:

void Servo::resetFields(void)
{
  this->pin = NOT_ATTACHED;
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
   d644c:	22b4      	movs	r2, #180	; 0xb4
  return HAL_Servo_Read_Pulse_Width(this->pin);
}

void Servo::resetFields(void)
{
  this->pin = NOT_ATTACHED;
   d644e:	f64f 73ff 	movw	r3, #65535	; 0xffff
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
   d6452:	8102      	strh	r2, [r0, #8]
  this->minPW = SERVO_DEFAULT_MIN_PW;
   d6454:	f44f 7208 	mov.w	r2, #544	; 0x220
  return HAL_Servo_Read_Pulse_Width(this->pin);
}

void Servo::resetFields(void)
{
  this->pin = NOT_ATTACHED;
   d6458:	8003      	strh	r3, [r0, #0]
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
  this->minPW = SERVO_DEFAULT_MIN_PW;
   d645a:	8042      	strh	r2, [r0, #2]
}

void Servo::resetFields(void)
{
  this->pin = NOT_ATTACHED;
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
   d645c:	2300      	movs	r3, #0
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
  this->minPW = SERVO_DEFAULT_MIN_PW;
  this->maxPW = SERVO_DEFAULT_MAX_PW;
   d645e:	f44f 6216 	mov.w	r2, #2400	; 0x960
}

void Servo::resetFields(void)
{
  this->pin = NOT_ATTACHED;
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
   d6462:	80c3      	strh	r3, [r0, #6]
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
  this->minPW = SERVO_DEFAULT_MIN_PW;
  this->maxPW = SERVO_DEFAULT_MAX_PW;
   d6464:	8082      	strh	r2, [r0, #4]
  this->trim = 0;
   d6466:	60c3      	str	r3, [r0, #12]
   d6468:	4770      	bx	lr

000d646a <_ZN5ServoC1Ev>:
#define ANGLE_TO_US(a)    ((uint16_t)(map((a), this->minAngle, this->maxAngle, \
                                        this->minPW, this->maxPW)))
#define US_TO_ANGLE(us)   ((int16_t)(map((us), this->minPW, this->maxPW,  \
                                       this->minAngle, this->maxAngle)))

Servo::Servo()
   d646a:	b508      	push	{r3, lr}
{
  this->resetFields();
   d646c:	f7ff ffee 	bl	d644c <_ZN5Servo11resetFieldsEv>
}
   d6470:	bd08      	pop	{r3, pc}

000d6472 <_ZN5Servo6detachEv>:

  return true;
}

bool Servo::detach()
{
   d6472:	b510      	push	{r4, lr}
   d6474:	4604      	mov	r4, r0
   d6476:	f9b0 0000 	ldrsh.w	r0, [r0]
  if (!this->attached())
   d647a:	1c43      	adds	r3, r0, #1
   d647c:	d007      	beq.n	d648e <_ZN5Servo6detachEv+0x1c>
  {
    return false;
  }

  HAL_Servo_Detach(this->pin);
   d647e:	b280      	uxth	r0, r0
   d6480:	f7fe fa6c 	bl	d495c <HAL_Servo_Detach>

  this->resetFields();
   d6484:	4620      	mov	r0, r4
   d6486:	f7ff ffe1 	bl	d644c <_ZN5Servo11resetFieldsEv>

  return true;
   d648a:	2001      	movs	r0, #1
   d648c:	bd10      	pop	{r4, pc}

bool Servo::detach()
{
  if (!this->attached())
  {
    return false;
   d648e:	2000      	movs	r0, #0
  HAL_Servo_Detach(this->pin);

  this->resetFields();

  return true;
}
   d6490:	bd10      	pop	{r4, pc}

000d6492 <_ZN5Servo6attachEtttss>:
bool Servo::attach(uint16_t pin,
    uint16_t minPW,
    uint16_t maxPW,
    int16_t minAngle,
    int16_t maxAngle)
{
   d6492:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6496:	460d      	mov	r5, r1
   d6498:	4604      	mov	r4, r0

  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
   d649a:	2102      	movs	r1, #2
   d649c:	4628      	mov	r0, r5
bool Servo::attach(uint16_t pin,
    uint16_t minPW,
    uint16_t maxPW,
    int16_t minAngle,
    int16_t maxAngle)
{
   d649e:	4690      	mov	r8, r2
   d64a0:	461f      	mov	r7, r3

  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
   d64a2:	f7fe f9cb 	bl	d483c <HAL_Validate_Pin_Function>
   d64a6:	2802      	cmp	r0, #2
   d64a8:	d001      	beq.n	d64ae <_ZN5Servo6attachEtttss+0x1c>
  {
    return false;
   d64aa:	2600      	movs	r6, #0
   d64ac:	e019      	b.n	d64e2 <_ZN5Servo6attachEtttss+0x50>
  }

  // Safety check
  if (!pinAvailable(pin))
   d64ae:	4628      	mov	r0, r5
   d64b0:	f000 fa6c 	bl	d698c <pinAvailable>
   d64b4:	4606      	mov	r6, r0
   d64b6:	2800      	cmp	r0, #0
   d64b8:	d0f7      	beq.n	d64aa <_ZN5Servo6attachEtttss+0x18>
  {
    return false;
  }

  if (this->attached())
   d64ba:	f9b4 3000 	ldrsh.w	r3, [r4]
   d64be:	3301      	adds	r3, #1
   d64c0:	d002      	beq.n	d64c8 <_ZN5Servo6attachEtttss+0x36>
  {
    this->detach();
   d64c2:	4620      	mov	r0, r4
   d64c4:	f7ff ffd5 	bl	d6472 <_ZN5Servo6detachEv>
  }

  this->pin = pin;
  this->minPW = minPW;
  this->maxPW = maxPW;
  this->minAngle = minAngle;
   d64c8:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
   d64cc:	80e3      	strh	r3, [r4, #6]
  this->maxAngle = maxAngle;
   d64ce:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
  if (this->attached())
  {
    this->detach();
  }

  this->pin = pin;
   d64d2:	8025      	strh	r5, [r4, #0]
  this->minPW = minPW;
   d64d4:	f8a4 8002 	strh.w	r8, [r4, #2]
  this->maxPW = maxPW;
   d64d8:	80a7      	strh	r7, [r4, #4]
  this->minAngle = minAngle;
  this->maxAngle = maxAngle;
   d64da:	8123      	strh	r3, [r4, #8]

  HAL_Servo_Attach(this->pin);
   d64dc:	4628      	mov	r0, r5
   d64de:	f7fe fa35 	bl	d494c <HAL_Servo_Attach>

  return true;
}
   d64e2:	4630      	mov	r0, r6
   d64e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d64e8 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d64e8:	4770      	bx	lr

000d64ea <_ZN8SPIClassD0Ev>:
   d64ea:	b510      	push	{r4, lr}
   d64ec:	2110      	movs	r1, #16
   d64ee:	4604      	mov	r4, r0
   d64f0:	f000 fadf 	bl	d6ab2 <_ZdlPvj>
   d64f4:	4620      	mov	r0, r4
   d64f6:	bd10      	pop	{r4, pc}

000d64f8 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d64f8:	b570      	push	{r4, r5, r6, lr}
   d64fa:	4b08      	ldr	r3, [pc, #32]	; (d651c <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d64fc:	6003      	str	r3, [r0, #0]
   d64fe:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d6500:	2500      	movs	r5, #0
   d6502:	460e      	mov	r6, r1
   d6504:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d6508:	f7fe f958 	bl	d47bc <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d650c:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d650e:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d6510:	f7fe fa2c 	bl	d496c <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d6514:	60a5      	str	r5, [r4, #8]
}
   d6516:	4620      	mov	r0, r4
   d6518:	bd70      	pop	{r4, r5, r6, pc}
   d651a:	bf00      	nop
   d651c:	000d7d44 	.word	0x000d7d44

000d6520 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d6520:	7900      	ldrb	r0, [r0, #4]
   d6522:	f7fe ba2b 	b.w	d497c <HAL_SPI_Is_Enabled>

000d6526 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d6526:	b510      	push	{r4, lr}
   d6528:	4604      	mov	r4, r0
{
	free(buffer);
   d652a:	6800      	ldr	r0, [r0, #0]
   d652c:	f7fe fb62 	bl	d4bf4 <free>
}
   d6530:	4620      	mov	r0, r4
   d6532:	bd10      	pop	{r4, pc}

000d6534 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d6534:	b510      	push	{r4, lr}
   d6536:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d6538:	6800      	ldr	r0, [r0, #0]
   d653a:	b108      	cbz	r0, d6540 <_ZN6String10invalidateEv+0xc>
   d653c:	f7fe fb5a 	bl	d4bf4 <free>
	buffer = NULL;
   d6540:	2300      	movs	r3, #0
   d6542:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d6544:	60a3      	str	r3, [r4, #8]
   d6546:	6063      	str	r3, [r4, #4]
   d6548:	bd10      	pop	{r4, pc}

000d654a <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d654a:	b538      	push	{r3, r4, r5, lr}
   d654c:	4604      	mov	r4, r0
   d654e:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d6550:	6800      	ldr	r0, [r0, #0]
   d6552:	3101      	adds	r1, #1
   d6554:	f7fe fb56 	bl	d4c04 <realloc>
	if (newbuffer) {
   d6558:	b110      	cbz	r0, d6560 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d655a:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d655e:	2001      	movs	r0, #1
	}
	return 0;
}
   d6560:	bd38      	pop	{r3, r4, r5, pc}

000d6562 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d6562:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d6564:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d6566:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d6568:	b113      	cbz	r3, d6570 <_ZN6String7reserveEj+0xe>
   d656a:	6843      	ldr	r3, [r0, #4]
   d656c:	428b      	cmp	r3, r1
   d656e:	d207      	bcs.n	d6580 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d6570:	4620      	mov	r0, r4
   d6572:	f7ff ffea 	bl	d654a <_ZN6String12changeBufferEj>
   d6576:	b120      	cbz	r0, d6582 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d6578:	68a3      	ldr	r3, [r4, #8]
   d657a:	b90b      	cbnz	r3, d6580 <_ZN6String7reserveEj+0x1e>
   d657c:	6822      	ldr	r2, [r4, #0]
   d657e:	7013      	strb	r3, [r2, #0]
   d6580:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d6582:	bd10      	pop	{r4, pc}

000d6584 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d6584:	b570      	push	{r4, r5, r6, lr}
   d6586:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d6588:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d658a:	4604      	mov	r4, r0
   d658c:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d658e:	f7ff ffe8 	bl	d6562 <_ZN6String7reserveEj>
   d6592:	b918      	cbnz	r0, d659c <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d6594:	4620      	mov	r0, r4
   d6596:	f7ff ffcd 	bl	d6534 <_ZN6String10invalidateEv>
		return *this;
   d659a:	e009      	b.n	d65b0 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d659c:	462a      	mov	r2, r5
   d659e:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d65a0:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d65a2:	6820      	ldr	r0, [r4, #0]
   d65a4:	f001 f8ed 	bl	d7782 <memcpy>
	buffer[len] = 0;
   d65a8:	6822      	ldr	r2, [r4, #0]
   d65aa:	68a3      	ldr	r3, [r4, #8]
   d65ac:	2100      	movs	r1, #0
   d65ae:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d65b0:	4620      	mov	r0, r4
   d65b2:	bd70      	pop	{r4, r5, r6, pc}

000d65b4 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d65b4:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d65b6:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d65b8:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d65ba:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d65bc:	6043      	str	r3, [r0, #4]
	len = 0;
   d65be:	6083      	str	r3, [r0, #8]
	flags = 0;
   d65c0:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d65c2:	460d      	mov	r5, r1
   d65c4:	b139      	cbz	r1, d65d6 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d65c6:	4608      	mov	r0, r1
   d65c8:	f001 f932 	bl	d7830 <strlen>
   d65cc:	4629      	mov	r1, r5
   d65ce:	4602      	mov	r2, r0
   d65d0:	4620      	mov	r0, r4
   d65d2:	f7ff ffd7 	bl	d6584 <_ZN6String4copyEPKcj>
}
   d65d6:	4620      	mov	r0, r4
   d65d8:	bd38      	pop	{r3, r4, r5, pc}

000d65da <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d65da:	b538      	push	{r3, r4, r5, lr}
   d65dc:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d65de:	460c      	mov	r4, r1
   d65e0:	b141      	cbz	r1, d65f4 <_ZN6StringaSEPKc+0x1a>
   d65e2:	4608      	mov	r0, r1
   d65e4:	f001 f924 	bl	d7830 <strlen>
   d65e8:	4621      	mov	r1, r4
   d65ea:	4602      	mov	r2, r0
   d65ec:	4628      	mov	r0, r5
   d65ee:	f7ff ffc9 	bl	d6584 <_ZN6String4copyEPKcj>
   d65f2:	e001      	b.n	d65f8 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d65f4:	f7ff ff9e 	bl	d6534 <_ZN6String10invalidateEv>

	return *this;
}
   d65f8:	4628      	mov	r0, r5
   d65fa:	bd38      	pop	{r3, r4, r5, pc}

000d65fc <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d65fc:	4b04      	ldr	r3, [pc, #16]	; (d6610 <_GLOBAL__sub_I_System+0x14>)
   d65fe:	2000      	movs	r0, #0
   d6600:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d6604:	7018      	strb	r0, [r3, #0]
   d6606:	8058      	strh	r0, [r3, #2]
   d6608:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d660a:	f7fe ba6f 	b.w	d4aec <set_system_mode>
   d660e:	bf00      	nop
   d6610:	2003e5c4 	.word	0x2003e5c4

000d6614 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d6614:	4b02      	ldr	r3, [pc, #8]	; (d6620 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d6616:	681a      	ldr	r2, [r3, #0]
   d6618:	4b02      	ldr	r3, [pc, #8]	; (d6624 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d661a:	601a      	str	r2, [r3, #0]
   d661c:	4770      	bx	lr
   d661e:	bf00      	nop
   d6620:	2003e2fc 	.word	0x2003e2fc
   d6624:	2003e5cc 	.word	0x2003e5cc

000d6628 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d6628:	4770      	bx	lr

000d662a <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d662a:	7441      	strb	r1, [r0, #17]
   d662c:	4770      	bx	lr

000d662e <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d662e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d6630:	7c00      	ldrb	r0, [r0, #16]
   d6632:	f7fe f9e3 	bl	d49fc <HAL_USART_Available_Data_For_Write>
}
   d6636:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d663a:	bd08      	pop	{r3, pc}

000d663c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d663c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d663e:	7c00      	ldrb	r0, [r0, #16]
   d6640:	f7fe f9b4 	bl	d49ac <HAL_USART_Available_Data>
}
   d6644:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6648:	bd08      	pop	{r3, pc}

000d664a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d664a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d664c:	7c00      	ldrb	r0, [r0, #16]
   d664e:	f7fe f9bd 	bl	d49cc <HAL_USART_Peek_Data>
}
   d6652:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6656:	bf28      	it	cs
   d6658:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d665c:	bd08      	pop	{r3, pc}

000d665e <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d665e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d6660:	7c00      	ldrb	r0, [r0, #16]
   d6662:	f7fe f9ab 	bl	d49bc <HAL_USART_Read_Data>
}
   d6666:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d666a:	bf28      	it	cs
   d666c:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d6670:	bd08      	pop	{r3, pc}

000d6672 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d6672:	7c00      	ldrb	r0, [r0, #16]
   d6674:	f7fe b9b2 	b.w	d49dc <HAL_USART_Flush_Data>

000d6678 <_ZN11USARTSerialD0Ev>:
   d6678:	b510      	push	{r4, lr}
   d667a:	2114      	movs	r1, #20
   d667c:	4604      	mov	r4, r0
   d667e:	f000 fa18 	bl	d6ab2 <_ZdlPvj>
   d6682:	4620      	mov	r0, r4
   d6684:	bd10      	pop	{r4, pc}

000d6686 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d6686:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6688:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d668a:	4604      	mov	r4, r0
   d668c:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d668e:	b925      	cbnz	r5, d669a <_ZN11USARTSerial5writeEh+0x14>
   d6690:	7c00      	ldrb	r0, [r0, #16]
   d6692:	f7fe f9b3 	bl	d49fc <HAL_USART_Available_Data_For_Write>
   d6696:	2800      	cmp	r0, #0
   d6698:	dd05      	ble.n	d66a6 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d669a:	4631      	mov	r1, r6
   d669c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d669e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d66a2:	f7fe b97b 	b.w	d499c <HAL_USART_Write_Data>
  }
  return 0;
}
   d66a6:	4628      	mov	r0, r5
   d66a8:	bd70      	pop	{r4, r5, r6, pc}
	...

000d66ac <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d66ac:	b510      	push	{r4, lr}
   d66ae:	4604      	mov	r4, r0
   d66b0:	4608      	mov	r0, r1
   d66b2:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d66b4:	2200      	movs	r2, #0
   d66b6:	6062      	str	r2, [r4, #4]
   d66b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d66bc:	60a2      	str	r2, [r4, #8]
   d66be:	4a05      	ldr	r2, [pc, #20]	; (d66d4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d66c0:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d66c2:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d66c4:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d66c6:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d66c8:	461a      	mov	r2, r3
   d66ca:	f7fe f95f 	bl	d498c <HAL_USART_Init>
}
   d66ce:	4620      	mov	r0, r4
   d66d0:	bd10      	pop	{r4, pc}
   d66d2:	bf00      	nop
   d66d4:	000d7d80 	.word	0x000d7d80

000d66d8 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d66d8:	7c00      	ldrb	r0, [r0, #16]
   d66da:	f7fe b987 	b.w	d49ec <HAL_USART_Is_Enabled>
	...

000d66e0 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d66e0:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d66e2:	4d0c      	ldr	r5, [pc, #48]	; (d6714 <_Z22__fetch_global_Serial1v+0x34>)
   d66e4:	6829      	ldr	r1, [r5, #0]
   d66e6:	f011 0401 	ands.w	r4, r1, #1
   d66ea:	d111      	bne.n	d6710 <_Z22__fetch_global_Serial1v+0x30>
   d66ec:	4628      	mov	r0, r5
   d66ee:	f7fd fcda 	bl	d40a6 <__cxa_guard_acquire>
   d66f2:	b168      	cbz	r0, d6710 <_Z22__fetch_global_Serial1v+0x30>
   d66f4:	4a08      	ldr	r2, [pc, #32]	; (d6718 <_Z22__fetch_global_Serial1v+0x38>)
   d66f6:	4b09      	ldr	r3, [pc, #36]	; (d671c <_Z22__fetch_global_Serial1v+0x3c>)
   d66f8:	4809      	ldr	r0, [pc, #36]	; (d6720 <_Z22__fetch_global_Serial1v+0x40>)
   d66fa:	4621      	mov	r1, r4
   d66fc:	f7ff ffd6 	bl	d66ac <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d6700:	4628      	mov	r0, r5
   d6702:	f7fd fcd5 	bl	d40b0 <__cxa_guard_release>
   d6706:	4a07      	ldr	r2, [pc, #28]	; (d6724 <_Z22__fetch_global_Serial1v+0x44>)
   d6708:	4907      	ldr	r1, [pc, #28]	; (d6728 <_Z22__fetch_global_Serial1v+0x48>)
   d670a:	4805      	ldr	r0, [pc, #20]	; (d6720 <_Z22__fetch_global_Serial1v+0x40>)
   d670c:	f000 f9cc 	bl	d6aa8 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d6710:	4803      	ldr	r0, [pc, #12]	; (d6720 <_Z22__fetch_global_Serial1v+0x40>)
   d6712:	bd38      	pop	{r3, r4, r5, pc}
   d6714:	2003e668 	.word	0x2003e668
   d6718:	2003e66c 	.word	0x2003e66c
   d671c:	2003e5e4 	.word	0x2003e5e4
   d6720:	2003e5d0 	.word	0x2003e5d0
   d6724:	2003e364 	.word	0x2003e364
   d6728:	000d6629 	.word	0x000d6629

000d672c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d672c:	7441      	strb	r1, [r0, #17]
   d672e:	4770      	bx	lr

000d6730 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d6730:	4770      	bx	lr

000d6732 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d6732:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d6734:	2100      	movs	r1, #0
   d6736:	7c00      	ldrb	r0, [r0, #16]
   d6738:	f7fe f988 	bl	d4a4c <HAL_USB_USART_Receive_Data>
}
   d673c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6740:	bf28      	it	cs
   d6742:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d6746:	bd08      	pop	{r3, pc}

000d6748 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d6748:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d674a:	2101      	movs	r1, #1
   d674c:	7c00      	ldrb	r0, [r0, #16]
   d674e:	f7fe f97d 	bl	d4a4c <HAL_USB_USART_Receive_Data>
}
   d6752:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6756:	bf28      	it	cs
   d6758:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d675c:	bd08      	pop	{r3, pc}

000d675e <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d675e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d6760:	7c00      	ldrb	r0, [r0, #16]
   d6762:	f7fe f96b 	bl	d4a3c <HAL_USB_USART_Available_Data_For_Write>
}
   d6766:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d676a:	bd08      	pop	{r3, pc}

000d676c <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d676c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d676e:	7c00      	ldrb	r0, [r0, #16]
   d6770:	f7fe f95c 	bl	d4a2c <HAL_USB_USART_Available_Data>
}
   d6774:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6778:	bd08      	pop	{r3, pc}

000d677a <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d677a:	7c00      	ldrb	r0, [r0, #16]
   d677c:	f7fe b976 	b.w	d4a6c <HAL_USB_USART_Flush_Data>

000d6780 <_ZN9USBSerialD0Ev>:
   d6780:	b510      	push	{r4, lr}
   d6782:	2114      	movs	r1, #20
   d6784:	4604      	mov	r4, r0
   d6786:	f000 f994 	bl	d6ab2 <_ZdlPvj>
   d678a:	4620      	mov	r0, r4
   d678c:	bd10      	pop	{r4, pc}

000d678e <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d678e:	b538      	push	{r3, r4, r5, lr}
   d6790:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6792:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6794:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6796:	f7fe f951 	bl	d4a3c <HAL_USB_USART_Available_Data_For_Write>
   d679a:	2800      	cmp	r0, #0
   d679c:	dc01      	bgt.n	d67a2 <_ZN9USBSerial5writeEh+0x14>
   d679e:	7c60      	ldrb	r0, [r4, #17]
   d67a0:	b128      	cbz	r0, d67ae <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d67a2:	4629      	mov	r1, r5
   d67a4:	7c20      	ldrb	r0, [r4, #16]
   d67a6:	f7fe f959 	bl	d4a5c <HAL_USB_USART_Send_Data>
   d67aa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d67ae:	bd38      	pop	{r3, r4, r5, pc}

000d67b0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d67b0:	b510      	push	{r4, lr}
   d67b2:	4604      	mov	r4, r0
   d67b4:	2300      	movs	r3, #0
   d67b6:	6063      	str	r3, [r4, #4]
   d67b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d67bc:	60a3      	str	r3, [r4, #8]
   d67be:	4b05      	ldr	r3, [pc, #20]	; (d67d4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d67c0:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d67c2:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d67c4:	4608      	mov	r0, r1
{
  _serial = serial;
   d67c6:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d67c8:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d67ca:	4611      	mov	r1, r2
   d67cc:	f7fe f91e 	bl	d4a0c <HAL_USB_USART_Init>
}
   d67d0:	4620      	mov	r0, r4
   d67d2:	bd10      	pop	{r4, pc}
   d67d4:	000d7db0 	.word	0x000d7db0

000d67d8 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d67d8:	2200      	movs	r2, #0
   d67da:	7c00      	ldrb	r0, [r0, #16]
   d67dc:	f7fe b91e 	b.w	d4a1c <HAL_USB_USART_Begin>

000d67e0 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d67e0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d67e2:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d67e4:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d67e6:	2100      	movs	r1, #0
   d67e8:	f000 fff1 	bl	d77ce <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d67ec:	4620      	mov	r0, r4
   d67ee:	bd10      	pop	{r4, pc}

000d67f0 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d67f0:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d67f2:	4d0e      	ldr	r5, [pc, #56]	; (d682c <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d67f4:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d67f6:	a801      	add	r0, sp, #4
   d67f8:	f7ff fff2 	bl	d67e0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d67fc:	6829      	ldr	r1, [r5, #0]
   d67fe:	f011 0401 	ands.w	r4, r1, #1
   d6802:	d110      	bne.n	d6826 <_Z16_fetch_usbserialv+0x36>
   d6804:	4628      	mov	r0, r5
   d6806:	f7fd fc4e 	bl	d40a6 <__cxa_guard_acquire>
   d680a:	b160      	cbz	r0, d6826 <_Z16_fetch_usbserialv+0x36>
   d680c:	aa01      	add	r2, sp, #4
   d680e:	4621      	mov	r1, r4
   d6810:	4807      	ldr	r0, [pc, #28]	; (d6830 <_Z16_fetch_usbserialv+0x40>)
   d6812:	f7ff ffcd 	bl	d67b0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d6816:	4628      	mov	r0, r5
   d6818:	f7fd fc4a 	bl	d40b0 <__cxa_guard_release>
   d681c:	4a05      	ldr	r2, [pc, #20]	; (d6834 <_Z16_fetch_usbserialv+0x44>)
   d681e:	4906      	ldr	r1, [pc, #24]	; (d6838 <_Z16_fetch_usbserialv+0x48>)
   d6820:	4803      	ldr	r0, [pc, #12]	; (d6830 <_Z16_fetch_usbserialv+0x40>)
   d6822:	f000 f941 	bl	d6aa8 <__aeabi_atexit>
	return _usbserial;
}
   d6826:	4802      	ldr	r0, [pc, #8]	; (d6830 <_Z16_fetch_usbserialv+0x40>)
   d6828:	b007      	add	sp, #28
   d682a:	bd30      	pop	{r4, r5, pc}
   d682c:	2003e6f0 	.word	0x2003e6f0
   d6830:	2003e6f4 	.word	0x2003e6f4
   d6834:	2003e364 	.word	0x2003e364
   d6838:	000d6731 	.word	0x000d6731

000d683c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d683c:	2200      	movs	r2, #0
   d683e:	4611      	mov	r1, r2
   d6840:	6840      	ldr	r0, [r0, #4]
   d6842:	f7fe b997 	b.w	d4b74 <network_ready>

000d6846 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6846:	2200      	movs	r2, #0
   d6848:	4611      	mov	r1, r2
   d684a:	6840      	ldr	r0, [r0, #4]
   d684c:	f7fe b9b2 	b.w	d4bb4 <network_listening>

000d6850 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6850:	2200      	movs	r2, #0
   d6852:	4611      	mov	r1, r2
   d6854:	6840      	ldr	r0, [r0, #4]
   d6856:	f7fe b9bd 	b.w	d4bd4 <network_get_listen_timeout>

000d685a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d685a:	2200      	movs	r2, #0
   d685c:	6840      	ldr	r0, [r0, #4]
   d685e:	f7fe b9b1 	b.w	d4bc4 <network_set_listen_timeout>

000d6862 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6862:	2200      	movs	r2, #0
   d6864:	f081 0101 	eor.w	r1, r1, #1
   d6868:	6840      	ldr	r0, [r0, #4]
   d686a:	f7fe b99b 	b.w	d4ba4 <network_listen>

000d686e <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d686e:	2300      	movs	r3, #0
   d6870:	461a      	mov	r2, r3
   d6872:	4619      	mov	r1, r3
   d6874:	6840      	ldr	r0, [r0, #4]
   d6876:	f7fe b98d 	b.w	d4b94 <network_off>

000d687a <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d687a:	2300      	movs	r3, #0
   d687c:	461a      	mov	r2, r3
   d687e:	4619      	mov	r1, r3
   d6880:	6840      	ldr	r0, [r0, #4]
   d6882:	f7fe b97f 	b.w	d4b84 <network_on>

000d6886 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6886:	2200      	movs	r2, #0
   d6888:	4611      	mov	r1, r2
   d688a:	6840      	ldr	r0, [r0, #4]
   d688c:	f7fe b962 	b.w	d4b54 <network_connecting>

000d6890 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6890:	2200      	movs	r2, #0
   d6892:	2102      	movs	r1, #2
   d6894:	6840      	ldr	r0, [r0, #4]
   d6896:	f7fe b965 	b.w	d4b64 <network_disconnect>

000d689a <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d689a:	2300      	movs	r3, #0
   d689c:	461a      	mov	r2, r3
   d689e:	6840      	ldr	r0, [r0, #4]
   d68a0:	f7fe b950 	b.w	d4b44 <network_connect>

000d68a4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d68a4:	4b02      	ldr	r3, [pc, #8]	; (d68b0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d68a6:	2204      	movs	r2, #4
   d68a8:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d68aa:	4a02      	ldr	r2, [pc, #8]	; (d68b4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d68ac:	601a      	str	r2, [r3, #0]
   d68ae:	4770      	bx	lr
   d68b0:	2003e708 	.word	0x2003e708
   d68b4:	000d7de0 	.word	0x000d7de0

000d68b8 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d68b8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d68ba:	4b0c      	ldr	r3, [pc, #48]	; (d68ec <serialEventRun+0x34>)
   d68bc:	b133      	cbz	r3, d68cc <serialEventRun+0x14>
   d68be:	f7ff ff97 	bl	d67f0 <_Z16_fetch_usbserialv>
   d68c2:	6803      	ldr	r3, [r0, #0]
   d68c4:	691b      	ldr	r3, [r3, #16]
   d68c6:	4798      	blx	r3
   d68c8:	2800      	cmp	r0, #0
   d68ca:	dc09      	bgt.n	d68e0 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d68cc:	4b08      	ldr	r3, [pc, #32]	; (d68f0 <serialEventRun+0x38>)
   d68ce:	b163      	cbz	r3, d68ea <serialEventRun+0x32>
   d68d0:	f7ff ff06 	bl	d66e0 <_Z22__fetch_global_Serial1v>
   d68d4:	6803      	ldr	r3, [r0, #0]
   d68d6:	691b      	ldr	r3, [r3, #16]
   d68d8:	4798      	blx	r3
   d68da:	2800      	cmp	r0, #0
   d68dc:	dc03      	bgt.n	d68e6 <serialEventRun+0x2e>
   d68de:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d68e0:	f3af 8000 	nop.w
   d68e4:	e7f2      	b.n	d68cc <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d68e6:	f3af 8000 	nop.w
   d68ea:	bd08      	pop	{r3, pc}
	...

000d68f4 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d68f4:	b508      	push	{r3, lr}
	serialEventRun();
   d68f6:	f7ff ffdf 	bl	d68b8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d68fa:	f7fd ff8f 	bl	d481c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d68fe:	4b01      	ldr	r3, [pc, #4]	; (d6904 <_post_loop+0x10>)
   d6900:	6018      	str	r0, [r3, #0]
   d6902:	bd08      	pop	{r3, pc}
   d6904:	2003e714 	.word	0x2003e714

000d6908 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d6908:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d690a:	2300      	movs	r3, #0
   d690c:	9300      	str	r3, [sp, #0]
   d690e:	461a      	mov	r2, r3
   d6910:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6914:	f7fe f904 	bl	d4b20 <system_ctrl_set_result>
}
   d6918:	b003      	add	sp, #12
   d691a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6920 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d6920:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d6922:	8843      	ldrh	r3, [r0, #2]
   d6924:	2b0a      	cmp	r3, #10
   d6926:	d008      	beq.n	d693a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d6928:	2b50      	cmp	r3, #80	; 0x50
   d692a:	d109      	bne.n	d6940 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d692c:	4b09      	ldr	r3, [pc, #36]	; (d6954 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d692e:	681b      	ldr	r3, [r3, #0]
   d6930:	b13b      	cbz	r3, d6942 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d6932:	b003      	add	sp, #12
   d6934:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d6938:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d693a:	f7ff ffe5 	bl	d6908 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d693e:	e006      	b.n	d694e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6940:	2300      	movs	r3, #0
   d6942:	9300      	str	r3, [sp, #0]
   d6944:	461a      	mov	r2, r3
   d6946:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d694a:	f7fe f8e9 	bl	d4b20 <system_ctrl_set_result>
        break;
    }
}
   d694e:	b003      	add	sp, #12
   d6950:	f85d fb04 	ldr.w	pc, [sp], #4
   d6954:	2003e710 	.word	0x2003e710

000d6958 <module_user_init_hook>:

void module_user_init_hook()
{
   d6958:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d695a:	f7fd ff4f 	bl	d47fc <HAL_RNG_GetRandomNumber>
   d695e:	4604      	mov	r4, r0
    srand(seed);
   d6960:	f000 ff3e 	bl	d77e0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d6964:	4b07      	ldr	r3, [pc, #28]	; (d6984 <module_user_init_hook+0x2c>)
   d6966:	b113      	cbz	r3, d696e <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d6968:	4620      	mov	r0, r4
   d696a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d696e:	2100      	movs	r1, #0
   d6970:	4804      	ldr	r0, [pc, #16]	; (d6984 <module_user_init_hook+0x2c>)
   d6972:	f7fe f8df 	bl	d4b34 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6976:	2100      	movs	r1, #0
   d6978:	4803      	ldr	r0, [pc, #12]	; (d6988 <module_user_init_hook+0x30>)
}
   d697a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d697e:	f7fe b8c5 	b.w	d4b0c <system_ctrl_set_app_request_handler>
   d6982:	bf00      	nop
   d6984:	00000000 	.word	0x00000000
   d6988:	000d6921 	.word	0x000d6921

000d698c <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d698c:	b510      	push	{r4, lr}
   d698e:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d6990:	480f      	ldr	r0, [pc, #60]	; (d69d0 <pinAvailable+0x44>)
   d6992:	f7ff fdc5 	bl	d6520 <_ZN8SPIClass9isEnabledEv>
   d6996:	b128      	cbz	r0, d69a4 <pinAvailable+0x18>
   d6998:	f1a4 030b 	sub.w	r3, r4, #11
   d699c:	2b02      	cmp	r3, #2
   d699e:	d801      	bhi.n	d69a4 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d69a0:	2000      	movs	r0, #0
   d69a2:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d69a4:	f000 f83e 	bl	d6a24 <_Z19__fetch_global_Wirev>
   d69a8:	f7ff f9f0 	bl	d5d8c <_ZN7TwoWire9isEnabledEv>
   d69ac:	b108      	cbz	r0, d69b2 <pinAvailable+0x26>
   d69ae:	2c01      	cmp	r4, #1
   d69b0:	d9f6      	bls.n	d69a0 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d69b2:	f7ff fe95 	bl	d66e0 <_Z22__fetch_global_Serial1v>
   d69b6:	f7ff fe8f 	bl	d66d8 <_ZN11USARTSerial9isEnabledEv>
   d69ba:	b118      	cbz	r0, d69c4 <pinAvailable+0x38>
   d69bc:	f1a4 0309 	sub.w	r3, r4, #9
   d69c0:	2b01      	cmp	r3, #1
   d69c2:	d9ed      	bls.n	d69a0 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d69c4:	2c23      	cmp	r4, #35	; 0x23
   d69c6:	bf8c      	ite	hi
   d69c8:	2000      	movhi	r0, #0
   d69ca:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d69cc:	bd10      	pop	{r4, pc}
   d69ce:	bf00      	nop
   d69d0:	2003e730 	.word	0x2003e730

000d69d4 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d69d4:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d69d6:	b538      	push	{r3, r4, r5, lr}
   d69d8:	4604      	mov	r4, r0
   d69da:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d69dc:	d80a      	bhi.n	d69f4 <pinMode+0x20>
   d69de:	29ff      	cmp	r1, #255	; 0xff
   d69e0:	d008      	beq.n	d69f4 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d69e2:	f7ff ffd3 	bl	d698c <pinAvailable>
   d69e6:	b128      	cbz	r0, d69f4 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d69e8:	4629      	mov	r1, r5
   d69ea:	4620      	mov	r0, r4
}
   d69ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d69f0:	f7fd bf2c 	b.w	d484c <HAL_Pin_Mode>
   d69f4:	bd38      	pop	{r3, r4, r5, pc}

000d69f6 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d69f6:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d69f8:	b510      	push	{r4, lr}
   d69fa:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d69fc:	bf9c      	itt	ls
   d69fe:	340e      	addls	r4, #14
   d6a00:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d6a02:	4620      	mov	r0, r4
   d6a04:	f7ff ffc2 	bl	d698c <pinAvailable>
   d6a08:	b150      	cbz	r0, d6a20 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d6a0a:	2103      	movs	r1, #3
   d6a0c:	4620      	mov	r0, r4
   d6a0e:	f7fd ff15 	bl	d483c <HAL_Validate_Pin_Function>
   d6a12:	2803      	cmp	r0, #3
   d6a14:	d104      	bne.n	d6a20 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d6a16:	4620      	mov	r0, r4
}
   d6a18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d6a1c:	f7fd bf1e 	b.w	d485c <HAL_ADC_Read>
}
   d6a20:	2000      	movs	r0, #0
   d6a22:	bd10      	pop	{r4, pc}

000d6a24 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d6a24:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d6a26:	4d0b      	ldr	r5, [pc, #44]	; (d6a54 <_Z19__fetch_global_Wirev+0x30>)
   d6a28:	6829      	ldr	r1, [r5, #0]
   d6a2a:	f011 0401 	ands.w	r4, r1, #1
   d6a2e:	d10f      	bne.n	d6a50 <_Z19__fetch_global_Wirev+0x2c>
   d6a30:	4628      	mov	r0, r5
   d6a32:	f7fd fb38 	bl	d40a6 <__cxa_guard_acquire>
   d6a36:	b158      	cbz	r0, d6a50 <_Z19__fetch_global_Wirev+0x2c>
   d6a38:	4621      	mov	r1, r4
   d6a3a:	4807      	ldr	r0, [pc, #28]	; (d6a58 <_Z19__fetch_global_Wirev+0x34>)
   d6a3c:	f7ff f972 	bl	d5d24 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d6a40:	4628      	mov	r0, r5
   d6a42:	f7fd fb35 	bl	d40b0 <__cxa_guard_release>
   d6a46:	4a05      	ldr	r2, [pc, #20]	; (d6a5c <_Z19__fetch_global_Wirev+0x38>)
   d6a48:	4905      	ldr	r1, [pc, #20]	; (d6a60 <_Z19__fetch_global_Wirev+0x3c>)
   d6a4a:	4803      	ldr	r0, [pc, #12]	; (d6a58 <_Z19__fetch_global_Wirev+0x34>)
   d6a4c:	f000 f82c 	bl	d6aa8 <__aeabi_atexit>
	return wire;
}
   d6a50:	4801      	ldr	r0, [pc, #4]	; (d6a58 <_Z19__fetch_global_Wirev+0x34>)
   d6a52:	bd38      	pop	{r3, r4, r5, pc}
   d6a54:	2003e718 	.word	0x2003e718
   d6a58:	2003e71c 	.word	0x2003e71c
   d6a5c:	2003e364 	.word	0x2003e364
   d6a60:	000d5ccd 	.word	0x000d5ccd

000d6a64 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d6a64:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d6a66:	4c0c      	ldr	r4, [pc, #48]	; (d6a98 <_GLOBAL__sub_I_SPI+0x34>)
   d6a68:	4e0c      	ldr	r6, [pc, #48]	; (d6a9c <_GLOBAL__sub_I_SPI+0x38>)
   d6a6a:	4d0d      	ldr	r5, [pc, #52]	; (d6aa0 <_GLOBAL__sub_I_SPI+0x3c>)
   d6a6c:	2100      	movs	r1, #0
   d6a6e:	4620      	mov	r0, r4
   d6a70:	f7ff fd42 	bl	d64f8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d6a74:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d6a76:	4c0b      	ldr	r4, [pc, #44]	; (d6aa4 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d6a78:	4632      	mov	r2, r6
   d6a7a:	4629      	mov	r1, r5
   d6a7c:	f000 f814 	bl	d6aa8 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d6a80:	2101      	movs	r1, #1
   d6a82:	4620      	mov	r0, r4
   d6a84:	f7ff fd38 	bl	d64f8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d6a88:	4632      	mov	r2, r6
   d6a8a:	4629      	mov	r1, r5
   d6a8c:	4620      	mov	r0, r4
   d6a8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d6a92:	f000 b809 	b.w	d6aa8 <__aeabi_atexit>
   d6a96:	bf00      	nop
   d6a98:	2003e730 	.word	0x2003e730
   d6a9c:	2003e364 	.word	0x2003e364
   d6aa0:	000d64e9 	.word	0x000d64e9
   d6aa4:	2003e740 	.word	0x2003e740

000d6aa8 <__aeabi_atexit>:
   d6aa8:	460b      	mov	r3, r1
   d6aaa:	4601      	mov	r1, r0
   d6aac:	4618      	mov	r0, r3
   d6aae:	f000 be4b 	b.w	d7748 <__cxa_atexit>

000d6ab2 <_ZdlPvj>:
   d6ab2:	f7fd baf4 	b.w	d409e <_ZdlPv>
	...

000d6ab8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d6ab8:	4b24      	ldr	r3, [pc, #144]	; (d6b4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d6aba:	681a      	ldr	r2, [r3, #0]
   d6abc:	07d0      	lsls	r0, r2, #31
   d6abe:	bf5c      	itt	pl
   d6ac0:	2201      	movpl	r2, #1
   d6ac2:	601a      	strpl	r2, [r3, #0]
   d6ac4:	4b22      	ldr	r3, [pc, #136]	; (d6b50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d6ac6:	681a      	ldr	r2, [r3, #0]
   d6ac8:	07d1      	lsls	r1, r2, #31
   d6aca:	bf5c      	itt	pl
   d6acc:	2201      	movpl	r2, #1
   d6ace:	601a      	strpl	r2, [r3, #0]
   d6ad0:	4b20      	ldr	r3, [pc, #128]	; (d6b54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d6ad2:	681a      	ldr	r2, [r3, #0]
   d6ad4:	07d2      	lsls	r2, r2, #31
   d6ad6:	bf5c      	itt	pl
   d6ad8:	2201      	movpl	r2, #1
   d6ada:	601a      	strpl	r2, [r3, #0]
   d6adc:	4b1e      	ldr	r3, [pc, #120]	; (d6b58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d6ade:	681a      	ldr	r2, [r3, #0]
   d6ae0:	07d0      	lsls	r0, r2, #31
   d6ae2:	bf5c      	itt	pl
   d6ae4:	2201      	movpl	r2, #1
   d6ae6:	601a      	strpl	r2, [r3, #0]
   d6ae8:	4b1c      	ldr	r3, [pc, #112]	; (d6b5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d6aea:	681a      	ldr	r2, [r3, #0]
   d6aec:	07d1      	lsls	r1, r2, #31
   d6aee:	bf5c      	itt	pl
   d6af0:	2201      	movpl	r2, #1
   d6af2:	601a      	strpl	r2, [r3, #0]
   d6af4:	4b1a      	ldr	r3, [pc, #104]	; (d6b60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d6af6:	681a      	ldr	r2, [r3, #0]
   d6af8:	07d2      	lsls	r2, r2, #31
   d6afa:	bf5c      	itt	pl
   d6afc:	2201      	movpl	r2, #1
   d6afe:	601a      	strpl	r2, [r3, #0]
   d6b00:	4b18      	ldr	r3, [pc, #96]	; (d6b64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d6b02:	681a      	ldr	r2, [r3, #0]
   d6b04:	07d0      	lsls	r0, r2, #31
   d6b06:	bf5c      	itt	pl
   d6b08:	2201      	movpl	r2, #1
   d6b0a:	601a      	strpl	r2, [r3, #0]
   d6b0c:	4b16      	ldr	r3, [pc, #88]	; (d6b68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d6b0e:	681a      	ldr	r2, [r3, #0]
   d6b10:	07d1      	lsls	r1, r2, #31
   d6b12:	bf5c      	itt	pl
   d6b14:	2201      	movpl	r2, #1
   d6b16:	601a      	strpl	r2, [r3, #0]
   d6b18:	4b14      	ldr	r3, [pc, #80]	; (d6b6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d6b1a:	681a      	ldr	r2, [r3, #0]
   d6b1c:	07d2      	lsls	r2, r2, #31
   d6b1e:	bf5c      	itt	pl
   d6b20:	2201      	movpl	r2, #1
   d6b22:	601a      	strpl	r2, [r3, #0]
   d6b24:	4b12      	ldr	r3, [pc, #72]	; (d6b70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d6b26:	681a      	ldr	r2, [r3, #0]
   d6b28:	07d0      	lsls	r0, r2, #31
   d6b2a:	bf5c      	itt	pl
   d6b2c:	2201      	movpl	r2, #1
   d6b2e:	601a      	strpl	r2, [r3, #0]
   d6b30:	4b10      	ldr	r3, [pc, #64]	; (d6b74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d6b32:	681a      	ldr	r2, [r3, #0]
   d6b34:	07d1      	lsls	r1, r2, #31
   d6b36:	bf5c      	itt	pl
   d6b38:	2201      	movpl	r2, #1
   d6b3a:	601a      	strpl	r2, [r3, #0]
   d6b3c:	4b0e      	ldr	r3, [pc, #56]	; (d6b78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d6b3e:	681a      	ldr	r2, [r3, #0]
   d6b40:	07d2      	lsls	r2, r2, #31
   d6b42:	bf5c      	itt	pl
   d6b44:	2201      	movpl	r2, #1
   d6b46:	601a      	strpl	r2, [r3, #0]
   d6b48:	4770      	bx	lr
   d6b4a:	bf00      	nop
   d6b4c:	2003e77c 	.word	0x2003e77c
   d6b50:	2003e778 	.word	0x2003e778
   d6b54:	2003e774 	.word	0x2003e774
   d6b58:	2003e770 	.word	0x2003e770
   d6b5c:	2003e76c 	.word	0x2003e76c
   d6b60:	2003e768 	.word	0x2003e768
   d6b64:	2003e764 	.word	0x2003e764
   d6b68:	2003e760 	.word	0x2003e760
   d6b6c:	2003e75c 	.word	0x2003e75c
   d6b70:	2003e758 	.word	0x2003e758
   d6b74:	2003e754 	.word	0x2003e754
   d6b78:	2003e750 	.word	0x2003e750

000d6b7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6b7c:	4b18      	ldr	r3, [pc, #96]	; (d6be0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6b7e:	681a      	ldr	r2, [r3, #0]
   d6b80:	07d1      	lsls	r1, r2, #31
   d6b82:	bf5c      	itt	pl
   d6b84:	2201      	movpl	r2, #1
   d6b86:	601a      	strpl	r2, [r3, #0]
   d6b88:	4b16      	ldr	r3, [pc, #88]	; (d6be4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6b8a:	681a      	ldr	r2, [r3, #0]
   d6b8c:	07d2      	lsls	r2, r2, #31
   d6b8e:	bf5c      	itt	pl
   d6b90:	2201      	movpl	r2, #1
   d6b92:	601a      	strpl	r2, [r3, #0]
   d6b94:	4b14      	ldr	r3, [pc, #80]	; (d6be8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6b96:	681a      	ldr	r2, [r3, #0]
   d6b98:	07d0      	lsls	r0, r2, #31
   d6b9a:	bf5c      	itt	pl
   d6b9c:	2201      	movpl	r2, #1
   d6b9e:	601a      	strpl	r2, [r3, #0]
   d6ba0:	4b12      	ldr	r3, [pc, #72]	; (d6bec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6ba2:	681a      	ldr	r2, [r3, #0]
   d6ba4:	07d1      	lsls	r1, r2, #31
   d6ba6:	bf5c      	itt	pl
   d6ba8:	2201      	movpl	r2, #1
   d6baa:	601a      	strpl	r2, [r3, #0]
   d6bac:	4b10      	ldr	r3, [pc, #64]	; (d6bf0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6bae:	681a      	ldr	r2, [r3, #0]
   d6bb0:	07d2      	lsls	r2, r2, #31
   d6bb2:	bf5c      	itt	pl
   d6bb4:	2201      	movpl	r2, #1
   d6bb6:	601a      	strpl	r2, [r3, #0]
   d6bb8:	4b0e      	ldr	r3, [pc, #56]	; (d6bf4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6bba:	681a      	ldr	r2, [r3, #0]
   d6bbc:	07d0      	lsls	r0, r2, #31
   d6bbe:	bf5c      	itt	pl
   d6bc0:	2201      	movpl	r2, #1
   d6bc2:	601a      	strpl	r2, [r3, #0]
   d6bc4:	4b0c      	ldr	r3, [pc, #48]	; (d6bf8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6bc6:	681a      	ldr	r2, [r3, #0]
   d6bc8:	07d1      	lsls	r1, r2, #31
   d6bca:	bf5c      	itt	pl
   d6bcc:	2201      	movpl	r2, #1
   d6bce:	601a      	strpl	r2, [r3, #0]
   d6bd0:	4b0a      	ldr	r3, [pc, #40]	; (d6bfc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6bd2:	681a      	ldr	r2, [r3, #0]
   d6bd4:	07d2      	lsls	r2, r2, #31
   d6bd6:	bf5c      	itt	pl
   d6bd8:	2201      	movpl	r2, #1
   d6bda:	601a      	strpl	r2, [r3, #0]
   d6bdc:	4770      	bx	lr
   d6bde:	bf00      	nop
   d6be0:	2003e79c 	.word	0x2003e79c
   d6be4:	2003e798 	.word	0x2003e798
   d6be8:	2003e794 	.word	0x2003e794
   d6bec:	2003e790 	.word	0x2003e790
   d6bf0:	2003e78c 	.word	0x2003e78c
   d6bf4:	2003e788 	.word	0x2003e788
   d6bf8:	2003e784 	.word	0x2003e784
   d6bfc:	2003e780 	.word	0x2003e780

000d6c00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6c00:	4b18      	ldr	r3, [pc, #96]	; (d6c64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6c02:	681a      	ldr	r2, [r3, #0]
   d6c04:	07d1      	lsls	r1, r2, #31
   d6c06:	bf5c      	itt	pl
   d6c08:	2201      	movpl	r2, #1
   d6c0a:	601a      	strpl	r2, [r3, #0]
   d6c0c:	4b16      	ldr	r3, [pc, #88]	; (d6c68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6c0e:	681a      	ldr	r2, [r3, #0]
   d6c10:	07d2      	lsls	r2, r2, #31
   d6c12:	bf5c      	itt	pl
   d6c14:	2201      	movpl	r2, #1
   d6c16:	601a      	strpl	r2, [r3, #0]
   d6c18:	4b14      	ldr	r3, [pc, #80]	; (d6c6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6c1a:	681a      	ldr	r2, [r3, #0]
   d6c1c:	07d0      	lsls	r0, r2, #31
   d6c1e:	bf5c      	itt	pl
   d6c20:	2201      	movpl	r2, #1
   d6c22:	601a      	strpl	r2, [r3, #0]
   d6c24:	4b12      	ldr	r3, [pc, #72]	; (d6c70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6c26:	681a      	ldr	r2, [r3, #0]
   d6c28:	07d1      	lsls	r1, r2, #31
   d6c2a:	bf5c      	itt	pl
   d6c2c:	2201      	movpl	r2, #1
   d6c2e:	601a      	strpl	r2, [r3, #0]
   d6c30:	4b10      	ldr	r3, [pc, #64]	; (d6c74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6c32:	681a      	ldr	r2, [r3, #0]
   d6c34:	07d2      	lsls	r2, r2, #31
   d6c36:	bf5c      	itt	pl
   d6c38:	2201      	movpl	r2, #1
   d6c3a:	601a      	strpl	r2, [r3, #0]
   d6c3c:	4b0e      	ldr	r3, [pc, #56]	; (d6c78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6c3e:	681a      	ldr	r2, [r3, #0]
   d6c40:	07d0      	lsls	r0, r2, #31
   d6c42:	bf5c      	itt	pl
   d6c44:	2201      	movpl	r2, #1
   d6c46:	601a      	strpl	r2, [r3, #0]
   d6c48:	4b0c      	ldr	r3, [pc, #48]	; (d6c7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6c4a:	681a      	ldr	r2, [r3, #0]
   d6c4c:	07d1      	lsls	r1, r2, #31
   d6c4e:	bf5c      	itt	pl
   d6c50:	2201      	movpl	r2, #1
   d6c52:	601a      	strpl	r2, [r3, #0]
   d6c54:	4b0a      	ldr	r3, [pc, #40]	; (d6c80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6c56:	681a      	ldr	r2, [r3, #0]
   d6c58:	07d2      	lsls	r2, r2, #31
   d6c5a:	bf5c      	itt	pl
   d6c5c:	2201      	movpl	r2, #1
   d6c5e:	601a      	strpl	r2, [r3, #0]
   d6c60:	4770      	bx	lr
   d6c62:	bf00      	nop
   d6c64:	2003e7bc 	.word	0x2003e7bc
   d6c68:	2003e7b8 	.word	0x2003e7b8
   d6c6c:	2003e7b4 	.word	0x2003e7b4
   d6c70:	2003e7b0 	.word	0x2003e7b0
   d6c74:	2003e7ac 	.word	0x2003e7ac
   d6c78:	2003e7a8 	.word	0x2003e7a8
   d6c7c:	2003e7a4 	.word	0x2003e7a4
   d6c80:	2003e7a0 	.word	0x2003e7a0

000d6c84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d6c84:	4b24      	ldr	r3, [pc, #144]	; (d6d18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d6c86:	681a      	ldr	r2, [r3, #0]
   d6c88:	07d0      	lsls	r0, r2, #31
   d6c8a:	bf5c      	itt	pl
   d6c8c:	2201      	movpl	r2, #1
   d6c8e:	601a      	strpl	r2, [r3, #0]
   d6c90:	4b22      	ldr	r3, [pc, #136]	; (d6d1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d6c92:	681a      	ldr	r2, [r3, #0]
   d6c94:	07d1      	lsls	r1, r2, #31
   d6c96:	bf5c      	itt	pl
   d6c98:	2201      	movpl	r2, #1
   d6c9a:	601a      	strpl	r2, [r3, #0]
   d6c9c:	4b20      	ldr	r3, [pc, #128]	; (d6d20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d6c9e:	681a      	ldr	r2, [r3, #0]
   d6ca0:	07d2      	lsls	r2, r2, #31
   d6ca2:	bf5c      	itt	pl
   d6ca4:	2201      	movpl	r2, #1
   d6ca6:	601a      	strpl	r2, [r3, #0]
   d6ca8:	4b1e      	ldr	r3, [pc, #120]	; (d6d24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d6caa:	681a      	ldr	r2, [r3, #0]
   d6cac:	07d0      	lsls	r0, r2, #31
   d6cae:	bf5c      	itt	pl
   d6cb0:	2201      	movpl	r2, #1
   d6cb2:	601a      	strpl	r2, [r3, #0]
   d6cb4:	4b1c      	ldr	r3, [pc, #112]	; (d6d28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d6cb6:	681a      	ldr	r2, [r3, #0]
   d6cb8:	07d1      	lsls	r1, r2, #31
   d6cba:	bf5c      	itt	pl
   d6cbc:	2201      	movpl	r2, #1
   d6cbe:	601a      	strpl	r2, [r3, #0]
   d6cc0:	4b1a      	ldr	r3, [pc, #104]	; (d6d2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d6cc2:	681a      	ldr	r2, [r3, #0]
   d6cc4:	07d2      	lsls	r2, r2, #31
   d6cc6:	bf5c      	itt	pl
   d6cc8:	2201      	movpl	r2, #1
   d6cca:	601a      	strpl	r2, [r3, #0]
   d6ccc:	4b18      	ldr	r3, [pc, #96]	; (d6d30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d6cce:	681a      	ldr	r2, [r3, #0]
   d6cd0:	07d0      	lsls	r0, r2, #31
   d6cd2:	bf5c      	itt	pl
   d6cd4:	2201      	movpl	r2, #1
   d6cd6:	601a      	strpl	r2, [r3, #0]
   d6cd8:	4b16      	ldr	r3, [pc, #88]	; (d6d34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d6cda:	681a      	ldr	r2, [r3, #0]
   d6cdc:	07d1      	lsls	r1, r2, #31
   d6cde:	bf5c      	itt	pl
   d6ce0:	2201      	movpl	r2, #1
   d6ce2:	601a      	strpl	r2, [r3, #0]
   d6ce4:	4b14      	ldr	r3, [pc, #80]	; (d6d38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d6ce6:	681a      	ldr	r2, [r3, #0]
   d6ce8:	07d2      	lsls	r2, r2, #31
   d6cea:	bf5c      	itt	pl
   d6cec:	2201      	movpl	r2, #1
   d6cee:	601a      	strpl	r2, [r3, #0]
   d6cf0:	4b12      	ldr	r3, [pc, #72]	; (d6d3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d6cf2:	681a      	ldr	r2, [r3, #0]
   d6cf4:	07d0      	lsls	r0, r2, #31
   d6cf6:	bf5c      	itt	pl
   d6cf8:	2201      	movpl	r2, #1
   d6cfa:	601a      	strpl	r2, [r3, #0]
   d6cfc:	4b10      	ldr	r3, [pc, #64]	; (d6d40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d6cfe:	681a      	ldr	r2, [r3, #0]
   d6d00:	07d1      	lsls	r1, r2, #31
   d6d02:	bf5c      	itt	pl
   d6d04:	2201      	movpl	r2, #1
   d6d06:	601a      	strpl	r2, [r3, #0]
   d6d08:	4b0e      	ldr	r3, [pc, #56]	; (d6d44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d6d0a:	681a      	ldr	r2, [r3, #0]
   d6d0c:	07d2      	lsls	r2, r2, #31
   d6d0e:	bf5c      	itt	pl
   d6d10:	2201      	movpl	r2, #1
   d6d12:	601a      	strpl	r2, [r3, #0]
   d6d14:	4770      	bx	lr
   d6d16:	bf00      	nop
   d6d18:	2003e7ec 	.word	0x2003e7ec
   d6d1c:	2003e7e8 	.word	0x2003e7e8
   d6d20:	2003e7e4 	.word	0x2003e7e4
   d6d24:	2003e7e0 	.word	0x2003e7e0
   d6d28:	2003e7dc 	.word	0x2003e7dc
   d6d2c:	2003e7d8 	.word	0x2003e7d8
   d6d30:	2003e7d4 	.word	0x2003e7d4
   d6d34:	2003e7d0 	.word	0x2003e7d0
   d6d38:	2003e7cc 	.word	0x2003e7cc
   d6d3c:	2003e7c8 	.word	0x2003e7c8
   d6d40:	2003e7c4 	.word	0x2003e7c4
   d6d44:	2003e7c0 	.word	0x2003e7c0

000d6d48 <__aeabi_drsub>:
   d6d48:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d6d4c:	e002      	b.n	d6d54 <__adddf3>
   d6d4e:	bf00      	nop

000d6d50 <__aeabi_dsub>:
   d6d50:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d6d54 <__adddf3>:
   d6d54:	b530      	push	{r4, r5, lr}
   d6d56:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d6d5a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d6d5e:	ea94 0f05 	teq	r4, r5
   d6d62:	bf08      	it	eq
   d6d64:	ea90 0f02 	teqeq	r0, r2
   d6d68:	bf1f      	itttt	ne
   d6d6a:	ea54 0c00 	orrsne.w	ip, r4, r0
   d6d6e:	ea55 0c02 	orrsne.w	ip, r5, r2
   d6d72:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d6d76:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6d7a:	f000 80e2 	beq.w	d6f42 <__adddf3+0x1ee>
   d6d7e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d6d82:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d6d86:	bfb8      	it	lt
   d6d88:	426d      	neglt	r5, r5
   d6d8a:	dd0c      	ble.n	d6da6 <__adddf3+0x52>
   d6d8c:	442c      	add	r4, r5
   d6d8e:	ea80 0202 	eor.w	r2, r0, r2
   d6d92:	ea81 0303 	eor.w	r3, r1, r3
   d6d96:	ea82 0000 	eor.w	r0, r2, r0
   d6d9a:	ea83 0101 	eor.w	r1, r3, r1
   d6d9e:	ea80 0202 	eor.w	r2, r0, r2
   d6da2:	ea81 0303 	eor.w	r3, r1, r3
   d6da6:	2d36      	cmp	r5, #54	; 0x36
   d6da8:	bf88      	it	hi
   d6daa:	bd30      	pophi	{r4, r5, pc}
   d6dac:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6db0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6db4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d6db8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d6dbc:	d002      	beq.n	d6dc4 <__adddf3+0x70>
   d6dbe:	4240      	negs	r0, r0
   d6dc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6dc4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d6dc8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6dcc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d6dd0:	d002      	beq.n	d6dd8 <__adddf3+0x84>
   d6dd2:	4252      	negs	r2, r2
   d6dd4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d6dd8:	ea94 0f05 	teq	r4, r5
   d6ddc:	f000 80a7 	beq.w	d6f2e <__adddf3+0x1da>
   d6de0:	f1a4 0401 	sub.w	r4, r4, #1
   d6de4:	f1d5 0e20 	rsbs	lr, r5, #32
   d6de8:	db0d      	blt.n	d6e06 <__adddf3+0xb2>
   d6dea:	fa02 fc0e 	lsl.w	ip, r2, lr
   d6dee:	fa22 f205 	lsr.w	r2, r2, r5
   d6df2:	1880      	adds	r0, r0, r2
   d6df4:	f141 0100 	adc.w	r1, r1, #0
   d6df8:	fa03 f20e 	lsl.w	r2, r3, lr
   d6dfc:	1880      	adds	r0, r0, r2
   d6dfe:	fa43 f305 	asr.w	r3, r3, r5
   d6e02:	4159      	adcs	r1, r3
   d6e04:	e00e      	b.n	d6e24 <__adddf3+0xd0>
   d6e06:	f1a5 0520 	sub.w	r5, r5, #32
   d6e0a:	f10e 0e20 	add.w	lr, lr, #32
   d6e0e:	2a01      	cmp	r2, #1
   d6e10:	fa03 fc0e 	lsl.w	ip, r3, lr
   d6e14:	bf28      	it	cs
   d6e16:	f04c 0c02 	orrcs.w	ip, ip, #2
   d6e1a:	fa43 f305 	asr.w	r3, r3, r5
   d6e1e:	18c0      	adds	r0, r0, r3
   d6e20:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d6e24:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6e28:	d507      	bpl.n	d6e3a <__adddf3+0xe6>
   d6e2a:	f04f 0e00 	mov.w	lr, #0
   d6e2e:	f1dc 0c00 	rsbs	ip, ip, #0
   d6e32:	eb7e 0000 	sbcs.w	r0, lr, r0
   d6e36:	eb6e 0101 	sbc.w	r1, lr, r1
   d6e3a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d6e3e:	d31b      	bcc.n	d6e78 <__adddf3+0x124>
   d6e40:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d6e44:	d30c      	bcc.n	d6e60 <__adddf3+0x10c>
   d6e46:	0849      	lsrs	r1, r1, #1
   d6e48:	ea5f 0030 	movs.w	r0, r0, rrx
   d6e4c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d6e50:	f104 0401 	add.w	r4, r4, #1
   d6e54:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d6e58:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d6e5c:	f080 809a 	bcs.w	d6f94 <__adddf3+0x240>
   d6e60:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d6e64:	bf08      	it	eq
   d6e66:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6e6a:	f150 0000 	adcs.w	r0, r0, #0
   d6e6e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6e72:	ea41 0105 	orr.w	r1, r1, r5
   d6e76:	bd30      	pop	{r4, r5, pc}
   d6e78:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d6e7c:	4140      	adcs	r0, r0
   d6e7e:	eb41 0101 	adc.w	r1, r1, r1
   d6e82:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6e86:	f1a4 0401 	sub.w	r4, r4, #1
   d6e8a:	d1e9      	bne.n	d6e60 <__adddf3+0x10c>
   d6e8c:	f091 0f00 	teq	r1, #0
   d6e90:	bf04      	itt	eq
   d6e92:	4601      	moveq	r1, r0
   d6e94:	2000      	moveq	r0, #0
   d6e96:	fab1 f381 	clz	r3, r1
   d6e9a:	bf08      	it	eq
   d6e9c:	3320      	addeq	r3, #32
   d6e9e:	f1a3 030b 	sub.w	r3, r3, #11
   d6ea2:	f1b3 0220 	subs.w	r2, r3, #32
   d6ea6:	da0c      	bge.n	d6ec2 <__adddf3+0x16e>
   d6ea8:	320c      	adds	r2, #12
   d6eaa:	dd08      	ble.n	d6ebe <__adddf3+0x16a>
   d6eac:	f102 0c14 	add.w	ip, r2, #20
   d6eb0:	f1c2 020c 	rsb	r2, r2, #12
   d6eb4:	fa01 f00c 	lsl.w	r0, r1, ip
   d6eb8:	fa21 f102 	lsr.w	r1, r1, r2
   d6ebc:	e00c      	b.n	d6ed8 <__adddf3+0x184>
   d6ebe:	f102 0214 	add.w	r2, r2, #20
   d6ec2:	bfd8      	it	le
   d6ec4:	f1c2 0c20 	rsble	ip, r2, #32
   d6ec8:	fa01 f102 	lsl.w	r1, r1, r2
   d6ecc:	fa20 fc0c 	lsr.w	ip, r0, ip
   d6ed0:	bfdc      	itt	le
   d6ed2:	ea41 010c 	orrle.w	r1, r1, ip
   d6ed6:	4090      	lslle	r0, r2
   d6ed8:	1ae4      	subs	r4, r4, r3
   d6eda:	bfa2      	ittt	ge
   d6edc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d6ee0:	4329      	orrge	r1, r5
   d6ee2:	bd30      	popge	{r4, r5, pc}
   d6ee4:	ea6f 0404 	mvn.w	r4, r4
   d6ee8:	3c1f      	subs	r4, #31
   d6eea:	da1c      	bge.n	d6f26 <__adddf3+0x1d2>
   d6eec:	340c      	adds	r4, #12
   d6eee:	dc0e      	bgt.n	d6f0e <__adddf3+0x1ba>
   d6ef0:	f104 0414 	add.w	r4, r4, #20
   d6ef4:	f1c4 0220 	rsb	r2, r4, #32
   d6ef8:	fa20 f004 	lsr.w	r0, r0, r4
   d6efc:	fa01 f302 	lsl.w	r3, r1, r2
   d6f00:	ea40 0003 	orr.w	r0, r0, r3
   d6f04:	fa21 f304 	lsr.w	r3, r1, r4
   d6f08:	ea45 0103 	orr.w	r1, r5, r3
   d6f0c:	bd30      	pop	{r4, r5, pc}
   d6f0e:	f1c4 040c 	rsb	r4, r4, #12
   d6f12:	f1c4 0220 	rsb	r2, r4, #32
   d6f16:	fa20 f002 	lsr.w	r0, r0, r2
   d6f1a:	fa01 f304 	lsl.w	r3, r1, r4
   d6f1e:	ea40 0003 	orr.w	r0, r0, r3
   d6f22:	4629      	mov	r1, r5
   d6f24:	bd30      	pop	{r4, r5, pc}
   d6f26:	fa21 f004 	lsr.w	r0, r1, r4
   d6f2a:	4629      	mov	r1, r5
   d6f2c:	bd30      	pop	{r4, r5, pc}
   d6f2e:	f094 0f00 	teq	r4, #0
   d6f32:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d6f36:	bf06      	itte	eq
   d6f38:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d6f3c:	3401      	addeq	r4, #1
   d6f3e:	3d01      	subne	r5, #1
   d6f40:	e74e      	b.n	d6de0 <__adddf3+0x8c>
   d6f42:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6f46:	bf18      	it	ne
   d6f48:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6f4c:	d029      	beq.n	d6fa2 <__adddf3+0x24e>
   d6f4e:	ea94 0f05 	teq	r4, r5
   d6f52:	bf08      	it	eq
   d6f54:	ea90 0f02 	teqeq	r0, r2
   d6f58:	d005      	beq.n	d6f66 <__adddf3+0x212>
   d6f5a:	ea54 0c00 	orrs.w	ip, r4, r0
   d6f5e:	bf04      	itt	eq
   d6f60:	4619      	moveq	r1, r3
   d6f62:	4610      	moveq	r0, r2
   d6f64:	bd30      	pop	{r4, r5, pc}
   d6f66:	ea91 0f03 	teq	r1, r3
   d6f6a:	bf1e      	ittt	ne
   d6f6c:	2100      	movne	r1, #0
   d6f6e:	2000      	movne	r0, #0
   d6f70:	bd30      	popne	{r4, r5, pc}
   d6f72:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d6f76:	d105      	bne.n	d6f84 <__adddf3+0x230>
   d6f78:	0040      	lsls	r0, r0, #1
   d6f7a:	4149      	adcs	r1, r1
   d6f7c:	bf28      	it	cs
   d6f7e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d6f82:	bd30      	pop	{r4, r5, pc}
   d6f84:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d6f88:	bf3c      	itt	cc
   d6f8a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d6f8e:	bd30      	popcc	{r4, r5, pc}
   d6f90:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6f94:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d6f98:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6f9c:	f04f 0000 	mov.w	r0, #0
   d6fa0:	bd30      	pop	{r4, r5, pc}
   d6fa2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6fa6:	bf1a      	itte	ne
   d6fa8:	4619      	movne	r1, r3
   d6faa:	4610      	movne	r0, r2
   d6fac:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d6fb0:	bf1c      	itt	ne
   d6fb2:	460b      	movne	r3, r1
   d6fb4:	4602      	movne	r2, r0
   d6fb6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6fba:	bf06      	itte	eq
   d6fbc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d6fc0:	ea91 0f03 	teqeq	r1, r3
   d6fc4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d6fc8:	bd30      	pop	{r4, r5, pc}
   d6fca:	bf00      	nop

000d6fcc <__aeabi_ui2d>:
   d6fcc:	f090 0f00 	teq	r0, #0
   d6fd0:	bf04      	itt	eq
   d6fd2:	2100      	moveq	r1, #0
   d6fd4:	4770      	bxeq	lr
   d6fd6:	b530      	push	{r4, r5, lr}
   d6fd8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6fdc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6fe0:	f04f 0500 	mov.w	r5, #0
   d6fe4:	f04f 0100 	mov.w	r1, #0
   d6fe8:	e750      	b.n	d6e8c <__adddf3+0x138>
   d6fea:	bf00      	nop

000d6fec <__aeabi_i2d>:
   d6fec:	f090 0f00 	teq	r0, #0
   d6ff0:	bf04      	itt	eq
   d6ff2:	2100      	moveq	r1, #0
   d6ff4:	4770      	bxeq	lr
   d6ff6:	b530      	push	{r4, r5, lr}
   d6ff8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6ffc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7000:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d7004:	bf48      	it	mi
   d7006:	4240      	negmi	r0, r0
   d7008:	f04f 0100 	mov.w	r1, #0
   d700c:	e73e      	b.n	d6e8c <__adddf3+0x138>
   d700e:	bf00      	nop

000d7010 <__aeabi_f2d>:
   d7010:	0042      	lsls	r2, r0, #1
   d7012:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d7016:	ea4f 0131 	mov.w	r1, r1, rrx
   d701a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d701e:	bf1f      	itttt	ne
   d7020:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d7024:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d7028:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d702c:	4770      	bxne	lr
   d702e:	f092 0f00 	teq	r2, #0
   d7032:	bf14      	ite	ne
   d7034:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d7038:	4770      	bxeq	lr
   d703a:	b530      	push	{r4, r5, lr}
   d703c:	f44f 7460 	mov.w	r4, #896	; 0x380
   d7040:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7044:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d7048:	e720      	b.n	d6e8c <__adddf3+0x138>
   d704a:	bf00      	nop

000d704c <__aeabi_ul2d>:
   d704c:	ea50 0201 	orrs.w	r2, r0, r1
   d7050:	bf08      	it	eq
   d7052:	4770      	bxeq	lr
   d7054:	b530      	push	{r4, r5, lr}
   d7056:	f04f 0500 	mov.w	r5, #0
   d705a:	e00a      	b.n	d7072 <__aeabi_l2d+0x16>

000d705c <__aeabi_l2d>:
   d705c:	ea50 0201 	orrs.w	r2, r0, r1
   d7060:	bf08      	it	eq
   d7062:	4770      	bxeq	lr
   d7064:	b530      	push	{r4, r5, lr}
   d7066:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d706a:	d502      	bpl.n	d7072 <__aeabi_l2d+0x16>
   d706c:	4240      	negs	r0, r0
   d706e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d7072:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7076:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d707a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d707e:	f43f aedc 	beq.w	d6e3a <__adddf3+0xe6>
   d7082:	f04f 0203 	mov.w	r2, #3
   d7086:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d708a:	bf18      	it	ne
   d708c:	3203      	addne	r2, #3
   d708e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d7092:	bf18      	it	ne
   d7094:	3203      	addne	r2, #3
   d7096:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d709a:	f1c2 0320 	rsb	r3, r2, #32
   d709e:	fa00 fc03 	lsl.w	ip, r0, r3
   d70a2:	fa20 f002 	lsr.w	r0, r0, r2
   d70a6:	fa01 fe03 	lsl.w	lr, r1, r3
   d70aa:	ea40 000e 	orr.w	r0, r0, lr
   d70ae:	fa21 f102 	lsr.w	r1, r1, r2
   d70b2:	4414      	add	r4, r2
   d70b4:	e6c1      	b.n	d6e3a <__adddf3+0xe6>
   d70b6:	bf00      	nop

000d70b8 <__aeabi_dmul>:
   d70b8:	b570      	push	{r4, r5, r6, lr}
   d70ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d70be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d70c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d70c6:	bf1d      	ittte	ne
   d70c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d70cc:	ea94 0f0c 	teqne	r4, ip
   d70d0:	ea95 0f0c 	teqne	r5, ip
   d70d4:	f000 f8de 	bleq	d7294 <__aeabi_dmul+0x1dc>
   d70d8:	442c      	add	r4, r5
   d70da:	ea81 0603 	eor.w	r6, r1, r3
   d70de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d70e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d70e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d70ea:	bf18      	it	ne
   d70ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d70f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d70f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d70f8:	d038      	beq.n	d716c <__aeabi_dmul+0xb4>
   d70fa:	fba0 ce02 	umull	ip, lr, r0, r2
   d70fe:	f04f 0500 	mov.w	r5, #0
   d7102:	fbe1 e502 	umlal	lr, r5, r1, r2
   d7106:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d710a:	fbe0 e503 	umlal	lr, r5, r0, r3
   d710e:	f04f 0600 	mov.w	r6, #0
   d7112:	fbe1 5603 	umlal	r5, r6, r1, r3
   d7116:	f09c 0f00 	teq	ip, #0
   d711a:	bf18      	it	ne
   d711c:	f04e 0e01 	orrne.w	lr, lr, #1
   d7120:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d7124:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d7128:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d712c:	d204      	bcs.n	d7138 <__aeabi_dmul+0x80>
   d712e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d7132:	416d      	adcs	r5, r5
   d7134:	eb46 0606 	adc.w	r6, r6, r6
   d7138:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d713c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d7140:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d7144:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d7148:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d714c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d7150:	bf88      	it	hi
   d7152:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d7156:	d81e      	bhi.n	d7196 <__aeabi_dmul+0xde>
   d7158:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d715c:	bf08      	it	eq
   d715e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d7162:	f150 0000 	adcs.w	r0, r0, #0
   d7166:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d716a:	bd70      	pop	{r4, r5, r6, pc}
   d716c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d7170:	ea46 0101 	orr.w	r1, r6, r1
   d7174:	ea40 0002 	orr.w	r0, r0, r2
   d7178:	ea81 0103 	eor.w	r1, r1, r3
   d717c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d7180:	bfc2      	ittt	gt
   d7182:	ebd4 050c 	rsbsgt	r5, r4, ip
   d7186:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d718a:	bd70      	popgt	{r4, r5, r6, pc}
   d718c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7190:	f04f 0e00 	mov.w	lr, #0
   d7194:	3c01      	subs	r4, #1
   d7196:	f300 80ab 	bgt.w	d72f0 <__aeabi_dmul+0x238>
   d719a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d719e:	bfde      	ittt	le
   d71a0:	2000      	movle	r0, #0
   d71a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d71a6:	bd70      	pople	{r4, r5, r6, pc}
   d71a8:	f1c4 0400 	rsb	r4, r4, #0
   d71ac:	3c20      	subs	r4, #32
   d71ae:	da35      	bge.n	d721c <__aeabi_dmul+0x164>
   d71b0:	340c      	adds	r4, #12
   d71b2:	dc1b      	bgt.n	d71ec <__aeabi_dmul+0x134>
   d71b4:	f104 0414 	add.w	r4, r4, #20
   d71b8:	f1c4 0520 	rsb	r5, r4, #32
   d71bc:	fa00 f305 	lsl.w	r3, r0, r5
   d71c0:	fa20 f004 	lsr.w	r0, r0, r4
   d71c4:	fa01 f205 	lsl.w	r2, r1, r5
   d71c8:	ea40 0002 	orr.w	r0, r0, r2
   d71cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d71d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d71d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d71d8:	fa21 f604 	lsr.w	r6, r1, r4
   d71dc:	eb42 0106 	adc.w	r1, r2, r6
   d71e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d71e4:	bf08      	it	eq
   d71e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d71ea:	bd70      	pop	{r4, r5, r6, pc}
   d71ec:	f1c4 040c 	rsb	r4, r4, #12
   d71f0:	f1c4 0520 	rsb	r5, r4, #32
   d71f4:	fa00 f304 	lsl.w	r3, r0, r4
   d71f8:	fa20 f005 	lsr.w	r0, r0, r5
   d71fc:	fa01 f204 	lsl.w	r2, r1, r4
   d7200:	ea40 0002 	orr.w	r0, r0, r2
   d7204:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7208:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d720c:	f141 0100 	adc.w	r1, r1, #0
   d7210:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7214:	bf08      	it	eq
   d7216:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d721a:	bd70      	pop	{r4, r5, r6, pc}
   d721c:	f1c4 0520 	rsb	r5, r4, #32
   d7220:	fa00 f205 	lsl.w	r2, r0, r5
   d7224:	ea4e 0e02 	orr.w	lr, lr, r2
   d7228:	fa20 f304 	lsr.w	r3, r0, r4
   d722c:	fa01 f205 	lsl.w	r2, r1, r5
   d7230:	ea43 0302 	orr.w	r3, r3, r2
   d7234:	fa21 f004 	lsr.w	r0, r1, r4
   d7238:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d723c:	fa21 f204 	lsr.w	r2, r1, r4
   d7240:	ea20 0002 	bic.w	r0, r0, r2
   d7244:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d7248:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d724c:	bf08      	it	eq
   d724e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7252:	bd70      	pop	{r4, r5, r6, pc}
   d7254:	f094 0f00 	teq	r4, #0
   d7258:	d10f      	bne.n	d727a <__aeabi_dmul+0x1c2>
   d725a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d725e:	0040      	lsls	r0, r0, #1
   d7260:	eb41 0101 	adc.w	r1, r1, r1
   d7264:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7268:	bf08      	it	eq
   d726a:	3c01      	subeq	r4, #1
   d726c:	d0f7      	beq.n	d725e <__aeabi_dmul+0x1a6>
   d726e:	ea41 0106 	orr.w	r1, r1, r6
   d7272:	f095 0f00 	teq	r5, #0
   d7276:	bf18      	it	ne
   d7278:	4770      	bxne	lr
   d727a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d727e:	0052      	lsls	r2, r2, #1
   d7280:	eb43 0303 	adc.w	r3, r3, r3
   d7284:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d7288:	bf08      	it	eq
   d728a:	3d01      	subeq	r5, #1
   d728c:	d0f7      	beq.n	d727e <__aeabi_dmul+0x1c6>
   d728e:	ea43 0306 	orr.w	r3, r3, r6
   d7292:	4770      	bx	lr
   d7294:	ea94 0f0c 	teq	r4, ip
   d7298:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d729c:	bf18      	it	ne
   d729e:	ea95 0f0c 	teqne	r5, ip
   d72a2:	d00c      	beq.n	d72be <__aeabi_dmul+0x206>
   d72a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d72a8:	bf18      	it	ne
   d72aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d72ae:	d1d1      	bne.n	d7254 <__aeabi_dmul+0x19c>
   d72b0:	ea81 0103 	eor.w	r1, r1, r3
   d72b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d72b8:	f04f 0000 	mov.w	r0, #0
   d72bc:	bd70      	pop	{r4, r5, r6, pc}
   d72be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d72c2:	bf06      	itte	eq
   d72c4:	4610      	moveq	r0, r2
   d72c6:	4619      	moveq	r1, r3
   d72c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d72cc:	d019      	beq.n	d7302 <__aeabi_dmul+0x24a>
   d72ce:	ea94 0f0c 	teq	r4, ip
   d72d2:	d102      	bne.n	d72da <__aeabi_dmul+0x222>
   d72d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d72d8:	d113      	bne.n	d7302 <__aeabi_dmul+0x24a>
   d72da:	ea95 0f0c 	teq	r5, ip
   d72de:	d105      	bne.n	d72ec <__aeabi_dmul+0x234>
   d72e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d72e4:	bf1c      	itt	ne
   d72e6:	4610      	movne	r0, r2
   d72e8:	4619      	movne	r1, r3
   d72ea:	d10a      	bne.n	d7302 <__aeabi_dmul+0x24a>
   d72ec:	ea81 0103 	eor.w	r1, r1, r3
   d72f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d72f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d72f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d72fc:	f04f 0000 	mov.w	r0, #0
   d7300:	bd70      	pop	{r4, r5, r6, pc}
   d7302:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d7306:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d730a:	bd70      	pop	{r4, r5, r6, pc}

000d730c <__aeabi_ddiv>:
   d730c:	b570      	push	{r4, r5, r6, lr}
   d730e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d7312:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d7316:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d731a:	bf1d      	ittte	ne
   d731c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d7320:	ea94 0f0c 	teqne	r4, ip
   d7324:	ea95 0f0c 	teqne	r5, ip
   d7328:	f000 f8a7 	bleq	d747a <__aeabi_ddiv+0x16e>
   d732c:	eba4 0405 	sub.w	r4, r4, r5
   d7330:	ea81 0e03 	eor.w	lr, r1, r3
   d7334:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d7338:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d733c:	f000 8088 	beq.w	d7450 <__aeabi_ddiv+0x144>
   d7340:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d7344:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d7348:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d734c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d7350:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d7354:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d7358:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d735c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d7360:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d7364:	429d      	cmp	r5, r3
   d7366:	bf08      	it	eq
   d7368:	4296      	cmpeq	r6, r2
   d736a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d736e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d7372:	d202      	bcs.n	d737a <__aeabi_ddiv+0x6e>
   d7374:	085b      	lsrs	r3, r3, #1
   d7376:	ea4f 0232 	mov.w	r2, r2, rrx
   d737a:	1ab6      	subs	r6, r6, r2
   d737c:	eb65 0503 	sbc.w	r5, r5, r3
   d7380:	085b      	lsrs	r3, r3, #1
   d7382:	ea4f 0232 	mov.w	r2, r2, rrx
   d7386:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d738a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d738e:	ebb6 0e02 	subs.w	lr, r6, r2
   d7392:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7396:	bf22      	ittt	cs
   d7398:	1ab6      	subcs	r6, r6, r2
   d739a:	4675      	movcs	r5, lr
   d739c:	ea40 000c 	orrcs.w	r0, r0, ip
   d73a0:	085b      	lsrs	r3, r3, #1
   d73a2:	ea4f 0232 	mov.w	r2, r2, rrx
   d73a6:	ebb6 0e02 	subs.w	lr, r6, r2
   d73aa:	eb75 0e03 	sbcs.w	lr, r5, r3
   d73ae:	bf22      	ittt	cs
   d73b0:	1ab6      	subcs	r6, r6, r2
   d73b2:	4675      	movcs	r5, lr
   d73b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d73b8:	085b      	lsrs	r3, r3, #1
   d73ba:	ea4f 0232 	mov.w	r2, r2, rrx
   d73be:	ebb6 0e02 	subs.w	lr, r6, r2
   d73c2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d73c6:	bf22      	ittt	cs
   d73c8:	1ab6      	subcs	r6, r6, r2
   d73ca:	4675      	movcs	r5, lr
   d73cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d73d0:	085b      	lsrs	r3, r3, #1
   d73d2:	ea4f 0232 	mov.w	r2, r2, rrx
   d73d6:	ebb6 0e02 	subs.w	lr, r6, r2
   d73da:	eb75 0e03 	sbcs.w	lr, r5, r3
   d73de:	bf22      	ittt	cs
   d73e0:	1ab6      	subcs	r6, r6, r2
   d73e2:	4675      	movcs	r5, lr
   d73e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d73e8:	ea55 0e06 	orrs.w	lr, r5, r6
   d73ec:	d018      	beq.n	d7420 <__aeabi_ddiv+0x114>
   d73ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d73f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d73f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d73fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d73fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d7402:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d7406:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d740a:	d1c0      	bne.n	d738e <__aeabi_ddiv+0x82>
   d740c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7410:	d10b      	bne.n	d742a <__aeabi_ddiv+0x11e>
   d7412:	ea41 0100 	orr.w	r1, r1, r0
   d7416:	f04f 0000 	mov.w	r0, #0
   d741a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d741e:	e7b6      	b.n	d738e <__aeabi_ddiv+0x82>
   d7420:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7424:	bf04      	itt	eq
   d7426:	4301      	orreq	r1, r0
   d7428:	2000      	moveq	r0, #0
   d742a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d742e:	bf88      	it	hi
   d7430:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d7434:	f63f aeaf 	bhi.w	d7196 <__aeabi_dmul+0xde>
   d7438:	ebb5 0c03 	subs.w	ip, r5, r3
   d743c:	bf04      	itt	eq
   d743e:	ebb6 0c02 	subseq.w	ip, r6, r2
   d7442:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d7446:	f150 0000 	adcs.w	r0, r0, #0
   d744a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d744e:	bd70      	pop	{r4, r5, r6, pc}
   d7450:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d7454:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d7458:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d745c:	bfc2      	ittt	gt
   d745e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d7462:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d7466:	bd70      	popgt	{r4, r5, r6, pc}
   d7468:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d746c:	f04f 0e00 	mov.w	lr, #0
   d7470:	3c01      	subs	r4, #1
   d7472:	e690      	b.n	d7196 <__aeabi_dmul+0xde>
   d7474:	ea45 0e06 	orr.w	lr, r5, r6
   d7478:	e68d      	b.n	d7196 <__aeabi_dmul+0xde>
   d747a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d747e:	ea94 0f0c 	teq	r4, ip
   d7482:	bf08      	it	eq
   d7484:	ea95 0f0c 	teqeq	r5, ip
   d7488:	f43f af3b 	beq.w	d7302 <__aeabi_dmul+0x24a>
   d748c:	ea94 0f0c 	teq	r4, ip
   d7490:	d10a      	bne.n	d74a8 <__aeabi_ddiv+0x19c>
   d7492:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d7496:	f47f af34 	bne.w	d7302 <__aeabi_dmul+0x24a>
   d749a:	ea95 0f0c 	teq	r5, ip
   d749e:	f47f af25 	bne.w	d72ec <__aeabi_dmul+0x234>
   d74a2:	4610      	mov	r0, r2
   d74a4:	4619      	mov	r1, r3
   d74a6:	e72c      	b.n	d7302 <__aeabi_dmul+0x24a>
   d74a8:	ea95 0f0c 	teq	r5, ip
   d74ac:	d106      	bne.n	d74bc <__aeabi_ddiv+0x1b0>
   d74ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d74b2:	f43f aefd 	beq.w	d72b0 <__aeabi_dmul+0x1f8>
   d74b6:	4610      	mov	r0, r2
   d74b8:	4619      	mov	r1, r3
   d74ba:	e722      	b.n	d7302 <__aeabi_dmul+0x24a>
   d74bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d74c0:	bf18      	it	ne
   d74c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d74c6:	f47f aec5 	bne.w	d7254 <__aeabi_dmul+0x19c>
   d74ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d74ce:	f47f af0d 	bne.w	d72ec <__aeabi_dmul+0x234>
   d74d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d74d6:	f47f aeeb 	bne.w	d72b0 <__aeabi_dmul+0x1f8>
   d74da:	e712      	b.n	d7302 <__aeabi_dmul+0x24a>

000d74dc <__gedf2>:
   d74dc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d74e0:	e006      	b.n	d74f0 <__cmpdf2+0x4>
   d74e2:	bf00      	nop

000d74e4 <__ledf2>:
   d74e4:	f04f 0c01 	mov.w	ip, #1
   d74e8:	e002      	b.n	d74f0 <__cmpdf2+0x4>
   d74ea:	bf00      	nop

000d74ec <__cmpdf2>:
   d74ec:	f04f 0c01 	mov.w	ip, #1
   d74f0:	f84d cd04 	str.w	ip, [sp, #-4]!
   d74f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d74f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d74fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d7500:	bf18      	it	ne
   d7502:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d7506:	d01b      	beq.n	d7540 <__cmpdf2+0x54>
   d7508:	b001      	add	sp, #4
   d750a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d750e:	bf0c      	ite	eq
   d7510:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d7514:	ea91 0f03 	teqne	r1, r3
   d7518:	bf02      	ittt	eq
   d751a:	ea90 0f02 	teqeq	r0, r2
   d751e:	2000      	moveq	r0, #0
   d7520:	4770      	bxeq	lr
   d7522:	f110 0f00 	cmn.w	r0, #0
   d7526:	ea91 0f03 	teq	r1, r3
   d752a:	bf58      	it	pl
   d752c:	4299      	cmppl	r1, r3
   d752e:	bf08      	it	eq
   d7530:	4290      	cmpeq	r0, r2
   d7532:	bf2c      	ite	cs
   d7534:	17d8      	asrcs	r0, r3, #31
   d7536:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d753a:	f040 0001 	orr.w	r0, r0, #1
   d753e:	4770      	bx	lr
   d7540:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d7544:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7548:	d102      	bne.n	d7550 <__cmpdf2+0x64>
   d754a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d754e:	d107      	bne.n	d7560 <__cmpdf2+0x74>
   d7550:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d7554:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7558:	d1d6      	bne.n	d7508 <__cmpdf2+0x1c>
   d755a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d755e:	d0d3      	beq.n	d7508 <__cmpdf2+0x1c>
   d7560:	f85d 0b04 	ldr.w	r0, [sp], #4
   d7564:	4770      	bx	lr
   d7566:	bf00      	nop

000d7568 <__aeabi_cdrcmple>:
   d7568:	4684      	mov	ip, r0
   d756a:	4610      	mov	r0, r2
   d756c:	4662      	mov	r2, ip
   d756e:	468c      	mov	ip, r1
   d7570:	4619      	mov	r1, r3
   d7572:	4663      	mov	r3, ip
   d7574:	e000      	b.n	d7578 <__aeabi_cdcmpeq>
   d7576:	bf00      	nop

000d7578 <__aeabi_cdcmpeq>:
   d7578:	b501      	push	{r0, lr}
   d757a:	f7ff ffb7 	bl	d74ec <__cmpdf2>
   d757e:	2800      	cmp	r0, #0
   d7580:	bf48      	it	mi
   d7582:	f110 0f00 	cmnmi.w	r0, #0
   d7586:	bd01      	pop	{r0, pc}

000d7588 <__aeabi_dcmpeq>:
   d7588:	f84d ed08 	str.w	lr, [sp, #-8]!
   d758c:	f7ff fff4 	bl	d7578 <__aeabi_cdcmpeq>
   d7590:	bf0c      	ite	eq
   d7592:	2001      	moveq	r0, #1
   d7594:	2000      	movne	r0, #0
   d7596:	f85d fb08 	ldr.w	pc, [sp], #8
   d759a:	bf00      	nop

000d759c <__aeabi_dcmplt>:
   d759c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d75a0:	f7ff ffea 	bl	d7578 <__aeabi_cdcmpeq>
   d75a4:	bf34      	ite	cc
   d75a6:	2001      	movcc	r0, #1
   d75a8:	2000      	movcs	r0, #0
   d75aa:	f85d fb08 	ldr.w	pc, [sp], #8
   d75ae:	bf00      	nop

000d75b0 <__aeabi_dcmple>:
   d75b0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d75b4:	f7ff ffe0 	bl	d7578 <__aeabi_cdcmpeq>
   d75b8:	bf94      	ite	ls
   d75ba:	2001      	movls	r0, #1
   d75bc:	2000      	movhi	r0, #0
   d75be:	f85d fb08 	ldr.w	pc, [sp], #8
   d75c2:	bf00      	nop

000d75c4 <__aeabi_dcmpge>:
   d75c4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d75c8:	f7ff ffce 	bl	d7568 <__aeabi_cdrcmple>
   d75cc:	bf94      	ite	ls
   d75ce:	2001      	movls	r0, #1
   d75d0:	2000      	movhi	r0, #0
   d75d2:	f85d fb08 	ldr.w	pc, [sp], #8
   d75d6:	bf00      	nop

000d75d8 <__aeabi_dcmpgt>:
   d75d8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d75dc:	f7ff ffc4 	bl	d7568 <__aeabi_cdrcmple>
   d75e0:	bf34      	ite	cc
   d75e2:	2001      	movcc	r0, #1
   d75e4:	2000      	movcs	r0, #0
   d75e6:	f85d fb08 	ldr.w	pc, [sp], #8
   d75ea:	bf00      	nop

000d75ec <__aeabi_dcmpun>:
   d75ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d75f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d75f4:	d102      	bne.n	d75fc <__aeabi_dcmpun+0x10>
   d75f6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d75fa:	d10a      	bne.n	d7612 <__aeabi_dcmpun+0x26>
   d75fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d7600:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7604:	d102      	bne.n	d760c <__aeabi_dcmpun+0x20>
   d7606:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d760a:	d102      	bne.n	d7612 <__aeabi_dcmpun+0x26>
   d760c:	f04f 0000 	mov.w	r0, #0
   d7610:	4770      	bx	lr
   d7612:	f04f 0001 	mov.w	r0, #1
   d7616:	4770      	bx	lr

000d7618 <__aeabi_d2iz>:
   d7618:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d761c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d7620:	d215      	bcs.n	d764e <__aeabi_d2iz+0x36>
   d7622:	d511      	bpl.n	d7648 <__aeabi_d2iz+0x30>
   d7624:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d7628:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d762c:	d912      	bls.n	d7654 <__aeabi_d2iz+0x3c>
   d762e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d7632:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d7636:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d763a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d763e:	fa23 f002 	lsr.w	r0, r3, r2
   d7642:	bf18      	it	ne
   d7644:	4240      	negne	r0, r0
   d7646:	4770      	bx	lr
   d7648:	f04f 0000 	mov.w	r0, #0
   d764c:	4770      	bx	lr
   d764e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d7652:	d105      	bne.n	d7660 <__aeabi_d2iz+0x48>
   d7654:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d7658:	bf08      	it	eq
   d765a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d765e:	4770      	bx	lr
   d7660:	f04f 0000 	mov.w	r0, #0
   d7664:	4770      	bx	lr
   d7666:	bf00      	nop

000d7668 <__aeabi_d2uiz>:
   d7668:	004a      	lsls	r2, r1, #1
   d766a:	d211      	bcs.n	d7690 <__aeabi_d2uiz+0x28>
   d766c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d7670:	d211      	bcs.n	d7696 <__aeabi_d2uiz+0x2e>
   d7672:	d50d      	bpl.n	d7690 <__aeabi_d2uiz+0x28>
   d7674:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d7678:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d767c:	d40e      	bmi.n	d769c <__aeabi_d2uiz+0x34>
   d767e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d7682:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d7686:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d768a:	fa23 f002 	lsr.w	r0, r3, r2
   d768e:	4770      	bx	lr
   d7690:	f04f 0000 	mov.w	r0, #0
   d7694:	4770      	bx	lr
   d7696:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d769a:	d102      	bne.n	d76a2 <__aeabi_d2uiz+0x3a>
   d769c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d76a0:	4770      	bx	lr
   d76a2:	f04f 0000 	mov.w	r0, #0
   d76a6:	4770      	bx	lr

000d76a8 <__aeabi_d2f>:
   d76a8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d76ac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d76b0:	bf24      	itt	cs
   d76b2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d76b6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d76ba:	d90d      	bls.n	d76d8 <__aeabi_d2f+0x30>
   d76bc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d76c0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d76c4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d76c8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d76cc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d76d0:	bf08      	it	eq
   d76d2:	f020 0001 	biceq.w	r0, r0, #1
   d76d6:	4770      	bx	lr
   d76d8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d76dc:	d121      	bne.n	d7722 <__aeabi_d2f+0x7a>
   d76de:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d76e2:	bfbc      	itt	lt
   d76e4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d76e8:	4770      	bxlt	lr
   d76ea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d76ee:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d76f2:	f1c2 0218 	rsb	r2, r2, #24
   d76f6:	f1c2 0c20 	rsb	ip, r2, #32
   d76fa:	fa10 f30c 	lsls.w	r3, r0, ip
   d76fe:	fa20 f002 	lsr.w	r0, r0, r2
   d7702:	bf18      	it	ne
   d7704:	f040 0001 	orrne.w	r0, r0, #1
   d7708:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d770c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d7710:	fa03 fc0c 	lsl.w	ip, r3, ip
   d7714:	ea40 000c 	orr.w	r0, r0, ip
   d7718:	fa23 f302 	lsr.w	r3, r3, r2
   d771c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d7720:	e7cc      	b.n	d76bc <__aeabi_d2f+0x14>
   d7722:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d7726:	d107      	bne.n	d7738 <__aeabi_d2f+0x90>
   d7728:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d772c:	bf1e      	ittt	ne
   d772e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d7732:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d7736:	4770      	bxne	lr
   d7738:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d773c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d7740:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d7744:	4770      	bx	lr
   d7746:	bf00      	nop

000d7748 <__cxa_atexit>:
   d7748:	b510      	push	{r4, lr}
   d774a:	4c05      	ldr	r4, [pc, #20]	; (d7760 <__cxa_atexit+0x18>)
   d774c:	4613      	mov	r3, r2
   d774e:	b12c      	cbz	r4, d775c <__cxa_atexit+0x14>
   d7750:	460a      	mov	r2, r1
   d7752:	4601      	mov	r1, r0
   d7754:	2002      	movs	r0, #2
   d7756:	f3af 8000 	nop.w
   d775a:	bd10      	pop	{r4, pc}
   d775c:	4620      	mov	r0, r4
   d775e:	bd10      	pop	{r4, pc}
   d7760:	00000000 	.word	0x00000000

000d7764 <memcmp>:
   d7764:	b510      	push	{r4, lr}
   d7766:	3901      	subs	r1, #1
   d7768:	4402      	add	r2, r0
   d776a:	4290      	cmp	r0, r2
   d776c:	d007      	beq.n	d777e <memcmp+0x1a>
   d776e:	f810 3b01 	ldrb.w	r3, [r0], #1
   d7772:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d7776:	42a3      	cmp	r3, r4
   d7778:	d0f7      	beq.n	d776a <memcmp+0x6>
   d777a:	1b18      	subs	r0, r3, r4
   d777c:	bd10      	pop	{r4, pc}
   d777e:	2000      	movs	r0, #0
   d7780:	bd10      	pop	{r4, pc}

000d7782 <memcpy>:
   d7782:	b510      	push	{r4, lr}
   d7784:	1e43      	subs	r3, r0, #1
   d7786:	440a      	add	r2, r1
   d7788:	4291      	cmp	r1, r2
   d778a:	d004      	beq.n	d7796 <memcpy+0x14>
   d778c:	f811 4b01 	ldrb.w	r4, [r1], #1
   d7790:	f803 4f01 	strb.w	r4, [r3, #1]!
   d7794:	e7f8      	b.n	d7788 <memcpy+0x6>
   d7796:	bd10      	pop	{r4, pc}

000d7798 <memmove>:
   d7798:	4288      	cmp	r0, r1
   d779a:	b510      	push	{r4, lr}
   d779c:	eb01 0302 	add.w	r3, r1, r2
   d77a0:	d801      	bhi.n	d77a6 <memmove+0xe>
   d77a2:	1e42      	subs	r2, r0, #1
   d77a4:	e00b      	b.n	d77be <memmove+0x26>
   d77a6:	4298      	cmp	r0, r3
   d77a8:	d2fb      	bcs.n	d77a2 <memmove+0xa>
   d77aa:	1881      	adds	r1, r0, r2
   d77ac:	1ad2      	subs	r2, r2, r3
   d77ae:	42d3      	cmn	r3, r2
   d77b0:	d004      	beq.n	d77bc <memmove+0x24>
   d77b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d77b6:	f801 4d01 	strb.w	r4, [r1, #-1]!
   d77ba:	e7f8      	b.n	d77ae <memmove+0x16>
   d77bc:	bd10      	pop	{r4, pc}
   d77be:	4299      	cmp	r1, r3
   d77c0:	d004      	beq.n	d77cc <memmove+0x34>
   d77c2:	f811 4b01 	ldrb.w	r4, [r1], #1
   d77c6:	f802 4f01 	strb.w	r4, [r2, #1]!
   d77ca:	e7f8      	b.n	d77be <memmove+0x26>
   d77cc:	bd10      	pop	{r4, pc}

000d77ce <memset>:
   d77ce:	4402      	add	r2, r0
   d77d0:	4603      	mov	r3, r0
   d77d2:	4293      	cmp	r3, r2
   d77d4:	d002      	beq.n	d77dc <memset+0xe>
   d77d6:	f803 1b01 	strb.w	r1, [r3], #1
   d77da:	e7fa      	b.n	d77d2 <memset+0x4>
   d77dc:	4770      	bx	lr
	...

000d77e0 <srand>:
   d77e0:	b538      	push	{r3, r4, r5, lr}
   d77e2:	4b12      	ldr	r3, [pc, #72]	; (d782c <srand+0x4c>)
   d77e4:	681c      	ldr	r4, [r3, #0]
   d77e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d77e8:	4605      	mov	r5, r0
   d77ea:	b9d3      	cbnz	r3, d7822 <srand+0x42>
   d77ec:	2018      	movs	r0, #24
   d77ee:	f7fd f9f9 	bl	d4be4 <malloc>
   d77f2:	f243 330e 	movw	r3, #13070	; 0x330e
   d77f6:	63a0      	str	r0, [r4, #56]	; 0x38
   d77f8:	8003      	strh	r3, [r0, #0]
   d77fa:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d77fe:	8043      	strh	r3, [r0, #2]
   d7800:	f241 2334 	movw	r3, #4660	; 0x1234
   d7804:	8083      	strh	r3, [r0, #4]
   d7806:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d780a:	80c3      	strh	r3, [r0, #6]
   d780c:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d7810:	8103      	strh	r3, [r0, #8]
   d7812:	2305      	movs	r3, #5
   d7814:	8143      	strh	r3, [r0, #10]
   d7816:	230b      	movs	r3, #11
   d7818:	8183      	strh	r3, [r0, #12]
   d781a:	2201      	movs	r2, #1
   d781c:	2300      	movs	r3, #0
   d781e:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d7822:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7824:	2200      	movs	r2, #0
   d7826:	611d      	str	r5, [r3, #16]
   d7828:	615a      	str	r2, [r3, #20]
   d782a:	bd38      	pop	{r3, r4, r5, pc}
   d782c:	2003e360 	.word	0x2003e360

000d7830 <strlen>:
   d7830:	4603      	mov	r3, r0
   d7832:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7836:	2a00      	cmp	r2, #0
   d7838:	d1fb      	bne.n	d7832 <strlen+0x2>
   d783a:	1a18      	subs	r0, r3, r0
   d783c:	3801      	subs	r0, #1
   d783e:	4770      	bx	lr

000d7840 <strnlen>:
   d7840:	b510      	push	{r4, lr}
   d7842:	4603      	mov	r3, r0
   d7844:	4401      	add	r1, r0
   d7846:	428b      	cmp	r3, r1
   d7848:	d004      	beq.n	d7854 <strnlen+0x14>
   d784a:	781a      	ldrb	r2, [r3, #0]
   d784c:	1c5c      	adds	r4, r3, #1
   d784e:	b10a      	cbz	r2, d7854 <strnlen+0x14>
   d7850:	4623      	mov	r3, r4
   d7852:	e7f8      	b.n	d7846 <strnlen+0x6>
   d7854:	1a18      	subs	r0, r3, r0
   d7856:	bd10      	pop	{r4, pc}

000d7858 <dynalib_user>:
   d7858:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   d7868:	0000 0000 6944 6967 6174 206c 2d2d 202d     ....Digital --- 
   d7878:	2000 b0c2 2c43 0020 2520 4100 616e 6f6c     . ..C, . %.Analo
   d7888:	2067 2d2d 202d 6554 706d 7265 7461 7275     g --- Temperatur
   d7898:	2865 bac2 2943 203a 2000 5420 6d65 6570     e(..C): .  Tempe
   d78a8:	6172 7574 6572 c228 46ba 3a29 0020 2020     rature(..F): .  
   d78b8:	6f56 746c 6761 2865 566d 3a29 0020 6574     Voltage(mV): .te
   d78c8:	706d 6200 7461 7200 6465 6700 6572 6e65     mp.bat.red.green
   d78d8:	6200 756c 0065 7241 6f67 006e 4536 3034     .blue.Argon.6E40
   d78e8:	3030 3430 422d 4135 2d33 3346 3339 452d     0004-B5A3-F393-E
   d78f8:	4130 2d39 3545 4530 3432 4344 4143 4539     0A9-E50E24DCCA9E
   d7908:	3600 3445 3030 3030 2d33 3542 3341 462d     .6E400003-B5A3-F
   d7918:	3933 2d33 3045 3941 452d 3035 3245 4434     393-E0A9-E50E24D
   d7928:	4343 3941 0045 4536 3034 3030 3230 422d     CCA9E.6E400002-B
   d7938:	4135 2d33 3346 3339 452d 4130 2d39 3545     5A3-F393-E0A9-E5
   d7948:	4530 3432 4344 4143 4539 3600 3445 3030     0E24DCCA9E.6E400
   d7958:	3030 2d31 3542 3341 462d 3933 2d33 3045     001-B5A3-F393-E0
   d7968:	3941 452d 3035 3245 4434 4343 3941 0045     A9-E50E24DCCA9E.

000d7978 <_ZTVSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d7980:	4c27 000d 4c2d 000d 5849 000d 4c57 000d     'L..-L..IX..WL..
   d7990:	4c29 000d                                   )L..

000d7994 <_ZTVSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d799c:	4c21 000d 4c3b 000d 5951 000d 4c5b 000d     !L..;L..QY..[L..
   d79ac:	4c23 000d                                   #L..

000d79b0 <_ZTVSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d79b8:	4c1b 000d 4c49 000d 5335 000d 4c5f 000d     .L..IL..5S.._L..
   d79c8:	4c1d 000d                                   .L..

000d79cc <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   d79cc:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.
   d79dc:	6977 6972 676e 622e 656c 5300 6174 7472     wiring.ble.Start
   d79ec:	6420 7369 6f63 6576 6972 676e 7320 7265      discovering ser
   d79fc:	6976 6563 2e73 5300 6174 7472 6420 7369     vices..Start dis
   d7a0c:	6f63 6576 6972 676e 6320 6168 6172 7463     covering charact
   d7a1c:	7265 7369 6974 7363 002e 6550 7265 6420     eristics..Peer d
   d7a2c:	7665 6369 2065 7369 6d20 7369 6973 676e     evice is missing
   d7a3c:	0021 6146 6c69 6465 7420 206f 7061 6570     !.Failed to appe
   d7a4c:	646e 7020 6565 2072 6543 746e 6172 206c     nd peer Central 
   d7a5c:	6564 6976 6563 002e 6f43 6e6e 6365 6574     device..Connecte
   d7a6c:	2064 7962 4320 6e65 7274 6c61 6420 7665     d by Central dev
   d7a7c:	6369 2e65 4400 7369 6f63 6e6e 6365 6574     ice..Disconnecte
   d7a8c:	2064 7962 7220 6d65 746f 2065 6564 6976     d by remote devi
   d7a9c:	6563 002e 6143 6e6e 746f 6120 6464 6e20     ce..Cannot add n
   d7aac:	7765 7020 6565 2072 6564 6976 6563 002e     ew peer device..
   d7abc:	654e 2077 6570 6972 6870 7265 6c61 6920     New peripheral i
   d7acc:	2073 6f63 6e6e 6365 6574 2e64 4600 6961     s connected..Fai
   d7adc:	656c 2064 6f74 6120 7070 6e65 2064 6964     led to append di
   d7aec:	6373 766f 7265 6465 6320 6168 6172 7463     scovered charact
   d7afc:	7265 7369 6974 2e63 4600 6961 656c 2064     eristic..Failed 
   d7b0c:	6f74 6120 7070 6e65 2064 6964 6373 766f     to append discov
   d7b1c:	7265 6465 7320 7265 6976 6563 002e 6146     ered service..Fa
   d7b2c:	6c69 6465 7420 206f 7061 6570 646e 6c20     iled to append l
   d7b3c:	636f 6c61 6320 6168 6172 7463 7265 7369     ocal characteris
   d7b4c:	6974 2e63 4400 7075 696c 6163 6574 2064     tic..Duplicated 
   d7b5c:	6863 7261 6361 6574 6972 7473 6369 6320     characteristic c
   d7b6c:	6e61 6f6e 2074 6562 6120 6464 6465 002e     annot be added..

000d7b7c <_ZTVN5spark13EthernetClassE>:
	...
   d7b84:	5cad 000d 5ca3 000d 5c99 000d 5c8f 000d     .\...\...\...\..
   d7b94:	5c83 000d 5c77 000d 5c6b 000d 5c63 000d     .\..w\..k\..c\..
   d7ba4:	5c59 000d 5c4f 000d 6055 000d               Y\..O\..U`..

000d7bb0 <_ZTV7TwoWire>:
	...
   d7bb8:	5ccd 000d 5d17 000d 5cef 000d 5ccf 000d     .\...]...\...\..
   d7bc8:	5cf7 000d 5cff 000d 5d07 000d 5d0f 000d     .\...\...]...]..

000d7bd8 <_ZTV9IPAddress>:
	...
   d7be0:	5da5 000d 5d95 000d 5d97 000d 6162 6475     .]...]...]..baud
   d7bf0:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   d7c00:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
   d7c10:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
   d7c20:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
   d7c30:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
   d7c40:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
   d7c50:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   d7c60:	7070 2500 3130 7530 0020 205d 2500 0064     pp.%010u .] .%d.
   d7c70:	2928 203a 2000 005b 6f63 6564 3d20 0020     (): . [.code = .
   d7c80:	6925 6400 7465 6961 736c 3d20 0020 0a0d     %i.details = ...
   d7c90:	6c00 006e 6e66 6300 646f 0065 6564 6174     .ln.fn.code.deta
   d7ca0:	6c69 6e00 6e6f 0065 7274 6361 0065 6e69     il.none.trace.in
   d7cb0:	6f66 7700 7261 006e 7265 6f72 0072 6170     fo.warn.error.pa
   d7cc0:	696e 0063 6c61 006c                         nic.all.

000d7cc8 <_ZTVN5spark9MeshClassE>:
	...
   d7cd0:	5ee7 000d 5edd 000d 5ed3 000d 5ec9 000d     .^...^...^...^..
   d7ce0:	5ebd 000d 5eb1 000d 5ea5 000d 5e9d 000d     .^...^...^...^..
   d7cf0:	5e93 000d 5e89 000d 6055 000d               .^...^..U`..

000d7cfc <_ZTVN5spark12NetworkClassE>:
	...
   d7d04:	5fed 000d 5ff7 000d 6001 000d 600b 000d     ._..._...`...`..
   d7d14:	6015 000d 6021 000d 602d 000d 6039 000d     .`..!`..-`..9`..
   d7d24:	6041 000d 604b 000d 6055 000d 616e 006e     A`..K`..U`..nan.
   d7d34:	766f 0066 6e69 0066                         ovf.inf.

000d7d3c <_ZTV8SPIClass>:
	...
   d7d44:	64e9 000d 64eb 000d 005a 2b25 3330 3a64     .d...d..Z.%+03d:
   d7d54:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
   d7d64:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
   d7d74:	0000 0000                                   ....

000d7d78 <_ZTV11USARTSerial>:
	...
   d7d80:	6629 000d 6679 000d 6687 000d 6135 000d     )f..yf...f..5a..
   d7d90:	663d 000d 665f 000d 664b 000d 6673 000d     =f.._f..Kf..sf..
   d7da0:	662b 000d 662f 000d                         +f../f..

000d7da8 <_ZTV9USBSerial>:
	...
   d7db0:	6731 000d 6781 000d 678f 000d 6135 000d     1g...g...g..5a..
   d7dc0:	676d 000d 6733 000d 6749 000d 677b 000d     mg..3g..Ig..{g..
   d7dd0:	675f 000d 672d 000d                         _g..-g..

000d7dd8 <_ZTVN5spark9WiFiClassE>:
	...
   d7de0:	689b 000d 6891 000d 6887 000d 683d 000d     .h...h...h..=h..
   d7df0:	687b 000d 686f 000d 6863 000d 685b 000d     {h..oh..ch..[h..
   d7e00:	6851 000d 6847 000d 6055 000d               Qh..Gh..U`..

000d7e0c <__sf_fake_stdin>:
	...

000d7e2c <__sf_fake_stdout>:
	...

000d7e4c <__sf_fake_stderr>:
	...
   d7e6c:	0043                                        C.

000d7e6e <link_const_variable_data_end>:
	...

000d7e70 <link_constructors_location>:
   d7e70:	000d4579 	.word	0x000d4579
   d7e74:	000d46f9 	.word	0x000d46f9
   d7e78:	000d5c2d 	.word	0x000d5c2d
   d7e7c:	000d5cb9 	.word	0x000d5cb9
   d7e80:	000d5e79 	.word	0x000d5e79
   d7e84:	000d5f9d 	.word	0x000d5f9d
   d7e88:	000d6121 	.word	0x000d6121
   d7e8c:	000d6431 	.word	0x000d6431
   d7e90:	000d65fd 	.word	0x000d65fd
   d7e94:	000d6615 	.word	0x000d6615
   d7e98:	000d68a5 	.word	0x000d68a5
   d7e9c:	000d6a65 	.word	0x000d6a65
   d7ea0:	000d6ab9 	.word	0x000d6ab9
   d7ea4:	000d6b7d 	.word	0x000d6b7d
   d7ea8:	000d6c01 	.word	0x000d6c01
   d7eac:	000d6c85 	.word	0x000d6c85
