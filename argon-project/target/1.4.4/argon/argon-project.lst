
/Users/eva/Documents/Particle/argon-project/target/1.4.4/argon/argon-project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005840  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000000  2003f400  2003f400  00019924  2**0
                  CONTENTS
  4 .data         00000098  2003e1fc  000d9860  0000e1fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000055c  2003e294  2003e294  0001e294  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d98f8  000d98f8  000198f8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d9920  000d9920  00019920  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000f2c5e  00000000  00000000  00019924  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000127ee  00000000  00000000  0010c582  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002131c  00000000  00000000  0011ed70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002b18  00000000  00000000  0014008c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004f68  00000000  00000000  00142ba4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00036a06  00000000  00000000  00147b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002a95a  00000000  00000000  0017e512  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    001053a7  00000000  00000000  001a8e6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000dc34  00000000  00000000  002ae214  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f004 fe3c 	bl	d8cae <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f004 fe5c 	bl	d8cfa <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e1fc 	.word	0x2003e1fc
   d404c:	000d9860 	.word	0x000d9860
   d4050:	2003e294 	.word	0x2003e294
   d4054:	2003e294 	.word	0x2003e294
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f003 ffe7 	bl	d8030 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000d9860 	.word	0x000d9860
   d4084:	000d9824 	.word	0x000d9824

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 b9c4 	b.w	d4414 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 f919 	bl	d42c4 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f003 bf99 	b.w	d7fcc <_post_loop>

000d409a <_Znwj>:
   d409a:	f000 bf53 	b.w	d4f44 <malloc>

000d409e <_ZdlPv>:
   d409e:	f000 bf59 	b.w	d4f54 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f000 bf57 	b.w	d4f54 <free>
	...

000d40a8 <__cxa_pure_virtual>:
        ;
    }
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a8:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40aa:	4a03      	ldr	r2, [pc, #12]	; (d40b8 <__cxa_pure_virtual+0x10>)
   d40ac:	2100      	movs	r1, #0
   d40ae:	200c      	movs	r0, #12
   d40b0:	f000 fe9c 	bl	d4dec <panic_>
   d40b4:	e7fe      	b.n	d40b4 <__cxa_pure_virtual+0xc>
   d40b6:	bf00      	nop
   d40b8:	000d4b1d 	.word	0x000d4b1d

000d40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40bc:	7800      	ldrb	r0, [r0, #0]
   d40be:	fab0 f080 	clz	r0, r0
   d40c2:	0940      	lsrs	r0, r0, #5
   d40c4:	4770      	bx	lr

000d40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c6:	2301      	movs	r3, #1
   d40c8:	7003      	strb	r3, [r0, #0]
   d40ca:	4770      	bx	lr

000d40cc <_ZN5spark10LogHandler5writeEPKcj>:
    if (level >= filter_.level(category)) {
        write(data, size);
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
   d40cc:	4770      	bx	lr

000d40ce <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   d40ce:	6a00      	ldr	r0, [r0, #32]
   d40d0:	6803      	ldr	r3, [r0, #0]
   d40d2:	68db      	ldr	r3, [r3, #12]
   d40d4:	4718      	bx	r3
	...

000d40d8 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d40d8:	4b0a      	ldr	r3, [pc, #40]	; (d4104 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   d40da:	b510      	push	{r4, lr}
   d40dc:	4604      	mov	r4, r0
   d40de:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   d40e0:	f002 fbec 	bl	d68bc <_ZN5spark10LogManager8instanceEv>
   d40e4:	4621      	mov	r1, r4
   d40e6:	f002 fdd9 	bl	d6c9c <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   d40ea:	f003 feed 	bl	d7ec8 <_Z16_fetch_usbserialv>
   d40ee:	f003 fedd 	bl	d7eac <_ZN9USBSerial3endEv>
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d40f2:	4620      	mov	r0, r4
   d40f4:	4b04      	ldr	r3, [pc, #16]	; (d4108 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   d40f6:	f840 3b04 	str.w	r3, [r0], #4
   d40fa:	f002 fcd5 	bl	d6aa8 <_ZN5spark6detail9LogFilterD1Ev>
    }
   d40fe:	4620      	mov	r0, r4
   d4100:	bd10      	pop	{r4, pc}
   d4102:	bf00      	nop
   d4104:	000d8fe0 	.word	0x000d8fe0
   d4108:	000d8fc8 	.word	0x000d8fc8

000d410c <_ZN5spark16SerialLogHandlerD0Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d410c:	b510      	push	{r4, lr}
   d410e:	4604      	mov	r4, r0
        LogManager::instance()->removeHandler(this);
        Serial.end();
    }
   d4110:	f7ff ffe2 	bl	d40d8 <_ZN5spark16SerialLogHandlerD1Ev>
   d4114:	4620      	mov	r0, r4
   d4116:	2124      	movs	r1, #36	; 0x24
   d4118:	f004 f80f 	bl	d813a <_ZdlPvj>
   d411c:	4620      	mov	r0, r4
   d411e:	bd10      	pop	{r4, pc}

000d4120 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d4120:	b40e      	push	{r1, r2, r3}
   d4122:	b500      	push	{lr}
   d4124:	b08c      	sub	sp, #48	; 0x30
   d4126:	aa0d      	add	r2, sp, #52	; 0x34
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d4128:	2320      	movs	r3, #32
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d412a:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list args;
    va_start(args, fmt);
   d412e:	9203      	str	r2, [sp, #12]

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4130:	e88d 0006 	stmia.w	sp, {r1, r2}
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d4134:	9304      	str	r3, [sp, #16]
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4136:	6801      	ldr	r1, [r0, #0]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d4138:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d413a:	aa04      	add	r2, sp, #16
   d413c:	201e      	movs	r0, #30
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d413e:	9305      	str	r3, [sp, #20]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4140:	f000 fe64 	bl	d4e0c <log_message_v>
inline void spark::Logger::info(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
    va_end(args);
}
   d4144:	b00c      	add	sp, #48	; 0x30
   d4146:	f85d eb04 	ldr.w	lr, [sp], #4
   d414a:	b003      	add	sp, #12
   d414c:	4770      	bx	lr
	...

000d4150 <_ZL14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
// Static level tracking
static led_level_t m_led_level;

// Static function for handling Bluetooth Low Energy callbacks
static void onDataReceived(const uint8_t *data, size_t len, const BlePeerDevice &peer, void *context)
{
   d4150:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (context == motorKarId){
   d4152:	4a37      	ldr	r2, [pc, #220]	; (d4230 <_ZL14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xe0>)
   d4154:	6812      	ldr	r2, [r2, #0]
   d4156:	429a      	cmp	r2, r3
   d4158:	d144      	bne.n	d41e4 <_ZL14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x94>
    // call motor
    uint8_t flags = data[0];
    uint16_t motor;
    if (flags & 0x01)
   d415a:	7803      	ldrb	r3, [r0, #0]
    else
    {
      // motor is 8 bits (normal case)
      motor = data[1];
    }
    if (!updatingMotor){
   d415c:	4d35      	ldr	r5, [pc, #212]	; (d4234 <_ZL14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xe4>)
{
  if (context == motorKarId){
    // call motor
    uint8_t flags = data[0];
    uint16_t motor;
    if (flags & 0x01)
   d415e:	07db      	lsls	r3, r3, #31
    else
    {
      // motor is 8 bits (normal case)
      motor = data[1];
    }
    if (!updatingMotor){
   d4160:	782e      	ldrb	r6, [r5, #0]
    uint8_t flags = data[0];
    uint16_t motor;
    if (flags & 0x01)
    {
      // motor is 16 bits
      memcpy(&motor, &data[1], sizeof(uint16_t));
   d4162:	bf4b      	itete	mi
   d4164:	f8b0 3001 	ldrhmi.w	r3, [r0, #1]
    }
    else
    {
      // motor is 8 bits (normal case)
      motor = data[1];
   d4168:	7843      	ldrbpl	r3, [r0, #1]
    uint8_t flags = data[0];
    uint16_t motor;
    if (flags & 0x01)
    {
      // motor is 16 bits
      memcpy(&motor, &data[1], sizeof(uint16_t));
   d416a:	f8ad 3006 	strhmi.w	r3, [sp, #6]
    }
    else
    {
      // motor is 8 bits (normal case)
      motor = data[1];
   d416e:	f8ad 3006 	strhpl.w	r3, [sp, #6]
    }
    if (!updatingMotor){
   d4172:	2e00      	cmp	r6, #0
   d4174:	d155      	bne.n	d4222 <_ZL14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xd2>
      Log.info("motor angle setted=%u", motor);
   d4176:	f8bd 4006 	ldrh.w	r4, [sp, #6]
   d417a:	492f      	ldr	r1, [pc, #188]	; (d4238 <_ZL14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xe8>)
   d417c:	482f      	ldr	r0, [pc, #188]	; (d423c <_ZL14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xec>)
      times = motor / 0.1756;
   d417e:	4f30      	ldr	r7, [pc, #192]	; (d4240 <_ZL14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xf0>)
    {
      // motor is 8 bits (normal case)
      motor = data[1];
    }
    if (!updatingMotor){
      Log.info("motor angle setted=%u", motor);
   d4180:	4622      	mov	r2, r4
   d4182:	f7ff ffcd 	bl	d4120 <_ZNK5spark6Logger4infoEPKcz>
      times = motor / 0.1756;
   d4186:	4620      	mov	r0, r4
   d4188:	f004 fa8c 	bl	d86a4 <__aeabi_i2d>
   d418c:	a326      	add	r3, pc, #152	; (adr r3, d4228 <_ZL14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xd8>)
   d418e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4192:	f004 fc17 	bl	d89c4 <__aeabi_ddiv>
   d4196:	f004 fcfd 	bl	d8b94 <__aeabi_d2uiz>
      if(times > 10000 ){
   d419a:	f242 7310 	movw	r3, #10000	; 0x2710
   d419e:	4298      	cmp	r0, r3
      // motor is 8 bits (normal case)
      motor = data[1];
    }
    if (!updatingMotor){
      Log.info("motor angle setted=%u", motor);
      times = motor / 0.1756;
   d41a0:	6038      	str	r0, [r7, #0]
      if(times > 10000 ){
   d41a2:	d902      	bls.n	d41aa <_ZL14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5a>
        Log.info("Can't turn long than 10s, sended value=%u", motor);
   d41a4:	4622      	mov	r2, r4
   d41a6:	4927      	ldr	r1, [pc, #156]	; (d4244 <_ZL14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xf4>)
   d41a8:	e018      	b.n	d41dc <_ZL14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x8c>
        return;
      }
      updatingMotor = true;
   d41aa:	2301      	movs	r3, #1
      myservo.write(0); // zero max speed
   d41ac:	4631      	mov	r1, r6
   d41ae:	4826      	ldr	r0, [pc, #152]	; (d4248 <_ZL14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xf8>)
      times = motor / 0.1756;
      if(times > 10000 ){
        Log.info("Can't turn long than 10s, sended value=%u", motor);
        return;
      }
      updatingMotor = true;
   d41b0:	702b      	strb	r3, [r5, #0]
      myservo.write(0); // zero max speed
   d41b2:	f003 fc3c 	bl	d7a2e <_ZN5Servo5writeEi>
      Log.info("will turn %", times / 1000);
   d41b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d41ba:	4924      	ldr	r1, [pc, #144]	; (d424c <_ZL14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xfc>)
   d41bc:	683a      	ldr	r2, [r7, #0]
   d41be:	481f      	ldr	r0, [pc, #124]	; (d423c <_ZL14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xec>)
   d41c0:	fbb2 f2f3 	udiv	r2, r2, r3
   d41c4:	f7ff ffac 	bl	d4120 <_ZNK5spark6Logger4infoEPKcz>
      delay(times);
   d41c8:	6838      	ldr	r0, [r7, #0]
   d41ca:	f000 fee7 	bl	d4f9c <delay>
      myservo.write(90); // 90 stop
   d41ce:	215a      	movs	r1, #90	; 0x5a
   d41d0:	481d      	ldr	r0, [pc, #116]	; (d4248 <_ZL14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xf8>)
   d41d2:	f003 fc2c 	bl	d7a2e <_ZN5Servo5writeEi>
      updatingMotor = false;
      Log.info("motor angle turned=%u", motor);
   d41d6:	491e      	ldr	r1, [pc, #120]	; (d4250 <_ZL14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x100>)
      updatingMotor = true;
      myservo.write(0); // zero max speed
      Log.info("will turn %", times / 1000);
      delay(times);
      myservo.write(90); // 90 stop
      updatingMotor = false;
   d41d8:	702e      	strb	r6, [r5, #0]
      Log.info("motor angle turned=%u", motor);
   d41da:	4622      	mov	r2, r4
   d41dc:	4817      	ldr	r0, [pc, #92]	; (d423c <_ZL14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xec>)
   d41de:	f7ff ff9f 	bl	d4120 <_ZNK5spark6Logger4infoEPKcz>
   d41e2:	e01e      	b.n	d4222 <_ZL14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xd2>
    }
    return;
  }
  if (len != 1)
   d41e4:	2901      	cmp	r1, #1
   d41e6:	d11c      	bne.n	d4222 <_ZL14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xd2>
  {
    return;
  }
  // Sets the global level
  if (context == red)
   d41e8:	4a1a      	ldr	r2, [pc, #104]	; (d4254 <_ZL14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x104>)
   d41ea:	4c1b      	ldr	r4, [pc, #108]	; (d4258 <_ZL14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x108>)
   d41ec:	6812      	ldr	r2, [r2, #0]
   d41ee:	4293      	cmp	r3, r2
   d41f0:	d102      	bne.n	d41f8 <_ZL14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xa8>
  {
    m_led_level.red = data[0];
   d41f2:	7803      	ldrb	r3, [r0, #0]
   d41f4:	7023      	strb	r3, [r4, #0]
   d41f6:	e00c      	b.n	d4212 <_ZL14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xc2>
  }
  else if (context == green)
   d41f8:	4a18      	ldr	r2, [pc, #96]	; (d425c <_ZL14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x10c>)
   d41fa:	6812      	ldr	r2, [r2, #0]
   d41fc:	4293      	cmp	r3, r2
   d41fe:	d102      	bne.n	d4206 <_ZL14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xb6>
  {
    m_led_level.green = data[0];
   d4200:	7803      	ldrb	r3, [r0, #0]
   d4202:	7063      	strb	r3, [r4, #1]
   d4204:	e005      	b.n	d4212 <_ZL14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xc2>
  }
  else if (context == blue)
   d4206:	4a16      	ldr	r2, [pc, #88]	; (d4260 <_ZL14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x110>)
   d4208:	6812      	ldr	r2, [r2, #0]
   d420a:	4293      	cmp	r3, r2
  {
    m_led_level.blue = data[0];
   d420c:	bf04      	itt	eq
   d420e:	7803      	ldrbeq	r3, [r0, #0]
   d4210:	70a3      	strbeq	r3, [r4, #2]
  }

  // Set RGB color
  RGB.color(m_led_level.red, m_led_level.green, m_led_level.blue);
   d4212:	78a2      	ldrb	r2, [r4, #2]
   d4214:	7861      	ldrb	r1, [r4, #1]
   d4216:	7820      	ldrb	r0, [r4, #0]
}
   d4218:	b003      	add	sp, #12
   d421a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  {
    m_led_level.blue = data[0];
  }

  // Set RGB color
  RGB.color(m_led_level.red, m_led_level.green, m_led_level.blue);
   d421e:	f003 bbd3 	b.w	d79c8 <_ZN8RGBClass5colorEiii>
}
   d4222:	b003      	add	sp, #12
   d4224:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4226:	bf00      	nop
   d4228:	9096bb99 	.word	0x9096bb99
   d422c:	3fc67a0f 	.word	0x3fc67a0f
   d4230:	2003e1fc 	.word	0x2003e1fc
   d4234:	2003e340 	.word	0x2003e340
   d4238:	000d8ff0 	.word	0x000d8ff0
   d423c:	2003e3d0 	.word	0x2003e3d0
   d4240:	2003e2e0 	.word	0x2003e2e0
   d4244:	000d9006 	.word	0x000d9006
   d4248:	2003e374 	.word	0x2003e374
   d424c:	000d9030 	.word	0x000d9030
   d4250:	000d903c 	.word	0x000d903c
   d4254:	2003e204 	.word	0x2003e204
   d4258:	2003e2bc 	.word	0x2003e2bc
   d425c:	2003e21c 	.word	0x2003e21c
   d4260:	2003e218 	.word	0x2003e218
   d4264:	00000000 	.word	0x00000000

000d4268 <_Z8getTempCv>:
      }
    }
  }
}

float getTempC() {
   d4268:	b510      	push	{r4, lr}
  if (sensor_connected)
   d426a:	4b13      	ldr	r3, [pc, #76]	; (d42b8 <_Z8getTempCv+0x50>)
   d426c:	781b      	ldrb	r3, [r3, #0]
   d426e:	b9db      	cbnz	r3, d42a8 <_Z8getTempCv+0x40>
  {
    return 0;
  }else 
  {
    if (rand() > (RAND_MAX / 2))
   d4270:	f004 fd74 	bl	d8d5c <rand>
   d4274:	4c11      	ldr	r4, [pc, #68]	; (d42bc <_Z8getTempCv+0x54>)
   d4276:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
    {
      lastTemp += 0.1;
   d427a:	6820      	ldr	r0, [r4, #0]
  if (sensor_connected)
  {
    return 0;
  }else 
  {
    if (rand() > (RAND_MAX / 2))
   d427c:	db07      	blt.n	d428e <_Z8getTempCv+0x26>
    {
      lastTemp += 0.1;
   d427e:	f004 fa23 	bl	d86c8 <__aeabi_f2d>
   d4282:	a30b      	add	r3, pc, #44	; (adr r3, d42b0 <_Z8getTempCv+0x48>)
   d4284:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4288:	f004 f8c0 	bl	d840c <__adddf3>
   d428c:	e006      	b.n	d429c <_Z8getTempCv+0x34>
    }
    else
    {
      lastTemp -= 0.1;
   d428e:	f004 fa1b 	bl	d86c8 <__aeabi_f2d>
   d4292:	a307      	add	r3, pc, #28	; (adr r3, d42b0 <_Z8getTempCv+0x48>)
   d4294:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4298:	f004 f8b6 	bl	d8408 <__aeabi_dsub>
   d429c:	f004 fc9a 	bl	d8bd4 <__aeabi_d2f>
   d42a0:	6020      	str	r0, [r4, #0]
    }
    return lastTemp;
   d42a2:	ed94 0a00 	vldr	s0, [r4]
   d42a6:	bd10      	pop	{r4, pc}
}

float getTempC() {
  if (sensor_connected)
  {
    return 0;
   d42a8:	ed9f 0a05 	vldr	s0, [pc, #20]	; d42c0 <_Z8getTempCv+0x58>
    {
      lastTemp -= 0.1;
    }
    return lastTemp;
  }
}
   d42ac:	bd10      	pop	{r4, pc}
   d42ae:	bf00      	nop
   d42b0:	9999999a 	.word	0x9999999a
   d42b4:	3fb99999 	.word	0x3fb99999
   d42b8:	2003e2e4 	.word	0x2003e2e4
   d42bc:	2003e20c 	.word	0x2003e20c
   d42c0:	00000000 	.word	0x00000000

000d42c4 <loop>:
  BLE.advertise(&advData);
}

// loop() runs over and over again, as quickly as it can execute.
void loop()
{
   d42c4:	b530      	push	{r4, r5, lr}
  if (millis() - lastUpdate >= UPDATE_INTERVAL_MS)
   d42c6:	4c22      	ldr	r4, [pc, #136]	; (d4350 <loop+0x8c>)
  BLE.advertise(&advData);
}

// loop() runs over and over again, as quickly as it can execute.
void loop()
{
   d42c8:	b085      	sub	sp, #20
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d42ca:	f000 fc2f 	bl	d4b2c <HAL_Timer_Get_Milli_Seconds>
  if (millis() - lastUpdate >= UPDATE_INTERVAL_MS)
   d42ce:	6823      	ldr	r3, [r4, #0]
   d42d0:	1ac0      	subs	r0, r0, r3
   d42d2:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   d42d6:	d339      	bcc.n	d434c <loop+0x88>
   d42d8:	f000 fc28 	bl	d4b2c <HAL_Timer_Get_Milli_Seconds>
  {
    lastUpdate = millis();
   d42dc:	6020      	str	r0, [r4, #0]

    if (BLE.connected())
   d42de:	f001 f96f 	bl	d55c0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d42e2:	f001 f9f7 	bl	d56d4 <_ZNK8particle14BleLocalDevice9connectedEv>
   d42e6:	b388      	cbz	r0, d434c <loop+0x88>
    {
      uint8_t buf[6];
      buf[0] = 0x04;
   d42e8:	2504      	movs	r5, #4
   d42ea:	f88d 5008 	strb.w	r5, [sp, #8]
      uint32_t value = ieee11073_from_float(getTempC());
   d42ee:	f7ff ffbb 	bl	d4268 <_Z8getTempCv>
   d42f2:	eddf 7a18 	vldr	s15, [pc, #96]	; d4354 <loop+0x90>
      memcpy(&buf[1], &value, 4);
      buf[5] = 6; // Mouth
      temperatureMeasurementCharacteristic.setValue(buf, sizeof(buf));
      batteryLevelCharacteristic.setValue(&lastBattery, 1);
   d42f6:	4c18      	ldr	r4, [pc, #96]	; (d4358 <loop+0x94>)

    if (BLE.connected())
    {
      uint8_t buf[6];
      buf[0] = 0x04;
      uint32_t value = ieee11073_from_float(getTempC());
   d42f8:	ee20 0a27 	vmul.f32	s0, s0, s15
      memcpy(&buf[1], &value, 4);
      buf[5] = 6; // Mouth
   d42fc:	2206      	movs	r2, #6

    if (BLE.connected())
    {
      uint8_t buf[6];
      buf[0] = 0x04;
      uint32_t value = ieee11073_from_float(getTempC());
   d42fe:	eebc 0ac0 	vcvt.u32.f32	s0, s0
      memcpy(&buf[1], &value, 4);
      buf[5] = 6; // Mouth
      temperatureMeasurementCharacteristic.setValue(buf, sizeof(buf));
   d4302:	a902      	add	r1, sp, #8

    if (BLE.connected())
    {
      uint8_t buf[6];
      buf[0] = 0x04;
      uint32_t value = ieee11073_from_float(getTempC());
   d4304:	ee10 3a10 	vmov	r3, s0
   d4308:	f043 437e 	orr.w	r3, r3, #4261412864	; 0xfe000000
   d430c:	9301      	str	r3, [sp, #4]
      memcpy(&buf[1], &value, 4);
   d430e:	9801      	ldr	r0, [sp, #4]
   d4310:	f8cd 0009 	str.w	r0, [sp, #9]
      buf[5] = 6; // Mouth
      temperatureMeasurementCharacteristic.setValue(buf, sizeof(buf));
   d4314:	2300      	movs	r3, #0
   d4316:	4811      	ldr	r0, [pc, #68]	; (d435c <loop+0x98>)
    {
      uint8_t buf[6];
      buf[0] = 0x04;
      uint32_t value = ieee11073_from_float(getTempC());
      memcpy(&buf[1], &value, 4);
      buf[5] = 6; // Mouth
   d4318:	f88d 200d 	strb.w	r2, [sp, #13]
      temperatureMeasurementCharacteristic.setValue(buf, sizeof(buf));
   d431c:	f001 f89e 	bl	d545c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
      batteryLevelCharacteristic.setValue(&lastBattery, 1);
   d4320:	2300      	movs	r3, #0
   d4322:	2201      	movs	r2, #1
   d4324:	4621      	mov	r1, r4
   d4326:	480e      	ldr	r0, [pc, #56]	; (d4360 <loop+0x9c>)
   d4328:	f001 f898 	bl	d545c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
      sayac += 1;
   d432c:	490d      	ldr	r1, [pc, #52]	; (d4364 <loop+0xa0>)
    ssize_t setValue(const char* str, BleTxRxType type = BleTxRxType::AUTO);

    template<typename T>
    typename std::enable_if_t<std::is_standard_layout<T>::value, ssize_t>
    setValue(const T& val, BleTxRxType type = BleTxRxType::AUTO) {
        return setValue(reinterpret_cast<const uint8_t*>(&val), sizeof(T), type);
   d432e:	480e      	ldr	r0, [pc, #56]	; (d4368 <loop+0xa4>)
   d4330:	680b      	ldr	r3, [r1, #0]
   d4332:	3301      	adds	r3, #1
   d4334:	600b      	str	r3, [r1, #0]
   d4336:	462a      	mov	r2, r5
   d4338:	2300      	movs	r3, #0
   d433a:	f001 f88f 	bl	d545c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
      sayacCharacteristic.setValue(sayac);
      if (--lastBattery < 10)
   d433e:	7823      	ldrb	r3, [r4, #0]
   d4340:	3b01      	subs	r3, #1
   d4342:	b2db      	uxtb	r3, r3
   d4344:	2b09      	cmp	r3, #9
      {
        lastBattery = 100;
   d4346:	bf98      	it	ls
   d4348:	2364      	movls	r3, #100	; 0x64
   d434a:	7023      	strb	r3, [r4, #0]
      }
    }
  }
}
   d434c:	b005      	add	sp, #20
   d434e:	bd30      	pop	{r4, r5, pc}
   d4350:	2003e2a0 	.word	0x2003e2a0
   d4354:	42c80000 	.word	0x42c80000
   d4358:	2003e210 	.word	0x2003e210
   d435c:	2003e2a4 	.word	0x2003e2a4
   d4360:	2003e2b4 	.word	0x2003e2b4
   d4364:	2003e2c0 	.word	0x2003e2c0
   d4368:	2003e304 	.word	0x2003e304

000d436c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d436c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d436e:	6804      	ldr	r4, [r0, #0]
   d4370:	6843      	ldr	r3, [r0, #4]
   d4372:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4374:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d4376:	fb06 4603 	mla	r6, r6, r3, r4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d437a:	42a6      	cmp	r6, r4
   d437c:	d004      	beq.n	d4388 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
    static int nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found);
};

} // namespace spark::detail

class LogCategoryFilter {
   d437e:	4620      	mov	r0, r4
   d4380:	f003 fc13 	bl	d7baa <_ZN6StringD1Ev>
   d4384:	3414      	adds	r4, #20
   d4386:	e7f8      	b.n	d437a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d4388:	6828      	ldr	r0, [r5, #0]
   d438a:	f000 fde3 	bl	d4f54 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d438e:	4628      	mov	r0, r5
   d4390:	bd70      	pop	{r4, r5, r6, pc}

000d4392 <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_25BleCharacteristicPropertyET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESC_>:
    BleCharacteristic(const String& desc, BleCharacteristicProperty properties, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr)
            : BleCharacteristic(desc.c_str(), properties, callback, context) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, BleCharacteristicProperty properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   d4392:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4394:	460e      	mov	r6, r1
   d4396:	b08f      	sub	sp, #60	; 0x3c

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d4398:	2100      	movs	r1, #0
   d439a:	4604      	mov	r4, r0
   d439c:	6001      	str	r1, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d439e:	6041      	str	r1, [r0, #4]
        BleUuid cUuid(charUuid);
        BleUuid sUuid(svcUuid);
   d43a0:	ad09      	add	r5, sp, #36	; 0x24
            : BleCharacteristic(desc.c_str(), properties, callback, context) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, BleCharacteristicProperty properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
        BleUuid cUuid(charUuid);
   d43a2:	4619      	mov	r1, r3
   d43a4:	a804      	add	r0, sp, #16
    BleCharacteristic(const String& desc, BleCharacteristicProperty properties, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr)
            : BleCharacteristic(desc.c_str(), properties, callback, context) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, BleCharacteristicProperty properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   d43a6:	4617      	mov	r7, r2
        BleUuid cUuid(charUuid);
   d43a8:	f000 ff75 	bl	d5296 <_ZN8particle7BleUuidC1EPKc>
        BleUuid sUuid(svcUuid);
   d43ac:	9914      	ldr	r1, [sp, #80]	; 0x50
   d43ae:	4628      	mov	r0, r5
   d43b0:	f000 ff71 	bl	d5296 <_ZN8particle7BleUuidC1EPKc>
        construct(desc, properties, cUuid, sUuid, callback, context);
   d43b4:	9b16      	ldr	r3, [sp, #88]	; 0x58
   d43b6:	9302      	str	r3, [sp, #8]
   d43b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d43ba:	9301      	str	r3, [sp, #4]
   d43bc:	4620      	mov	r0, r4
   d43be:	9500      	str	r5, [sp, #0]
   d43c0:	ab04      	add	r3, sp, #16
   d43c2:	463a      	mov	r2, r7
   d43c4:	4631      	mov	r1, r6
   d43c6:	f001 fca7 	bl	d5d18 <_ZN8particle17BleCharacteristic9constructEPKcNS_25BleCharacteristicPropertyERNS_7BleUuidES5_PFvPKhjRKNS_13BlePeerDeviceEPvESB_>
    }
   d43ca:	4620      	mov	r0, r4
   d43cc:	b00f      	add	sp, #60	; 0x3c
   d43ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d43d0 <_ZN8particle18BleAdvertisingData17appendServiceUUIDINS_7BleUuidEEEjT_b>:
    // According to the Bluetooth CSS, Local Name shall not appear more than once in a block.
    size_t appendLocalName(const char* name);
    size_t appendLocalName(const String& name);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
   d43d0:	b530      	push	{r4, r5, lr}
   d43d2:	b089      	sub	sp, #36	; 0x24
   d43d4:	4604      	mov	r4, r0
        BleUuid tempUUID(uuid);
   d43d6:	a803      	add	r0, sp, #12
    // According to the Bluetooth CSS, Local Name shall not appear more than once in a block.
    size_t appendLocalName(const char* name);
    size_t appendLocalName(const String& name);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
   d43d8:	4615      	mov	r5, r2
        BleUuid tempUUID(uuid);
   d43da:	f000 fe67 	bl	d50ac <_ZN8particle7BleUuidC1ERKS0_>
        if (tempUUID.type() == BleUuidType::SHORT) {
   d43de:	a803      	add	r0, sp, #12
   d43e0:	f000 feac 	bl	d513c <_ZNK8particle7BleUuid4typeEv>
   d43e4:	b948      	cbnz	r0, d43fa <_ZN8particle18BleAdvertisingData17appendServiceUUIDINS_7BleUuidEEEjT_b+0x2a>
            uint16_t uuid16 = tempUUID.shorted();
   d43e6:	a803      	add	r0, sp, #12
   d43e8:	f000 fec5 	bl	d5176 <_ZNK8particle7BleUuid7shortedEv>
   d43ec:	aa08      	add	r2, sp, #32
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d43ee:	2302      	movs	r3, #2

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
        if (tempUUID.type() == BleUuidType::SHORT) {
            uint16_t uuid16 = tempUUID.shorted();
   d43f0:	f822 0d16 	strh.w	r0, [r2, #-22]!
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d43f4:	2103      	movs	r1, #3
   d43f6:	9500      	str	r5, [sp, #0]
   d43f8:	e006      	b.n	d4408 <_ZN8particle18BleAdvertisingData17appendServiceUUIDINS_7BleUuidEEEjT_b+0x38>
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   d43fa:	a803      	add	r0, sp, #12
   d43fc:	f000 febd 	bl	d517a <_ZNK8particle7BleUuid8rawBytesEv>
   d4400:	9500      	str	r5, [sp, #0]
   d4402:	2310      	movs	r3, #16
   d4404:	4602      	mov	r2, r0
   d4406:	2107      	movs	r1, #7
   d4408:	4620      	mov	r0, r4
   d440a:	f000 ff67 	bl	d52dc <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
        }
    }
   d440e:	b009      	add	sp, #36	; 0x24
   d4410:	bd30      	pop	{r4, r5, pc}
	...

000d4414 <setup>:
  RGB.color(m_led_level.red, m_led_level.green, m_led_level.blue);
}

// setup() runs once, when the device is first turned on.
void setup()
{
   d4414:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4416:	b091      	sub	sp, #68	; 0x44

  Serial.begin(9600);
   d4418:	f003 fd56 	bl	d7ec8 <_Z16_fetch_usbserialv>
   d441c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4420:	f003 fd40 	bl	d7ea4 <_ZN9USBSerial5beginEl>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d4424:	2000      	movs	r0, #0
   d4426:	f000 fb89 	bl	d4b3c <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d442a:	2500      	movs	r5, #0
   d442c:	4604      	mov	r4, r0
   d442e:	f640 36b7 	movw	r6, #2999	; 0xbb7
   d4432:	2700      	movs	r7, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d4434:	2000      	movs	r0, #0
   d4436:	f000 fb81 	bl	d4b3c <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d443a:	1b00      	subs	r0, r0, r4
   d443c:	eb61 0105 	sbc.w	r1, r1, r5
   d4440:	428f      	cmp	r7, r1
   d4442:	bf08      	it	eq
   d4444:	4286      	cmpeq	r6, r0
   d4446:	d307      	bcc.n	d4458 <setup+0x44>
  // Wait for a USB serial connection for up to 30 seconds
  waitFor(Serial.isConnected, 3000);
   d4448:	f003 fd3e 	bl	d7ec8 <_Z16_fetch_usbserialv>
   d444c:	f003 fd31 	bl	d7eb2 <_ZN9USBSerial11isConnectedEv>
   d4450:	b910      	cbnz	r0, d4458 <setup+0x44>
            spark_process();
   d4452:	f000 fd17 	bl	d4e84 <spark_process>
   d4456:	e7ed      	b.n	d4434 <setup+0x20>
   d4458:	f003 fd36 	bl	d7ec8 <_Z16_fetch_usbserialv>

  myservo.attach(servo_pin);
   d445c:	2400      	movs	r4, #0
void setup()
{

  Serial.begin(9600);
  // Wait for a USB serial connection for up to 30 seconds
  waitFor(Serial.isConnected, 3000);
   d445e:	f003 fd28 	bl	d7eb2 <_ZN9USBSerial11isConnectedEv>

  myservo.attach(servo_pin);
   d4462:	23b4      	movs	r3, #180	; 0xb4
   d4464:	9301      	str	r3, [sp, #4]
   d4466:	f44f 7208 	mov.w	r2, #544	; 0x220
   d446a:	f44f 6316 	mov.w	r3, #2400	; 0x960
   d446e:	2110      	movs	r1, #16
   d4470:	9400      	str	r4, [sp, #0]
   d4472:	4848      	ldr	r0, [pc, #288]	; (d4594 <setup+0x180>)
   d4474:	f003 fb3e 	bl	d7af4 <_ZN5Servo6attachEtttss>
  Log.info("Setup Motor read %u", myservo.read());
   d4478:	4846      	ldr	r0, [pc, #280]	; (d4594 <setup+0x180>)
   d447a:	f003 fafd 	bl	d7a78 <_ZNK5Servo4readEv>
   d447e:	4946      	ldr	r1, [pc, #280]	; (d4598 <setup+0x184>)
   d4480:	4602      	mov	r2, r0
   d4482:	4846      	ldr	r0, [pc, #280]	; (d459c <setup+0x188>)
   d4484:	f7ff fe4c 	bl	d4120 <_ZNK5spark6Logger4infoEPKcz>
  // Enable app control of LED
  RGB.control(true);
   d4488:	2001      	movs	r0, #1
   d448a:	f003 fa8d 	bl	d79a8 <_ZN8RGBClass7controlEb>

  // Init default level
  m_led_level.red = 0;
   d448e:	4b44      	ldr	r3, [pc, #272]	; (d45a0 <setup+0x18c>)
   d4490:	701c      	strb	r4, [r3, #0]
  m_led_level.green = 0;
   d4492:	705c      	strb	r4, [r3, #1]
  m_led_level.blue = 0;
   d4494:	709c      	strb	r4, [r3, #2]

  // Add sayacCharacteristic
  BLE.addCharacteristic(sayacCharacteristic);
   d4496:	f001 f893 	bl	d55c0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d449a:	4a42      	ldr	r2, [pc, #264]	; (d45a4 <setup+0x190>)
   d449c:	4601      	mov	r1, r0
   d449e:	a807      	add	r0, sp, #28
   d44a0:	f001 fcec 	bl	d5e7c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d44a4:	a807      	add	r0, sp, #28
   d44a6:	f001 f947 	bl	d5738 <_ZN8particle17BleCharacteristicD1Ev>
  BLE.addCharacteristic(motorCharacteristic);
   d44aa:	f001 f889 	bl	d55c0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d44ae:	4a3e      	ldr	r2, [pc, #248]	; (d45a8 <setup+0x194>)
   d44b0:	4601      	mov	r1, r0
   d44b2:	a807      	add	r0, sp, #28
   d44b4:	f001 fce2 	bl	d5e7c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d44b8:	a807      	add	r0, sp, #28
   d44ba:	f001 f93d 	bl	d5738 <_ZN8particle17BleCharacteristicD1Ev>
  // Add the characteristics
  BLE.addCharacteristic(temperatureMeasurementCharacteristic);
   d44be:	f001 f87f 	bl	d55c0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d44c2:	4a3a      	ldr	r2, [pc, #232]	; (d45ac <setup+0x198>)
   d44c4:	4601      	mov	r1, r0
   d44c6:	a807      	add	r0, sp, #28
   d44c8:	f001 fcd8 	bl	d5e7c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d44cc:	a807      	add	r0, sp, #28
   d44ce:	f001 f933 	bl	d5738 <_ZN8particle17BleCharacteristicD1Ev>
  BLE.addCharacteristic(batteryLevelCharacteristic);
   d44d2:	f001 f875 	bl	d55c0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d44d6:	4a36      	ldr	r2, [pc, #216]	; (d45b0 <setup+0x19c>)
   d44d8:	4601      	mov	r1, r0
   d44da:	a807      	add	r0, sp, #28
   d44dc:	f001 fcce 	bl	d5e7c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d44e0:	a807      	add	r0, sp, #28
   d44e2:	f001 f929 	bl	d5738 <_ZN8particle17BleCharacteristicD1Ev>
  batteryLevelCharacteristic.setValue(&lastBattery, 1);
   d44e6:	4623      	mov	r3, r4
   d44e8:	2201      	movs	r2, #1
   d44ea:	4932      	ldr	r1, [pc, #200]	; (d45b4 <setup+0x1a0>)
   d44ec:	4830      	ldr	r0, [pc, #192]	; (d45b0 <setup+0x19c>)
   d44ee:	f000 ffb5 	bl	d545c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>

  BLE.addCharacteristic(redCharacteristic);
   d44f2:	f001 f865 	bl	d55c0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d44f6:	4a30      	ldr	r2, [pc, #192]	; (d45b8 <setup+0x1a4>)
   d44f8:	4601      	mov	r1, r0
   d44fa:	a807      	add	r0, sp, #28
   d44fc:	f001 fcbe 	bl	d5e7c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d4500:	a807      	add	r0, sp, #28
   d4502:	f001 f919 	bl	d5738 <_ZN8particle17BleCharacteristicD1Ev>
  BLE.addCharacteristic(greenCharacteristic);
   d4506:	f001 f85b 	bl	d55c0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d450a:	4a2c      	ldr	r2, [pc, #176]	; (d45bc <setup+0x1a8>)
   d450c:	4601      	mov	r1, r0
   d450e:	a807      	add	r0, sp, #28
   d4510:	f001 fcb4 	bl	d5e7c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d4514:	a807      	add	r0, sp, #28
   d4516:	f001 f90f 	bl	d5738 <_ZN8particle17BleCharacteristicD1Ev>
  BLE.addCharacteristic(blueCharacteristic);
   d451a:	f001 f851 	bl	d55c0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d451e:	4a28      	ldr	r2, [pc, #160]	; (d45c0 <setup+0x1ac>)
   d4520:	4601      	mov	r1, r0
   d4522:	a807      	add	r0, sp, #28
   d4524:	f001 fcaa 	bl	d5e7c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d4528:	a807      	add	r0, sp, #28
   d452a:	f001 f905 	bl	d5738 <_ZN8particle17BleCharacteristicD1Ev>

  // Advertising data
  BleAdvertisingData advData;
   d452e:	a807      	add	r0, sp, #28
   d4530:	f000 ff1b 	bl	d536a <_ZN8particle18BleAdvertisingDataC1Ev>

  // Add the device name
  advData.appendLocalName("Argon");
   d4534:	4923      	ldr	r1, [pc, #140]	; (d45c4 <setup+0x1b0>)
   d4536:	a807      	add	r0, sp, #28
   d4538:	f000 ff31 	bl	d539e <_ZN8particle18BleAdvertisingData15appendLocalNameEPKc>

  // only advertise the sayacService. Other services will be found after connecting.
  advData.appendServiceUUID(motorService);
   d453c:	4922      	ldr	r1, [pc, #136]	; (d45c8 <setup+0x1b4>)
   d453e:	a802      	add	r0, sp, #8
   d4540:	f000 fdb4 	bl	d50ac <_ZN8particle7BleUuidC1ERKS0_>
   d4544:	4622      	mov	r2, r4
   d4546:	a902      	add	r1, sp, #8
   d4548:	a807      	add	r0, sp, #28
   d454a:	f7ff ff41 	bl	d43d0 <_ZN8particle18BleAdvertisingData17appendServiceUUIDINS_7BleUuidEEEjT_b>

  // Add the RGB LED service
  advData.appendServiceUUID(rgbService);
   d454e:	491f      	ldr	r1, [pc, #124]	; (d45cc <setup+0x1b8>)
   d4550:	a802      	add	r0, sp, #8
   d4552:	f000 fdab 	bl	d50ac <_ZN8particle7BleUuidC1ERKS0_>
   d4556:	4622      	mov	r2, r4
   d4558:	a902      	add	r1, sp, #8
   d455a:	a807      	add	r0, sp, #28
   d455c:	f7ff ff38 	bl	d43d0 <_ZN8particle18BleAdvertisingData17appendServiceUUIDINS_7BleUuidEEEjT_b>
  advData.appendServiceUUID(healthThermometerService);
   d4560:	491b      	ldr	r1, [pc, #108]	; (d45d0 <setup+0x1bc>)
   d4562:	a802      	add	r0, sp, #8
   d4564:	f000 fda2 	bl	d50ac <_ZN8particle7BleUuidC1ERKS0_>
   d4568:	4622      	mov	r2, r4
   d456a:	a902      	add	r1, sp, #8
   d456c:	a807      	add	r0, sp, #28
   d456e:	f7ff ff2f 	bl	d43d0 <_ZN8particle18BleAdvertisingData17appendServiceUUIDINS_7BleUuidEEEjT_b>
  advData.appendServiceUUID(batteryLevelService);
   d4572:	4918      	ldr	r1, [pc, #96]	; (d45d4 <setup+0x1c0>)
   d4574:	a802      	add	r0, sp, #8
   d4576:	f000 fd99 	bl	d50ac <_ZN8particle7BleUuidC1ERKS0_>
   d457a:	4622      	mov	r2, r4
   d457c:	a902      	add	r1, sp, #8
   d457e:	a807      	add	r0, sp, #28
   d4580:	f7ff ff26 	bl	d43d0 <_ZN8particle18BleAdvertisingData17appendServiceUUIDINS_7BleUuidEEEjT_b>

  // Start advertising!
  BLE.advertise(&advData);
   d4584:	f001 f81c 	bl	d55c0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4588:	4622      	mov	r2, r4
   d458a:	a907      	add	r1, sp, #28
   d458c:	f001 f885 	bl	d569a <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
}
   d4590:	b011      	add	sp, #68	; 0x44
   d4592:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4594:	2003e374 	.word	0x2003e374
   d4598:	000d9052 	.word	0x000d9052
   d459c:	2003e3d0 	.word	0x2003e3d0
   d45a0:	2003e2bc 	.word	0x2003e2bc
   d45a4:	2003e304 	.word	0x2003e304
   d45a8:	2003e298 	.word	0x2003e298
   d45ac:	2003e2a4 	.word	0x2003e2a4
   d45b0:	2003e2b4 	.word	0x2003e2b4
   d45b4:	2003e210 	.word	0x2003e210
   d45b8:	2003e2d8 	.word	0x2003e2d8
   d45bc:	2003e344 	.word	0x2003e344
   d45c0:	2003e2e8 	.word	0x2003e2e8
   d45c4:	000d9066 	.word	0x000d9066
   d45c8:	2003e34c 	.word	0x2003e34c
   d45cc:	2003e2c4 	.word	0x2003e2c4
   d45d0:	2003e360 	.word	0x2003e360
   d45d4:	2003e2f0 	.word	0x2003e2f0

000d45d8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d45d8:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d45da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d45dc:	4606      	mov	r6, r0
   d45de:	460c      	mov	r4, r1
   d45e0:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d45e2:	d916      	bls.n	d4612 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   d45e4:	4290      	cmp	r0, r2
   d45e6:	d215      	bcs.n	d4614 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            // Move elements in reverse order
            --p;
            --end;
   d45e8:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
   d45ec:	1a6c      	subs	r4, r5, r1
   d45ee:	f1a1 0714 	sub.w	r7, r1, #20
   d45f2:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d45f4:	42af      	cmp	r7, r5
   d45f6:	d01c      	beq.n	d4632 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   d45f8:	b12c      	cbz	r4, d4606 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   d45fa:	4629      	mov	r1, r5
   d45fc:	4620      	mov	r0, r4
   d45fe:	f003 fac4 	bl	d7b8a <_ZN6StringC1EOS_>
   d4602:	7c2b      	ldrb	r3, [r5, #16]
   d4604:	7423      	strb	r3, [r4, #16]
   d4606:	4628      	mov	r0, r5
   d4608:	f003 facf 	bl	d7baa <_ZN6StringD1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d460c:	3d14      	subs	r5, #20
   d460e:	3c14      	subs	r4, #20
   d4610:	e7f0      	b.n	d45f4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d4612:	d00e      	beq.n	d4632 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   d4614:	42ac      	cmp	r4, r5
   d4616:	d00c      	beq.n	d4632 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   d4618:	b12e      	cbz	r6, d4626 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   d461a:	4621      	mov	r1, r4
   d461c:	4630      	mov	r0, r6
   d461e:	f003 fab4 	bl	d7b8a <_ZN6StringC1EOS_>
   d4622:	7c23      	ldrb	r3, [r4, #16]
   d4624:	7433      	strb	r3, [r6, #16]
   d4626:	4620      	mov	r0, r4
   d4628:	f003 fabf 	bl	d7baa <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d462c:	3414      	adds	r4, #20
   d462e:	3614      	adds	r6, #20
   d4630:	e7f0      	b.n	d4614 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
   d4632:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4634 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d4634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d4638:	2300      	movs	r3, #0
   d463a:	6003      	str	r3, [r0, #0]
   d463c:	6043      	str	r3, [r0, #4]
   d463e:	6083      	str	r3, [r0, #8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d4640:	684e      	ldr	r6, [r1, #4]
   d4642:	429e      	cmp	r6, r3
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d4644:	4604      	mov	r4, r0
   d4646:	460f      	mov	r7, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d4648:	dd24      	ble.n	d4694 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d464a:	f04f 0814 	mov.w	r8, #20
   d464e:	fb08 f006 	mul.w	r0, r8, r6
   d4652:	f000 fc77 	bl	d4f44 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d4656:	4605      	mov	r5, r0
   d4658:	b1e0      	cbz	r0, d4694 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
                return false;
            }
            move(d, data_, data_ + size_);
   d465a:	e894 0006 	ldmia.w	r4, {r1, r2}
   d465e:	fb08 1202 	mla	r2, r8, r2, r1
   d4662:	f7ff ffb9 	bl	d45d8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d4666:	6820      	ldr	r0, [r4, #0]
   d4668:	f000 fc74 	bl	d4f54 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d466c:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d466e:	60a6      	str	r6, [r4, #8]
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d4670:	683e      	ldr	r6, [r7, #0]
   d4672:	687b      	ldr	r3, [r7, #4]
   d4674:	fb08 6803 	mla	r8, r8, r3, r6
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d4678:	4546      	cmp	r6, r8
   d467a:	d009      	beq.n	d4690 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
            new(dest) T(*it);
   d467c:	b12d      	cbz	r5, d468a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x56>
   d467e:	4631      	mov	r1, r6
   d4680:	4628      	mov	r0, r5
   d4682:	f003 fafb 	bl	d7c7c <_ZN6StringC1ERKS_>
   d4686:	7c33      	ldrb	r3, [r6, #16]
   d4688:	742b      	strb	r3, [r5, #16]
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d468a:	3614      	adds	r6, #20
   d468c:	3514      	adds	r5, #20
   d468e:	e7f3      	b.n	d4678 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
        size_ = vector.size_;
   d4690:	687b      	ldr	r3, [r7, #4]
   d4692:	6063      	str	r3, [r4, #4]
    }
}
   d4694:	4620      	mov	r0, r4
   d4696:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d469c <_GLOBAL__sub_I_SystemMode>:
    // I'm pretty sure this only works for positive values of temperature, but that's OK for the health thermometer.
    uint8_t  exponent = 0xFE; // Exponent is -2
    uint32_t mantissa = (uint32_t)(temperature * 100);

    return (((uint32_t)exponent) << 24) | mantissa;
   d469c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d46a0:	b099      	sub	sp, #100	; 0x64

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d46a2:	f000 fa53 	bl	d4b4c <HAL_Pin_Map>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d46a6:	4b9a      	ldr	r3, [pc, #616]	; (d4910 <_GLOBAL__sub_I_SystemMode+0x274>)
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
        filter_(level, filters) {
   d46a8:	4f9a      	ldr	r7, [pc, #616]	; (d4914 <_GLOBAL__sub_I_SystemMode+0x278>)
const char *red = "6E400002-B5A3-F393-E0A9-E50E24DCCA9E";
const char *green = "6E400003-B5A3-F393-E0A9-E50E24DCCA9E";
const char *blue = "6E400004-B5A3-F393-E0A9-E50E24DCCA9E";

// Set the RGB BLE service
BleUuid rgbService(serviceUuid);
   d46aa:	f8df 92d0 	ldr.w	r9, [pc, #720]	; d497c <_GLOBAL__sub_I_SystemMode+0x2e0>

// Set the Health Thermometer and Battery Level service
BleUuid healthThermometerService(0x1809);
BleUuid batteryLevelService(0x180f);
   d46ae:	f8df b2d0 	ldr.w	fp, [pc, #720]	; d4980 <_GLOBAL__sub_I_SystemMode+0x2e4>

// Init motorService
BleUuid motorService(motorServiceUuid);
   d46b2:	f8df a2d0 	ldr.w	sl, [pc, #720]	; d4984 <_GLOBAL__sub_I_SystemMode+0x2e8>
   d46b6:	2400      	movs	r4, #0
   d46b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d46bc:	809a      	strh	r2, [r3, #4]
   d46be:	701c      	strb	r4, [r3, #0]
   d46c0:	805c      	strh	r4, [r3, #2]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d46c2:	2003      	movs	r0, #3
   d46c4:	f000 fbba 	bl	d4e3c <set_system_mode>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d46c8:	9404      	str	r4, [sp, #16]
   d46ca:	9405      	str	r4, [sp, #20]
   d46cc:	9406      	str	r4, [sp, #24]
namespace spark {

class SerialLogHandler: public StreamLogHandler {
public:
    explicit SerialLogHandler(LogLevel level = LOG_LEVEL_INFO, LogCategoryFilters filters = {}) :
            StreamLogHandler(Serial, level, filters) {
   d46ce:	f003 fbfb 	bl	d7ec8 <_Z16_fetch_usbserialv>
   d46d2:	a904      	add	r1, sp, #16
   d46d4:	4680      	mov	r8, r0
   d46d6:	a809      	add	r0, sp, #36	; 0x24
   d46d8:	f7ff ffac 	bl	d4634 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d46dc:	463d      	mov	r5, r7
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d46de:	a909      	add	r1, sp, #36	; 0x24
   d46e0:	a80e      	add	r0, sp, #56	; 0x38
   d46e2:	f7ff ffa7 	bl	d4634 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
        filter_(level, filters) {
   d46e6:	4b8c      	ldr	r3, [pc, #560]	; (d4918 <_GLOBAL__sub_I_SystemMode+0x27c>)
   d46e8:	f845 3b04 	str.w	r3, [r5], #4
   d46ec:	ae13      	add	r6, sp, #76	; 0x4c
   d46ee:	a90e      	add	r1, sp, #56	; 0x38
   d46f0:	4630      	mov	r0, r6
   d46f2:	f7ff ff9f 	bl	d4634 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d46f6:	4632      	mov	r2, r6
   d46f8:	211e      	movs	r1, #30
   d46fa:	4628      	mov	r0, r5
   d46fc:	f002 fc31 	bl	d6f62 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d4700:	4630      	mov	r0, r6
   d4702:	f7ff fe33 	bl	d436c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d4706:	a80e      	add	r0, sp, #56	; 0x38
   d4708:	f7ff fe30 	bl	d436c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d470c:	4b83      	ldr	r3, [pc, #524]	; (d491c <_GLOBAL__sub_I_SystemMode+0x280>)
   d470e:	603b      	str	r3, [r7, #0]
   d4710:	f8c7 8020 	str.w	r8, [r7, #32]
   d4714:	a809      	add	r0, sp, #36	; 0x24
   d4716:	f7ff fe29 	bl	d436c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d471a:	4b81      	ldr	r3, [pc, #516]	; (d4920 <_GLOBAL__sub_I_SystemMode+0x284>)
   d471c:	603b      	str	r3, [r7, #0]
        Serial.begin();
   d471e:	f003 fbd3 	bl	d7ec8 <_Z16_fetch_usbserialv>
   d4722:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4726:	f003 fbbd 	bl	d7ea4 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   d472a:	f002 f8c7 	bl	d68bc <_ZN5spark10LogManager8instanceEv>
   d472e:	4639      	mov	r1, r7
// #include "Wire.h"
// #include "lib/AM2320/src/AM2320.h"
// #include "lib/Adafruit_DHT/src/Adafruit_DHT.h"
// Device mac address 30:ae:a4:e5:44:c0
SYSTEM_MODE(MANUAL);
SerialLogHandler logHandler;
   d4730:	4d7c      	ldr	r5, [pc, #496]	; (d4924 <_GLOBAL__sub_I_SystemMode+0x288>)

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d4732:	f8df 8254 	ldr.w	r8, [pc, #596]	; d4988 <_GLOBAL__sub_I_SystemMode+0x2ec>
   d4736:	f002 fba7 	bl	d6e88 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
   d473a:	a804      	add	r0, sp, #16
   d473c:	f7ff fe16 	bl	d436c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d4740:	4638      	mov	r0, r7

String str;
   d4742:	4f79      	ldr	r7, [pc, #484]	; (d4928 <_GLOBAL__sub_I_SystemMode+0x28c>)
// #include "Wire.h"
// #include "lib/AM2320/src/AM2320.h"
// #include "lib/Adafruit_DHT/src/Adafruit_DHT.h"
// Device mac address 30:ae:a4:e5:44:c0
SYSTEM_MODE(MANUAL);
SerialLogHandler logHandler;
   d4744:	4979      	ldr	r1, [pc, #484]	; (d492c <_GLOBAL__sub_I_SystemMode+0x290>)
   d4746:	462a      	mov	r2, r5
   d4748:	f003 fcf2 	bl	d8130 <__aeabi_atexit>

String str;
   d474c:	4978      	ldr	r1, [pc, #480]	; (d4930 <_GLOBAL__sub_I_SystemMode+0x294>)
   d474e:	4638      	mov	r0, r7
   d4750:	f003 fa72 	bl	d7c38 <_ZN6StringC1EPK19__FlashStringHelper>
   d4754:	462a      	mov	r2, r5
   d4756:	4977      	ldr	r1, [pc, #476]	; (d4934 <_GLOBAL__sub_I_SystemMode+0x298>)
   d4758:	4638      	mov	r0, r7
   d475a:	f003 fce9 	bl	d8130 <__aeabi_atexit>

// Set the RGB BLE service
BleUuid rgbService(serviceUuid);

// Set the Health Thermometer and Battery Level service
BleUuid healthThermometerService(0x1809);
   d475e:	4f76      	ldr	r7, [pc, #472]	; (d4938 <_GLOBAL__sub_I_SystemMode+0x29c>)
uint8_t lastBattery = 100;

// sayac and servo
uint32_t sayac;
bool updatingMotor = false;
Servo myservo;
   d4760:	4876      	ldr	r0, [pc, #472]	; (d493c <_GLOBAL__sub_I_SystemMode+0x2a0>)
   d4762:	f003 f9b3 	bl	d7acc <_ZN5ServoC1Ev>
const char *red = "6E400002-B5A3-F393-E0A9-E50E24DCCA9E";
const char *green = "6E400003-B5A3-F393-E0A9-E50E24DCCA9E";
const char *blue = "6E400004-B5A3-F393-E0A9-E50E24DCCA9E";

// Set the RGB BLE service
BleUuid rgbService(serviceUuid);
   d4766:	f8d9 1000 	ldr.w	r1, [r9]
   d476a:	4875      	ldr	r0, [pc, #468]	; (d4940 <_GLOBAL__sub_I_SystemMode+0x2a4>)
   d476c:	f000 fd93 	bl	d5296 <_ZN8particle7BleUuidC1EPKc>

// Set the Health Thermometer and Battery Level service
BleUuid healthThermometerService(0x1809);
   d4770:	f641 0109 	movw	r1, #6153	; 0x1809
   d4774:	4638      	mov	r0, r7
   d4776:	f000 fcca 	bl	d510e <_ZN8particle7BleUuidC1Et>
BleUuid batteryLevelService(0x180f);
   d477a:	f641 010f 	movw	r1, #6159	; 0x180f
   d477e:	4658      	mov	r0, fp
   d4780:	f000 fcc5 	bl	d510e <_ZN8particle7BleUuidC1Et>

// Init motorService
BleUuid motorService(motorServiceUuid);
   d4784:	f8da 1000 	ldr.w	r1, [sl]
   d4788:	486e      	ldr	r0, [pc, #440]	; (d4944 <_GLOBAL__sub_I_SystemMode+0x2a8>)
   d478a:	f000 fd84 	bl	d5296 <_ZN8particle7BleUuidC1EPKc>

// Set up characteristics
BleCharacteristic temperatureMeasurementCharacteristic("temp", BleCharacteristicProperty::READ | BleCharacteristicProperty::NOTIFY, BleUuid(0x2A1C), healthThermometerService);
   d478e:	f642 211c 	movw	r1, #10780	; 0x2a1c
   d4792:	a804      	add	r0, sp, #16
   d4794:	f000 fcbb 	bl	d510e <_ZN8particle7BleUuidC1Et>
   d4798:	4639      	mov	r1, r7
   d479a:	a809      	add	r0, sp, #36	; 0x24
   d479c:	f000 fc86 	bl	d50ac <_ZN8particle7BleUuidC1ERKS0_>
   d47a0:	f8c8 4000 	str.w	r4, [r8]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d47a4:	f8c8 4004 	str.w	r4, [r8, #4]
            : BleCharacteristic(desc.c_str(), properties, callback, context) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, BleCharacteristicProperty properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
        BleUuid cUuid(charUuid);
   d47a8:	a904      	add	r1, sp, #16
   d47aa:	a80e      	add	r0, sp, #56	; 0x38
   d47ac:	4f66      	ldr	r7, [pc, #408]	; (d4948 <_GLOBAL__sub_I_SystemMode+0x2ac>)
   d47ae:	f000 fc7d 	bl	d50ac <_ZN8particle7BleUuidC1ERKS0_>
        BleUuid sUuid(svcUuid);
   d47b2:	a909      	add	r1, sp, #36	; 0x24
   d47b4:	4630      	mov	r0, r6
   d47b6:	f000 fc79 	bl	d50ac <_ZN8particle7BleUuidC1ERKS0_>
        construct(desc, properties, cUuid, sUuid, callback, context);
   d47ba:	ab0e      	add	r3, sp, #56	; 0x38
   d47bc:	4640      	mov	r0, r8
   d47be:	9402      	str	r4, [sp, #8]
   d47c0:	9401      	str	r4, [sp, #4]
   d47c2:	9600      	str	r6, [sp, #0]
   d47c4:	2212      	movs	r2, #18
   d47c6:	4961      	ldr	r1, [pc, #388]	; (d494c <_GLOBAL__sub_I_SystemMode+0x2b0>)
   d47c8:	f001 faa6 	bl	d5d18 <_ZN8particle17BleCharacteristic9constructEPKcNS_25BleCharacteristicPropertyERNS_7BleUuidES5_PFvPKhjRKNS_13BlePeerDeviceEPvESB_>
   d47cc:	462a      	mov	r2, r5
   d47ce:	4639      	mov	r1, r7
   d47d0:	4640      	mov	r0, r8
   d47d2:	f003 fcad 	bl	d8130 <__aeabi_atexit>

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d47d6:	f8df 81b4 	ldr.w	r8, [pc, #436]	; d498c <_GLOBAL__sub_I_SystemMode+0x2f0>
BleCharacteristic batteryLevelCharacteristic("bat", BleCharacteristicProperty::READ | BleCharacteristicProperty::NOTIFY, BleUuid(0x2A19), batteryLevelService);
   d47da:	f642 2119 	movw	r1, #10777	; 0x2a19
   d47de:	a804      	add	r0, sp, #16
   d47e0:	f000 fc95 	bl	d510e <_ZN8particle7BleUuidC1Et>
   d47e4:	4659      	mov	r1, fp
   d47e6:	a809      	add	r0, sp, #36	; 0x24
   d47e8:	f000 fc60 	bl	d50ac <_ZN8particle7BleUuidC1ERKS0_>
   d47ec:	f8c8 4000 	str.w	r4, [r8]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d47f0:	f8c8 4004 	str.w	r4, [r8, #4]
            : BleCharacteristic(desc.c_str(), properties, callback, context) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, BleCharacteristicProperty properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
        BleUuid cUuid(charUuid);
   d47f4:	a904      	add	r1, sp, #16
   d47f6:	a80e      	add	r0, sp, #56	; 0x38
   d47f8:	f000 fc58 	bl	d50ac <_ZN8particle7BleUuidC1ERKS0_>
        BleUuid sUuid(svcUuid);
   d47fc:	a909      	add	r1, sp, #36	; 0x24
   d47fe:	4630      	mov	r0, r6
   d4800:	f000 fc54 	bl	d50ac <_ZN8particle7BleUuidC1ERKS0_>
        construct(desc, properties, cUuid, sUuid, callback, context);
   d4804:	ab0e      	add	r3, sp, #56	; 0x38
   d4806:	4640      	mov	r0, r8
   d4808:	9402      	str	r4, [sp, #8]
   d480a:	9401      	str	r4, [sp, #4]
   d480c:	9600      	str	r6, [sp, #0]
   d480e:	2212      	movs	r2, #18
   d4810:	494f      	ldr	r1, [pc, #316]	; (d4950 <_GLOBAL__sub_I_SystemMode+0x2b4>)

BleCharacteristic redCharacteristic("red", BleCharacteristicProperty::WRITE_WO_RSP, red, serviceUuid, onDataReceived, (void *)red);
   d4812:	f8df b17c 	ldr.w	fp, [pc, #380]	; d4990 <_GLOBAL__sub_I_SystemMode+0x2f4>
   d4816:	f001 fa7f 	bl	d5d18 <_ZN8particle17BleCharacteristic9constructEPKcNS_25BleCharacteristicPropertyERNS_7BleUuidES5_PFvPKhjRKNS_13BlePeerDeviceEPvESB_>
// Init motorService
BleUuid motorService(motorServiceUuid);

// Set up characteristics
BleCharacteristic temperatureMeasurementCharacteristic("temp", BleCharacteristicProperty::READ | BleCharacteristicProperty::NOTIFY, BleUuid(0x2A1C), healthThermometerService);
BleCharacteristic batteryLevelCharacteristic("bat", BleCharacteristicProperty::READ | BleCharacteristicProperty::NOTIFY, BleUuid(0x2A19), batteryLevelService);
   d481a:	462a      	mov	r2, r5
   d481c:	4639      	mov	r1, r7
   d481e:	4640      	mov	r0, r8
   d4820:	f003 fc86 	bl	d8130 <__aeabi_atexit>

BleCharacteristic redCharacteristic("red", BleCharacteristicProperty::WRITE_WO_RSP, red, serviceUuid, onDataReceived, (void *)red);
   d4824:	4b4b      	ldr	r3, [pc, #300]	; (d4954 <_GLOBAL__sub_I_SystemMode+0x2b8>)
   d4826:	f8df 816c 	ldr.w	r8, [pc, #364]	; d4994 <_GLOBAL__sub_I_SystemMode+0x2f8>
   d482a:	681b      	ldr	r3, [r3, #0]
   d482c:	9302      	str	r3, [sp, #8]
   d482e:	f8cd 8004 	str.w	r8, [sp, #4]
   d4832:	f8d9 2000 	ldr.w	r2, [r9]
   d4836:	9200      	str	r2, [sp, #0]
   d4838:	4947      	ldr	r1, [pc, #284]	; (d4958 <_GLOBAL__sub_I_SystemMode+0x2bc>)
   d483a:	2204      	movs	r2, #4
   d483c:	4658      	mov	r0, fp
   d483e:	f7ff fda8 	bl	d4392 <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_25BleCharacteristicPropertyET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESC_>
   d4842:	462a      	mov	r2, r5
   d4844:	4639      	mov	r1, r7
   d4846:	4658      	mov	r0, fp
   d4848:	f003 fc72 	bl	d8130 <__aeabi_atexit>
BleCharacteristic greenCharacteristic("green", BleCharacteristicProperty::WRITE_WO_RSP, green, serviceUuid, onDataReceived, (void *)green);
   d484c:	4b43      	ldr	r3, [pc, #268]	; (d495c <_GLOBAL__sub_I_SystemMode+0x2c0>)
   d484e:	f8df b148 	ldr.w	fp, [pc, #328]	; d4998 <_GLOBAL__sub_I_SystemMode+0x2fc>
   d4852:	681b      	ldr	r3, [r3, #0]
   d4854:	9302      	str	r3, [sp, #8]
   d4856:	f8cd 8004 	str.w	r8, [sp, #4]
   d485a:	f8d9 2000 	ldr.w	r2, [r9]
   d485e:	9200      	str	r2, [sp, #0]
   d4860:	493f      	ldr	r1, [pc, #252]	; (d4960 <_GLOBAL__sub_I_SystemMode+0x2c4>)
   d4862:	2204      	movs	r2, #4
   d4864:	4658      	mov	r0, fp
   d4866:	f7ff fd94 	bl	d4392 <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_25BleCharacteristicPropertyET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESC_>
   d486a:	462a      	mov	r2, r5
   d486c:	4639      	mov	r1, r7
   d486e:	4658      	mov	r0, fp
   d4870:	f003 fc5e 	bl	d8130 <__aeabi_atexit>
BleCharacteristic blueCharacteristic("blue", BleCharacteristicProperty::WRITE_WO_RSP, blue, serviceUuid, onDataReceived, (void *)blue);
   d4874:	4b3b      	ldr	r3, [pc, #236]	; (d4964 <_GLOBAL__sub_I_SystemMode+0x2c8>)
   d4876:	f8df b124 	ldr.w	fp, [pc, #292]	; d499c <_GLOBAL__sub_I_SystemMode+0x300>
   d487a:	681b      	ldr	r3, [r3, #0]
   d487c:	9302      	str	r3, [sp, #8]
   d487e:	f8cd 8004 	str.w	r8, [sp, #4]
   d4882:	f8d9 2000 	ldr.w	r2, [r9]
   d4886:	9200      	str	r2, [sp, #0]
   d4888:	4937      	ldr	r1, [pc, #220]	; (d4968 <_GLOBAL__sub_I_SystemMode+0x2cc>)

// motor kar setup
BleCharacteristic motorCharacteristic("mottor", BleCharacteristicProperty::WRITE_WO_RSP, motorKarId, motorServiceUuid, onDataReceived, (void *)motorKarId);
   d488a:	f8df 9114 	ldr.w	r9, [pc, #276]	; d49a0 <_GLOBAL__sub_I_SystemMode+0x304>
BleCharacteristic temperatureMeasurementCharacteristic("temp", BleCharacteristicProperty::READ | BleCharacteristicProperty::NOTIFY, BleUuid(0x2A1C), healthThermometerService);
BleCharacteristic batteryLevelCharacteristic("bat", BleCharacteristicProperty::READ | BleCharacteristicProperty::NOTIFY, BleUuid(0x2A19), batteryLevelService);

BleCharacteristic redCharacteristic("red", BleCharacteristicProperty::WRITE_WO_RSP, red, serviceUuid, onDataReceived, (void *)red);
BleCharacteristic greenCharacteristic("green", BleCharacteristicProperty::WRITE_WO_RSP, green, serviceUuid, onDataReceived, (void *)green);
BleCharacteristic blueCharacteristic("blue", BleCharacteristicProperty::WRITE_WO_RSP, blue, serviceUuid, onDataReceived, (void *)blue);
   d488e:	2204      	movs	r2, #4
   d4890:	4658      	mov	r0, fp
   d4892:	f7ff fd7e 	bl	d4392 <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_25BleCharacteristicPropertyET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESC_>
   d4896:	462a      	mov	r2, r5
   d4898:	4639      	mov	r1, r7
   d489a:	4658      	mov	r0, fp
   d489c:	f003 fc48 	bl	d8130 <__aeabi_atexit>

// motor kar setup
BleCharacteristic motorCharacteristic("mottor", BleCharacteristicProperty::WRITE_WO_RSP, motorKarId, motorServiceUuid, onDataReceived, (void *)motorKarId);
   d48a0:	4b32      	ldr	r3, [pc, #200]	; (d496c <_GLOBAL__sub_I_SystemMode+0x2d0>)
   d48a2:	f8da 2000 	ldr.w	r2, [sl]
   d48a6:	681b      	ldr	r3, [r3, #0]
   d48a8:	9302      	str	r3, [sp, #8]
   d48aa:	f8cd 8004 	str.w	r8, [sp, #4]
   d48ae:	9200      	str	r2, [sp, #0]
   d48b0:	492f      	ldr	r1, [pc, #188]	; (d4970 <_GLOBAL__sub_I_SystemMode+0x2d4>)

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d48b2:	f8df 80f0 	ldr.w	r8, [pc, #240]	; d49a4 <_GLOBAL__sub_I_SystemMode+0x308>
   d48b6:	2204      	movs	r2, #4
   d48b8:	4648      	mov	r0, r9
   d48ba:	f7ff fd6a 	bl	d4392 <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_25BleCharacteristicPropertyET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESC_>
   d48be:	462a      	mov	r2, r5
   d48c0:	4639      	mov	r1, r7
   d48c2:	4648      	mov	r0, r9
   d48c4:	f003 fc34 	bl	d8130 <__aeabi_atexit>

// Inıt sayacCharacteristic
BleCharacteristic sayacCharacteristic("sayyac", BleCharacteristicProperty::READ | BleCharacteristicProperty::NOTIFY, sayacKarId, motorService);
   d48c8:	4b2a      	ldr	r3, [pc, #168]	; (d4974 <_GLOBAL__sub_I_SystemMode+0x2d8>)
   d48ca:	491e      	ldr	r1, [pc, #120]	; (d4944 <_GLOBAL__sub_I_SystemMode+0x2a8>)
   d48cc:	f8d3 9000 	ldr.w	r9, [r3]
   d48d0:	a809      	add	r0, sp, #36	; 0x24
   d48d2:	f000 fbeb 	bl	d50ac <_ZN8particle7BleUuidC1ERKS0_>
            : BleCharacteristic(desc.c_str(), properties, callback, context) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, BleCharacteristicProperty properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
        BleUuid cUuid(charUuid);
   d48d6:	4649      	mov	r1, r9
   d48d8:	f8c8 4000 	str.w	r4, [r8]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d48dc:	f8c8 4004 	str.w	r4, [r8, #4]
   d48e0:	a80e      	add	r0, sp, #56	; 0x38
   d48e2:	f000 fcd8 	bl	d5296 <_ZN8particle7BleUuidC1EPKc>
        BleUuid sUuid(svcUuid);
   d48e6:	a909      	add	r1, sp, #36	; 0x24
   d48e8:	4630      	mov	r0, r6
   d48ea:	f000 fbdf 	bl	d50ac <_ZN8particle7BleUuidC1ERKS0_>
        construct(desc, properties, cUuid, sUuid, callback, context);
   d48ee:	ab0e      	add	r3, sp, #56	; 0x38
   d48f0:	4640      	mov	r0, r8
   d48f2:	9402      	str	r4, [sp, #8]
   d48f4:	9401      	str	r4, [sp, #4]
   d48f6:	9600      	str	r6, [sp, #0]
   d48f8:	2212      	movs	r2, #18
   d48fa:	491f      	ldr	r1, [pc, #124]	; (d4978 <_GLOBAL__sub_I_SystemMode+0x2dc>)
   d48fc:	f001 fa0c 	bl	d5d18 <_ZN8particle17BleCharacteristic9constructEPKcNS_25BleCharacteristicPropertyERNS_7BleUuidES5_PFvPKhjRKNS_13BlePeerDeviceEPvESB_>
   d4900:	462a      	mov	r2, r5
   d4902:	4639      	mov	r1, r7
   d4904:	4640      	mov	r0, r8
   d4906:	f003 fc13 	bl	d8130 <__aeabi_atexit>
    // I'm pretty sure this only works for positive values of temperature, but that's OK for the health thermometer.
    uint8_t  exponent = 0xFE; // Exponent is -2
    uint32_t mantissa = (uint32_t)(temperature * 100);

    return (((uint32_t)exponent) << 24) | mantissa;
   d490a:	b019      	add	sp, #100	; 0x64
   d490c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4910:	2003e2ac 	.word	0x2003e2ac
   d4914:	2003e31c 	.word	0x2003e31c
   d4918:	000d8fc8 	.word	0x000d8fc8
   d491c:	000d955c 	.word	0x000d955c
   d4920:	000d8fe0 	.word	0x000d8fe0
   d4924:	2003e294 	.word	0x2003e294
   d4928:	2003e30c 	.word	0x2003e30c
   d492c:	000d40d9 	.word	0x000d40d9
   d4930:	000d9518 	.word	0x000d9518
   d4934:	000d7bab 	.word	0x000d7bab
   d4938:	2003e360 	.word	0x2003e360
   d493c:	2003e374 	.word	0x2003e374
   d4940:	2003e2c4 	.word	0x2003e2c4
   d4944:	2003e34c 	.word	0x2003e34c
   d4948:	000d5739 	.word	0x000d5739
   d494c:	000d906c 	.word	0x000d906c
   d4950:	000d9071 	.word	0x000d9071
   d4954:	2003e204 	.word	0x2003e204
   d4958:	000d9075 	.word	0x000d9075
   d495c:	2003e21c 	.word	0x2003e21c
   d4960:	000d9079 	.word	0x000d9079
   d4964:	2003e218 	.word	0x2003e218
   d4968:	000d907f 	.word	0x000d907f
   d496c:	2003e1fc 	.word	0x2003e1fc
   d4970:	000d9084 	.word	0x000d9084
   d4974:	2003e208 	.word	0x2003e208
   d4978:	000d908b 	.word	0x000d908b
   d497c:	2003e200 	.word	0x2003e200
   d4980:	2003e2f0 	.word	0x2003e2f0
   d4984:	2003e214 	.word	0x2003e214
   d4988:	2003e2a4 	.word	0x2003e2a4
   d498c:	2003e2b4 	.word	0x2003e2b4
   d4990:	2003e2d8 	.word	0x2003e2d8
   d4994:	000d4151 	.word	0x000d4151
   d4998:	2003e344 	.word	0x2003e344
   d499c:	2003e2e8 	.word	0x2003e2e8
   d49a0:	2003e298 	.word	0x2003e298
   d49a4:	2003e304 	.word	0x2003e304

000d49a8 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   d49a8:	b508      	push	{r3, lr}
   d49aa:	4b02      	ldr	r3, [pc, #8]	; (d49b4 <hal_ble_stack_init+0xc>)
   d49ac:	681b      	ldr	r3, [r3, #0]
   d49ae:	689b      	ldr	r3, [r3, #8]
   d49b0:	9301      	str	r3, [sp, #4]
   d49b2:	bd08      	pop	{r3, pc}
   d49b4:	00030278 	.word	0x00030278

000d49b8 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   d49b8:	b508      	push	{r3, lr}
   d49ba:	4b02      	ldr	r3, [pc, #8]	; (d49c4 <hal_ble_gap_set_advertising_data+0xc>)
   d49bc:	681b      	ldr	r3, [r3, #0]
   d49be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d49c0:	9301      	str	r3, [sp, #4]
   d49c2:	bd08      	pop	{r3, pc}
   d49c4:	00030278 	.word	0x00030278

000d49c8 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   d49c8:	b508      	push	{r3, lr}
   d49ca:	4b02      	ldr	r3, [pc, #8]	; (d49d4 <hal_ble_gap_set_scan_response_data+0xc>)
   d49cc:	681b      	ldr	r3, [r3, #0]
   d49ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d49d0:	9301      	str	r3, [sp, #4]
   d49d2:	bd08      	pop	{r3, pc}
   d49d4:	00030278 	.word	0x00030278

000d49d8 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   d49d8:	b508      	push	{r3, lr}
   d49da:	4b02      	ldr	r3, [pc, #8]	; (d49e4 <hal_ble_gap_start_advertising+0xc>)
   d49dc:	681b      	ldr	r3, [r3, #0]
   d49de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   d49e0:	9301      	str	r3, [sp, #4]
   d49e2:	bd08      	pop	{r3, pc}
   d49e4:	00030278 	.word	0x00030278

000d49e8 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   d49e8:	b508      	push	{r3, lr}
   d49ea:	4b03      	ldr	r3, [pc, #12]	; (d49f8 <hal_ble_gap_disconnect+0x10>)
   d49ec:	681b      	ldr	r3, [r3, #0]
   d49ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d49f2:	9301      	str	r3, [sp, #4]
   d49f4:	bd08      	pop	{r3, pc}
   d49f6:	0000      	.short	0x0000
   d49f8:	00030278 	.word	0x00030278

000d49fc <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   d49fc:	b508      	push	{r3, lr}
   d49fe:	4b03      	ldr	r3, [pc, #12]	; (d4a0c <hal_ble_gatt_server_add_service+0x10>)
   d4a00:	681b      	ldr	r3, [r3, #0]
   d4a02:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d4a06:	9301      	str	r3, [sp, #4]
   d4a08:	bd08      	pop	{r3, pc}
   d4a0a:	0000      	.short	0x0000
   d4a0c:	00030278 	.word	0x00030278

000d4a10 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d4a10:	b508      	push	{r3, lr}
   d4a12:	4b03      	ldr	r3, [pc, #12]	; (d4a20 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   d4a14:	681b      	ldr	r3, [r3, #0]
   d4a16:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   d4a1a:	9301      	str	r3, [sp, #4]
   d4a1c:	bd08      	pop	{r3, pc}
   d4a1e:	0000      	.short	0x0000
   d4a20:	00030278 	.word	0x00030278

000d4a24 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_set_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d4a24:	b508      	push	{r3, lr}
   d4a26:	4b03      	ldr	r3, [pc, #12]	; (d4a34 <hal_ble_gatt_client_write_with_response+0x10>)
   d4a28:	681b      	ldr	r3, [r3, #0]
   d4a2a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   d4a2e:	9301      	str	r3, [sp, #4]
   d4a30:	bd08      	pop	{r3, pc}
   d4a32:	0000      	.short	0x0000
   d4a34:	00030278 	.word	0x00030278

000d4a38 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d4a38:	b508      	push	{r3, lr}
   d4a3a:	4b03      	ldr	r3, [pc, #12]	; (d4a48 <hal_ble_gatt_client_write_without_response+0x10>)
   d4a3c:	681b      	ldr	r3, [r3, #0]
   d4a3e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   d4a42:	9301      	str	r3, [sp, #4]
   d4a44:	bd08      	pop	{r3, pc}
   d4a46:	0000      	.short	0x0000
   d4a48:	00030278 	.word	0x00030278

000d4a4c <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   d4a4c:	b508      	push	{r3, lr}
   d4a4e:	4b03      	ldr	r3, [pc, #12]	; (d4a5c <hal_ble_gatt_server_add_characteristic+0x10>)
   d4a50:	681b      	ldr	r3, [r3, #0]
   d4a52:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   d4a56:	9301      	str	r3, [sp, #4]
   d4a58:	bd08      	pop	{r3, pc}
   d4a5a:	0000      	.short	0x0000
   d4a5c:	00030278 	.word	0x00030278

000d4a60 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   d4a60:	b508      	push	{r3, lr}
   d4a62:	4b03      	ldr	r3, [pc, #12]	; (d4a70 <hal_ble_set_callback_on_periph_link_events+0x10>)
   d4a64:	681b      	ldr	r3, [r3, #0]
   d4a66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   d4a6a:	9301      	str	r3, [sp, #4]
   d4a6c:	bd08      	pop	{r3, pc}
   d4a6e:	0000      	.short	0x0000
   d4a70:	00030278 	.word	0x00030278

000d4a74 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d4a74:	b508      	push	{r3, lr}
   d4a76:	4b03      	ldr	r3, [pc, #12]	; (d4a84 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   d4a78:	681b      	ldr	r3, [r3, #0]
   d4a7a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   d4a7e:	9301      	str	r3, [sp, #4]
   d4a80:	bd08      	pop	{r3, pc}
   d4a82:	0000      	.short	0x0000
   d4a84:	00030278 	.word	0x00030278

000d4a88 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d4a88:	b508      	push	{r3, lr}
   d4a8a:	4b03      	ldr	r3, [pc, #12]	; (d4a98 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   d4a8c:	681b      	ldr	r3, [r3, #0]
   d4a8e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   d4a92:	9301      	str	r3, [sp, #4]
   d4a94:	bd08      	pop	{r3, pc}
   d4a96:	0000      	.short	0x0000
   d4a98:	00030278 	.word	0x00030278

000d4a9c <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4a9c:	b508      	push	{r3, lr}
   d4a9e:	4b02      	ldr	r3, [pc, #8]	; (d4aa8 <os_thread_is_current+0xc>)
   d4aa0:	681b      	ldr	r3, [r3, #0]
   d4aa2:	689b      	ldr	r3, [r3, #8]
   d4aa4:	9301      	str	r3, [sp, #4]
   d4aa6:	bd08      	pop	{r3, pc}
   d4aa8:	00030248 	.word	0x00030248

000d4aac <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4aac:	b508      	push	{r3, lr}
   d4aae:	4b02      	ldr	r3, [pc, #8]	; (d4ab8 <os_thread_join+0xc>)
   d4ab0:	681b      	ldr	r3, [r3, #0]
   d4ab2:	691b      	ldr	r3, [r3, #16]
   d4ab4:	9301      	str	r3, [sp, #4]
   d4ab6:	bd08      	pop	{r3, pc}
   d4ab8:	00030248 	.word	0x00030248

000d4abc <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4abc:	b508      	push	{r3, lr}
   d4abe:	4b02      	ldr	r3, [pc, #8]	; (d4ac8 <os_thread_cleanup+0xc>)
   d4ac0:	681b      	ldr	r3, [r3, #0]
   d4ac2:	695b      	ldr	r3, [r3, #20]
   d4ac4:	9301      	str	r3, [sp, #4]
   d4ac6:	bd08      	pop	{r3, pc}
   d4ac8:	00030248 	.word	0x00030248

000d4acc <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d4acc:	b508      	push	{r3, lr}
   d4ace:	4b02      	ldr	r3, [pc, #8]	; (d4ad8 <os_mutex_create+0xc>)
   d4ad0:	681b      	ldr	r3, [r3, #0]
   d4ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4ad4:	9301      	str	r3, [sp, #4]
   d4ad6:	bd08      	pop	{r3, pc}
   d4ad8:	00030248 	.word	0x00030248

000d4adc <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4adc:	b508      	push	{r3, lr}
   d4ade:	4b02      	ldr	r3, [pc, #8]	; (d4ae8 <os_mutex_recursive_create+0xc>)
   d4ae0:	681b      	ldr	r3, [r3, #0]
   d4ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4ae4:	9301      	str	r3, [sp, #4]
   d4ae6:	bd08      	pop	{r3, pc}
   d4ae8:	00030248 	.word	0x00030248

000d4aec <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d4aec:	b508      	push	{r3, lr}
   d4aee:	4b02      	ldr	r3, [pc, #8]	; (d4af8 <os_mutex_recursive_lock+0xc>)
   d4af0:	681b      	ldr	r3, [r3, #0]
   d4af2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4af4:	9301      	str	r3, [sp, #4]
   d4af6:	bd08      	pop	{r3, pc}
   d4af8:	00030248 	.word	0x00030248

000d4afc <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d4afc:	b508      	push	{r3, lr}
   d4afe:	4b02      	ldr	r3, [pc, #8]	; (d4b08 <os_mutex_recursive_unlock+0xc>)
   d4b00:	681b      	ldr	r3, [r3, #0]
   d4b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4b04:	9301      	str	r3, [sp, #4]
   d4b06:	bd08      	pop	{r3, pc}
   d4b08:	00030248 	.word	0x00030248

000d4b0c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4b0c:	b508      	push	{r3, lr}
   d4b0e:	4b02      	ldr	r3, [pc, #8]	; (d4b18 <HAL_RNG_GetRandomNumber+0xc>)
   d4b10:	681b      	ldr	r3, [r3, #0]
   d4b12:	685b      	ldr	r3, [r3, #4]
   d4b14:	9301      	str	r3, [sp, #4]
   d4b16:	bd08      	pop	{r3, pc}
   d4b18:	00030218 	.word	0x00030218

000d4b1c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d4b1c:	b508      	push	{r3, lr}
   d4b1e:	4b02      	ldr	r3, [pc, #8]	; (d4b28 <HAL_Delay_Microseconds+0xc>)
   d4b20:	681b      	ldr	r3, [r3, #0]
   d4b22:	68db      	ldr	r3, [r3, #12]
   d4b24:	9301      	str	r3, [sp, #4]
   d4b26:	bd08      	pop	{r3, pc}
   d4b28:	00030218 	.word	0x00030218

000d4b2c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4b2c:	b508      	push	{r3, lr}
   d4b2e:	4b02      	ldr	r3, [pc, #8]	; (d4b38 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4b30:	681b      	ldr	r3, [r3, #0]
   d4b32:	695b      	ldr	r3, [r3, #20]
   d4b34:	9301      	str	r3, [sp, #4]
   d4b36:	bd08      	pop	{r3, pc}
   d4b38:	00030218 	.word	0x00030218

000d4b3c <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d4b3c:	b508      	push	{r3, lr}
   d4b3e:	4b02      	ldr	r3, [pc, #8]	; (d4b48 <hal_timer_millis+0xc>)
   d4b40:	681b      	ldr	r3, [r3, #0]
   d4b42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d4b44:	9301      	str	r3, [sp, #4]
   d4b46:	bd08      	pop	{r3, pc}
   d4b48:	00030218 	.word	0x00030218

000d4b4c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4b4c:	b508      	push	{r3, lr}
   d4b4e:	4b02      	ldr	r3, [pc, #8]	; (d4b58 <HAL_Pin_Map+0xc>)
   d4b50:	681b      	ldr	r3, [r3, #0]
   d4b52:	681b      	ldr	r3, [r3, #0]
   d4b54:	9301      	str	r3, [sp, #4]
   d4b56:	bd08      	pop	{r3, pc}
   d4b58:	0003022c 	.word	0x0003022c

000d4b5c <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d4b5c:	b508      	push	{r3, lr}
   d4b5e:	4b02      	ldr	r3, [pc, #8]	; (d4b68 <HAL_Validate_Pin_Function+0xc>)
   d4b60:	681b      	ldr	r3, [r3, #0]
   d4b62:	685b      	ldr	r3, [r3, #4]
   d4b64:	9301      	str	r3, [sp, #4]
   d4b66:	bd08      	pop	{r3, pc}
   d4b68:	0003022c 	.word	0x0003022c

000d4b6c <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4b6c:	b508      	push	{r3, lr}
   d4b6e:	4b02      	ldr	r3, [pc, #8]	; (d4b78 <HAL_I2C_Write_Data+0xc>)
   d4b70:	681b      	ldr	r3, [r3, #0]
   d4b72:	6a1b      	ldr	r3, [r3, #32]
   d4b74:	9301      	str	r3, [sp, #4]
   d4b76:	bd08      	pop	{r3, pc}
   d4b78:	00030228 	.word	0x00030228

000d4b7c <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4b7c:	b508      	push	{r3, lr}
   d4b7e:	4b02      	ldr	r3, [pc, #8]	; (d4b88 <HAL_I2C_Available_Data+0xc>)
   d4b80:	681b      	ldr	r3, [r3, #0]
   d4b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4b84:	9301      	str	r3, [sp, #4]
   d4b86:	bd08      	pop	{r3, pc}
   d4b88:	00030228 	.word	0x00030228

000d4b8c <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4b8c:	b508      	push	{r3, lr}
   d4b8e:	4b02      	ldr	r3, [pc, #8]	; (d4b98 <HAL_I2C_Read_Data+0xc>)
   d4b90:	681b      	ldr	r3, [r3, #0]
   d4b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4b94:	9301      	str	r3, [sp, #4]
   d4b96:	bd08      	pop	{r3, pc}
   d4b98:	00030228 	.word	0x00030228

000d4b9c <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4b9c:	b508      	push	{r3, lr}
   d4b9e:	4b02      	ldr	r3, [pc, #8]	; (d4ba8 <HAL_I2C_Peek_Data+0xc>)
   d4ba0:	681b      	ldr	r3, [r3, #0]
   d4ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4ba4:	9301      	str	r3, [sp, #4]
   d4ba6:	bd08      	pop	{r3, pc}
   d4ba8:	00030228 	.word	0x00030228

000d4bac <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4bac:	b508      	push	{r3, lr}
   d4bae:	4b02      	ldr	r3, [pc, #8]	; (d4bb8 <HAL_I2C_Flush_Data+0xc>)
   d4bb0:	681b      	ldr	r3, [r3, #0]
   d4bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4bb4:	9301      	str	r3, [sp, #4]
   d4bb6:	bd08      	pop	{r3, pc}
   d4bb8:	00030228 	.word	0x00030228

000d4bbc <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d4bbc:	b508      	push	{r3, lr}
   d4bbe:	4b02      	ldr	r3, [pc, #8]	; (d4bc8 <HAL_I2C_Is_Enabled+0xc>)
   d4bc0:	681b      	ldr	r3, [r3, #0]
   d4bc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4bc4:	9301      	str	r3, [sp, #4]
   d4bc6:	bd08      	pop	{r3, pc}
   d4bc8:	00030228 	.word	0x00030228

000d4bcc <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d4bcc:	b508      	push	{r3, lr}
   d4bce:	4b02      	ldr	r3, [pc, #8]	; (d4bd8 <HAL_I2C_Init+0xc>)
   d4bd0:	681b      	ldr	r3, [r3, #0]
   d4bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4bd4:	9301      	str	r3, [sp, #4]
   d4bd6:	bd08      	pop	{r3, pc}
   d4bd8:	00030228 	.word	0x00030228

000d4bdc <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4bdc:	b508      	push	{r3, lr}
   d4bde:	4b02      	ldr	r3, [pc, #8]	; (d4be8 <inet_inet_ntop+0xc>)
   d4be0:	681b      	ldr	r3, [r3, #0]
   d4be2:	695b      	ldr	r3, [r3, #20]
   d4be4:	9301      	str	r3, [sp, #4]
   d4be6:	bd08      	pop	{r3, pc}
   d4be8:	00030264 	.word	0x00030264

000d4bec <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4bec:	b508      	push	{r3, lr}
   d4bee:	4b02      	ldr	r3, [pc, #8]	; (d4bf8 <netdb_freeaddrinfo+0xc>)
   d4bf0:	681b      	ldr	r3, [r3, #0]
   d4bf2:	689b      	ldr	r3, [r3, #8]
   d4bf4:	9301      	str	r3, [sp, #4]
   d4bf6:	bd08      	pop	{r3, pc}
   d4bf8:	00030268 	.word	0x00030268

000d4bfc <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4bfc:	b508      	push	{r3, lr}
   d4bfe:	4b02      	ldr	r3, [pc, #8]	; (d4c08 <netdb_getaddrinfo+0xc>)
   d4c00:	681b      	ldr	r3, [r3, #0]
   d4c02:	68db      	ldr	r3, [r3, #12]
   d4c04:	9301      	str	r3, [sp, #4]
   d4c06:	bd08      	pop	{r3, pc}
   d4c08:	00030268 	.word	0x00030268

000d4c0c <HAL_Servo_Attach>:
DYNALIB_FN(0, hal_peripherals, HAL_Tone_Start, void(uint8_t, uint32_t, uint32_t))
DYNALIB_FN(1, hal_peripherals, HAL_Tone_Stop, void(uint8_t))
DYNALIB_FN(2, hal_peripherals, HAL_Tone_Get_Frequency, uint32_t(uint8_t))
DYNALIB_FN(3, hal_peripherals, HAL_Tone_Is_Stopped, bool(uint8_t))

DYNALIB_FN(4, hal_peripherals, HAL_Servo_Attach, void(uint16_t))
   d4c0c:	b508      	push	{r3, lr}
   d4c0e:	4b02      	ldr	r3, [pc, #8]	; (d4c18 <HAL_Servo_Attach+0xc>)
   d4c10:	681b      	ldr	r3, [r3, #0]
   d4c12:	691b      	ldr	r3, [r3, #16]
   d4c14:	9301      	str	r3, [sp, #4]
   d4c16:	bd08      	pop	{r3, pc}
   d4c18:	00030224 	.word	0x00030224

000d4c1c <HAL_Servo_Detach>:
DYNALIB_FN(5, hal_peripherals, HAL_Servo_Detach, void(uint16_t))
   d4c1c:	b508      	push	{r3, lr}
   d4c1e:	4b02      	ldr	r3, [pc, #8]	; (d4c28 <HAL_Servo_Detach+0xc>)
   d4c20:	681b      	ldr	r3, [r3, #0]
   d4c22:	695b      	ldr	r3, [r3, #20]
   d4c24:	9301      	str	r3, [sp, #4]
   d4c26:	bd08      	pop	{r3, pc}
   d4c28:	00030224 	.word	0x00030224

000d4c2c <HAL_Servo_Write_Pulse_Width>:
DYNALIB_FN(6, hal_peripherals, HAL_Servo_Write_Pulse_Width, void(uint16_t, uint16_t))
   d4c2c:	b508      	push	{r3, lr}
   d4c2e:	4b02      	ldr	r3, [pc, #8]	; (d4c38 <HAL_Servo_Write_Pulse_Width+0xc>)
   d4c30:	681b      	ldr	r3, [r3, #0]
   d4c32:	699b      	ldr	r3, [r3, #24]
   d4c34:	9301      	str	r3, [sp, #4]
   d4c36:	bd08      	pop	{r3, pc}
   d4c38:	00030224 	.word	0x00030224

000d4c3c <HAL_Servo_Read_Pulse_Width>:
DYNALIB_FN(7, hal_peripherals, HAL_Servo_Read_Pulse_Width, uint16_t(uint16_t))
   d4c3c:	b508      	push	{r3, lr}
   d4c3e:	4b02      	ldr	r3, [pc, #8]	; (d4c48 <HAL_Servo_Read_Pulse_Width+0xc>)
   d4c40:	681b      	ldr	r3, [r3, #0]
   d4c42:	69db      	ldr	r3, [r3, #28]
   d4c44:	9301      	str	r3, [sp, #4]
   d4c46:	bd08      	pop	{r3, pc}
   d4c48:	00030224 	.word	0x00030224

000d4c4c <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4c4c:	b508      	push	{r3, lr}
   d4c4e:	4b02      	ldr	r3, [pc, #8]	; (d4c58 <HAL_SPI_Init+0xc>)
   d4c50:	681b      	ldr	r3, [r3, #0]
   d4c52:	69db      	ldr	r3, [r3, #28]
   d4c54:	9301      	str	r3, [sp, #4]
   d4c56:	bd08      	pop	{r3, pc}
   d4c58:	00030230 	.word	0x00030230

000d4c5c <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d4c5c:	b508      	push	{r3, lr}
   d4c5e:	4b02      	ldr	r3, [pc, #8]	; (d4c68 <HAL_SPI_Is_Enabled+0xc>)
   d4c60:	681b      	ldr	r3, [r3, #0]
   d4c62:	6a1b      	ldr	r3, [r3, #32]
   d4c64:	9301      	str	r3, [sp, #4]
   d4c66:	bd08      	pop	{r3, pc}
   d4c68:	00030230 	.word	0x00030230

000d4c6c <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4c6c:	b508      	push	{r3, lr}
   d4c6e:	4b02      	ldr	r3, [pc, #8]	; (d4c78 <HAL_USART_Init+0xc>)
   d4c70:	681b      	ldr	r3, [r3, #0]
   d4c72:	681b      	ldr	r3, [r3, #0]
   d4c74:	9301      	str	r3, [sp, #4]
   d4c76:	bd08      	pop	{r3, pc}
   d4c78:	0003023c 	.word	0x0003023c

000d4c7c <HAL_USART_End>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
   d4c7c:	b508      	push	{r3, lr}
   d4c7e:	4b02      	ldr	r3, [pc, #8]	; (d4c88 <HAL_USART_End+0xc>)
   d4c80:	681b      	ldr	r3, [r3, #0]
   d4c82:	689b      	ldr	r3, [r3, #8]
   d4c84:	9301      	str	r3, [sp, #4]
   d4c86:	bd08      	pop	{r3, pc}
   d4c88:	0003023c 	.word	0x0003023c

000d4c8c <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4c8c:	b508      	push	{r3, lr}
   d4c8e:	4b02      	ldr	r3, [pc, #8]	; (d4c98 <HAL_USART_Write_Data+0xc>)
   d4c90:	681b      	ldr	r3, [r3, #0]
   d4c92:	68db      	ldr	r3, [r3, #12]
   d4c94:	9301      	str	r3, [sp, #4]
   d4c96:	bd08      	pop	{r3, pc}
   d4c98:	0003023c 	.word	0x0003023c

000d4c9c <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4c9c:	b508      	push	{r3, lr}
   d4c9e:	4b02      	ldr	r3, [pc, #8]	; (d4ca8 <HAL_USART_Available_Data+0xc>)
   d4ca0:	681b      	ldr	r3, [r3, #0]
   d4ca2:	691b      	ldr	r3, [r3, #16]
   d4ca4:	9301      	str	r3, [sp, #4]
   d4ca6:	bd08      	pop	{r3, pc}
   d4ca8:	0003023c 	.word	0x0003023c

000d4cac <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4cac:	b508      	push	{r3, lr}
   d4cae:	4b02      	ldr	r3, [pc, #8]	; (d4cb8 <HAL_USART_Read_Data+0xc>)
   d4cb0:	681b      	ldr	r3, [r3, #0]
   d4cb2:	695b      	ldr	r3, [r3, #20]
   d4cb4:	9301      	str	r3, [sp, #4]
   d4cb6:	bd08      	pop	{r3, pc}
   d4cb8:	0003023c 	.word	0x0003023c

000d4cbc <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4cbc:	b508      	push	{r3, lr}
   d4cbe:	4b02      	ldr	r3, [pc, #8]	; (d4cc8 <HAL_USART_Peek_Data+0xc>)
   d4cc0:	681b      	ldr	r3, [r3, #0]
   d4cc2:	699b      	ldr	r3, [r3, #24]
   d4cc4:	9301      	str	r3, [sp, #4]
   d4cc6:	bd08      	pop	{r3, pc}
   d4cc8:	0003023c 	.word	0x0003023c

000d4ccc <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4ccc:	b508      	push	{r3, lr}
   d4cce:	4b02      	ldr	r3, [pc, #8]	; (d4cd8 <HAL_USART_Flush_Data+0xc>)
   d4cd0:	681b      	ldr	r3, [r3, #0]
   d4cd2:	69db      	ldr	r3, [r3, #28]
   d4cd4:	9301      	str	r3, [sp, #4]
   d4cd6:	bd08      	pop	{r3, pc}
   d4cd8:	0003023c 	.word	0x0003023c

000d4cdc <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d4cdc:	b508      	push	{r3, lr}
   d4cde:	4b02      	ldr	r3, [pc, #8]	; (d4ce8 <HAL_USART_Is_Enabled+0xc>)
   d4ce0:	681b      	ldr	r3, [r3, #0]
   d4ce2:	6a1b      	ldr	r3, [r3, #32]
   d4ce4:	9301      	str	r3, [sp, #4]
   d4ce6:	bd08      	pop	{r3, pc}
   d4ce8:	0003023c 	.word	0x0003023c

000d4cec <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4cec:	b508      	push	{r3, lr}
   d4cee:	4b02      	ldr	r3, [pc, #8]	; (d4cf8 <HAL_USART_Available_Data_For_Write+0xc>)
   d4cf0:	681b      	ldr	r3, [r3, #0]
   d4cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4cf4:	9301      	str	r3, [sp, #4]
   d4cf6:	bd08      	pop	{r3, pc}
   d4cf8:	0003023c 	.word	0x0003023c

000d4cfc <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
   d4cfc:	b508      	push	{r3, lr}
   d4cfe:	4b02      	ldr	r3, [pc, #8]	; (d4d08 <HAL_USART_BeginConfig+0xc>)
   d4d00:	681b      	ldr	r3, [r3, #0]
   d4d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4d04:	9301      	str	r3, [sp, #4]
   d4d06:	bd08      	pop	{r3, pc}
   d4d08:	0003023c 	.word	0x0003023c

000d4d0c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4d0c:	b508      	push	{r3, lr}
   d4d0e:	4b02      	ldr	r3, [pc, #8]	; (d4d18 <HAL_USB_USART_Init+0xc>)
   d4d10:	681b      	ldr	r3, [r3, #0]
   d4d12:	681b      	ldr	r3, [r3, #0]
   d4d14:	9301      	str	r3, [sp, #4]
   d4d16:	bd08      	pop	{r3, pc}
   d4d18:	0003024c 	.word	0x0003024c

000d4d1c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4d1c:	b508      	push	{r3, lr}
   d4d1e:	4b02      	ldr	r3, [pc, #8]	; (d4d28 <HAL_USB_USART_Begin+0xc>)
   d4d20:	681b      	ldr	r3, [r3, #0]
   d4d22:	685b      	ldr	r3, [r3, #4]
   d4d24:	9301      	str	r3, [sp, #4]
   d4d26:	bd08      	pop	{r3, pc}
   d4d28:	0003024c 	.word	0x0003024c

000d4d2c <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   d4d2c:	b508      	push	{r3, lr}
   d4d2e:	4b02      	ldr	r3, [pc, #8]	; (d4d38 <HAL_USB_USART_End+0xc>)
   d4d30:	681b      	ldr	r3, [r3, #0]
   d4d32:	689b      	ldr	r3, [r3, #8]
   d4d34:	9301      	str	r3, [sp, #4]
   d4d36:	bd08      	pop	{r3, pc}
   d4d38:	0003024c 	.word	0x0003024c

000d4d3c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4d3c:	b508      	push	{r3, lr}
   d4d3e:	4b02      	ldr	r3, [pc, #8]	; (d4d48 <HAL_USB_USART_Available_Data+0xc>)
   d4d40:	681b      	ldr	r3, [r3, #0]
   d4d42:	691b      	ldr	r3, [r3, #16]
   d4d44:	9301      	str	r3, [sp, #4]
   d4d46:	bd08      	pop	{r3, pc}
   d4d48:	0003024c 	.word	0x0003024c

000d4d4c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4d4c:	b508      	push	{r3, lr}
   d4d4e:	4b02      	ldr	r3, [pc, #8]	; (d4d58 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4d50:	681b      	ldr	r3, [r3, #0]
   d4d52:	695b      	ldr	r3, [r3, #20]
   d4d54:	9301      	str	r3, [sp, #4]
   d4d56:	bd08      	pop	{r3, pc}
   d4d58:	0003024c 	.word	0x0003024c

000d4d5c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4d5c:	b508      	push	{r3, lr}
   d4d5e:	4b02      	ldr	r3, [pc, #8]	; (d4d68 <HAL_USB_USART_Receive_Data+0xc>)
   d4d60:	681b      	ldr	r3, [r3, #0]
   d4d62:	699b      	ldr	r3, [r3, #24]
   d4d64:	9301      	str	r3, [sp, #4]
   d4d66:	bd08      	pop	{r3, pc}
   d4d68:	0003024c 	.word	0x0003024c

000d4d6c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4d6c:	b508      	push	{r3, lr}
   d4d6e:	4b02      	ldr	r3, [pc, #8]	; (d4d78 <HAL_USB_USART_Send_Data+0xc>)
   d4d70:	681b      	ldr	r3, [r3, #0]
   d4d72:	69db      	ldr	r3, [r3, #28]
   d4d74:	9301      	str	r3, [sp, #4]
   d4d76:	bd08      	pop	{r3, pc}
   d4d78:	0003024c 	.word	0x0003024c

000d4d7c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4d7c:	b508      	push	{r3, lr}
   d4d7e:	4b02      	ldr	r3, [pc, #8]	; (d4d88 <HAL_USB_USART_Flush_Data+0xc>)
   d4d80:	681b      	ldr	r3, [r3, #0]
   d4d82:	6a1b      	ldr	r3, [r3, #32]
   d4d84:	9301      	str	r3, [sp, #4]
   d4d86:	bd08      	pop	{r3, pc}
   d4d88:	0003024c 	.word	0x0003024c

000d4d8c <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   d4d8c:	b508      	push	{r3, lr}
   d4d8e:	4b02      	ldr	r3, [pc, #8]	; (d4d98 <HAL_USB_USART_Is_Connected+0xc>)
   d4d90:	681b      	ldr	r3, [r3, #0]
   d4d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4d94:	9301      	str	r3, [sp, #4]
   d4d96:	bd08      	pop	{r3, pc}
   d4d98:	0003024c 	.word	0x0003024c

000d4d9c <LED_SetSignalingColor>:
#endif // defined(DYNALIB_EXPORT)

DYNALIB_BEGIN(services)

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
   d4d9c:	b508      	push	{r3, lr}
   d4d9e:	4b02      	ldr	r3, [pc, #8]	; (d4da8 <LED_SetSignalingColor+0xc>)
   d4da0:	681b      	ldr	r3, [r3, #0]
   d4da2:	685b      	ldr	r3, [r3, #4]
   d4da4:	9301      	str	r3, [sp, #4]
   d4da6:	bd08      	pop	{r3, pc}
   d4da8:	00030260 	.word	0x00030260

000d4dac <LED_Signaling_Start>:
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
   d4dac:	b508      	push	{r3, lr}
   d4dae:	4b02      	ldr	r3, [pc, #8]	; (d4db8 <LED_Signaling_Start+0xc>)
   d4db0:	681b      	ldr	r3, [r3, #0]
   d4db2:	689b      	ldr	r3, [r3, #8]
   d4db4:	9301      	str	r3, [sp, #4]
   d4db6:	bd08      	pop	{r3, pc}
   d4db8:	00030260 	.word	0x00030260

000d4dbc <LED_Signaling_Stop>:
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
   d4dbc:	b508      	push	{r3, lr}
   d4dbe:	4b02      	ldr	r3, [pc, #8]	; (d4dc8 <LED_Signaling_Stop+0xc>)
   d4dc0:	681b      	ldr	r3, [r3, #0]
   d4dc2:	68db      	ldr	r3, [r3, #12]
   d4dc4:	9301      	str	r3, [sp, #4]
   d4dc6:	bd08      	pop	{r3, pc}
   d4dc8:	00030260 	.word	0x00030260

000d4dcc <LED_RGB_IsOverRidden>:
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
   d4dcc:	b508      	push	{r3, lr}
   d4dce:	4b02      	ldr	r3, [pc, #8]	; (d4dd8 <LED_RGB_IsOverRidden+0xc>)
   d4dd0:	681b      	ldr	r3, [r3, #0]
   d4dd2:	699b      	ldr	r3, [r3, #24]
   d4dd4:	9301      	str	r3, [sp, #4]
   d4dd6:	bd08      	pop	{r3, pc}
   d4dd8:	00030260 	.word	0x00030260

000d4ddc <LED_On>:
DYNALIB_FN(7, services, LED_On, void(Led_TypeDef))
   d4ddc:	b508      	push	{r3, lr}
   d4dde:	4b02      	ldr	r3, [pc, #8]	; (d4de8 <LED_On+0xc>)
   d4de0:	681b      	ldr	r3, [r3, #0]
   d4de2:	69db      	ldr	r3, [r3, #28]
   d4de4:	9301      	str	r3, [sp, #4]
   d4de6:	bd08      	pop	{r3, pc}
   d4de8:	00030260 	.word	0x00030260

000d4dec <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d4dec:	b508      	push	{r3, lr}
   d4dee:	4b02      	ldr	r3, [pc, #8]	; (d4df8 <panic_+0xc>)
   d4df0:	681b      	ldr	r3, [r3, #0]
   d4df2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4df4:	9301      	str	r3, [sp, #4]
   d4df6:	bd08      	pop	{r3, pc}
   d4df8:	00030260 	.word	0x00030260

000d4dfc <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d4dfc:	b508      	push	{r3, lr}
   d4dfe:	4b02      	ldr	r3, [pc, #8]	; (d4e08 <log_message+0xc>)
   d4e00:	681b      	ldr	r3, [r3, #0]
   d4e02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4e04:	9301      	str	r3, [sp, #4]
   d4e06:	bd08      	pop	{r3, pc}
   d4e08:	00030260 	.word	0x00030260

000d4e0c <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d4e0c:	b508      	push	{r3, lr}
   d4e0e:	4b02      	ldr	r3, [pc, #8]	; (d4e18 <log_message_v+0xc>)
   d4e10:	681b      	ldr	r3, [r3, #0]
   d4e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4e14:	9301      	str	r3, [sp, #4]
   d4e16:	bd08      	pop	{r3, pc}
   d4e18:	00030260 	.word	0x00030260

000d4e1c <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   d4e1c:	b508      	push	{r3, lr}
   d4e1e:	4b02      	ldr	r3, [pc, #8]	; (d4e28 <log_level_name+0xc>)
   d4e20:	681b      	ldr	r3, [r3, #0]
   d4e22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d4e24:	9301      	str	r3, [sp, #4]
   d4e26:	bd08      	pop	{r3, pc}
   d4e28:	00030260 	.word	0x00030260

000d4e2c <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   d4e2c:	b508      	push	{r3, lr}
   d4e2e:	4b02      	ldr	r3, [pc, #8]	; (d4e38 <log_set_callbacks+0xc>)
   d4e30:	681b      	ldr	r3, [r3, #0]
   d4e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d4e34:	9301      	str	r3, [sp, #4]
   d4e36:	bd08      	pop	{r3, pc}
   d4e38:	00030260 	.word	0x00030260

000d4e3c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4e3c:	b508      	push	{r3, lr}
   d4e3e:	4b02      	ldr	r3, [pc, #8]	; (d4e48 <set_system_mode+0xc>)
   d4e40:	681b      	ldr	r3, [r3, #0]
   d4e42:	685b      	ldr	r3, [r3, #4]
   d4e44:	9301      	str	r3, [sp, #4]
   d4e46:	bd08      	pop	{r3, pc}
   d4e48:	00030220 	.word	0x00030220

000d4e4c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4e4c:	b508      	push	{r3, lr}
   d4e4e:	4b02      	ldr	r3, [pc, #8]	; (d4e58 <system_delay_ms+0xc>)
   d4e50:	681b      	ldr	r3, [r3, #0]
   d4e52:	695b      	ldr	r3, [r3, #20]
   d4e54:	9301      	str	r3, [sp, #4]
   d4e56:	bd08      	pop	{r3, pc}
   d4e58:	00030220 	.word	0x00030220

000d4e5c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4e5c:	b508      	push	{r3, lr}
   d4e5e:	4b03      	ldr	r3, [pc, #12]	; (d4e6c <system_ctrl_set_app_request_handler+0x10>)
   d4e60:	681b      	ldr	r3, [r3, #0]
   d4e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4e66:	9301      	str	r3, [sp, #4]
   d4e68:	bd08      	pop	{r3, pc}
   d4e6a:	0000      	.short	0x0000
   d4e6c:	00030220 	.word	0x00030220

000d4e70 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4e70:	b508      	push	{r3, lr}
   d4e72:	4b03      	ldr	r3, [pc, #12]	; (d4e80 <system_ctrl_set_result+0x10>)
   d4e74:	681b      	ldr	r3, [r3, #0]
   d4e76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4e7a:	9301      	str	r3, [sp, #4]
   d4e7c:	bd08      	pop	{r3, pc}
   d4e7e:	0000      	.short	0x0000
   d4e80:	00030220 	.word	0x00030220

000d4e84 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d4e84:	b508      	push	{r3, lr}
   d4e86:	4b02      	ldr	r3, [pc, #8]	; (d4e90 <spark_process+0xc>)
   d4e88:	681b      	ldr	r3, [r3, #0]
   d4e8a:	689b      	ldr	r3, [r3, #8]
   d4e8c:	9301      	str	r3, [sp, #4]
   d4e8e:	bd08      	pop	{r3, pc}
   d4e90:	00030244 	.word	0x00030244

000d4e94 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4e94:	b508      	push	{r3, lr}
   d4e96:	4b02      	ldr	r3, [pc, #8]	; (d4ea0 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4e98:	681b      	ldr	r3, [r3, #0]
   d4e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4e9c:	9301      	str	r3, [sp, #4]
   d4e9e:	bd08      	pop	{r3, pc}
   d4ea0:	00030244 	.word	0x00030244

000d4ea4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4ea4:	b508      	push	{r3, lr}
   d4ea6:	4b02      	ldr	r3, [pc, #8]	; (d4eb0 <network_connect+0xc>)
   d4ea8:	681b      	ldr	r3, [r3, #0]
   d4eaa:	685b      	ldr	r3, [r3, #4]
   d4eac:	9301      	str	r3, [sp, #4]
   d4eae:	bd08      	pop	{r3, pc}
   d4eb0:	00030240 	.word	0x00030240

000d4eb4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4eb4:	b508      	push	{r3, lr}
   d4eb6:	4b02      	ldr	r3, [pc, #8]	; (d4ec0 <network_connecting+0xc>)
   d4eb8:	681b      	ldr	r3, [r3, #0]
   d4eba:	689b      	ldr	r3, [r3, #8]
   d4ebc:	9301      	str	r3, [sp, #4]
   d4ebe:	bd08      	pop	{r3, pc}
   d4ec0:	00030240 	.word	0x00030240

000d4ec4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4ec4:	b508      	push	{r3, lr}
   d4ec6:	4b02      	ldr	r3, [pc, #8]	; (d4ed0 <network_disconnect+0xc>)
   d4ec8:	681b      	ldr	r3, [r3, #0]
   d4eca:	68db      	ldr	r3, [r3, #12]
   d4ecc:	9301      	str	r3, [sp, #4]
   d4ece:	bd08      	pop	{r3, pc}
   d4ed0:	00030240 	.word	0x00030240

000d4ed4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4ed4:	b508      	push	{r3, lr}
   d4ed6:	4b02      	ldr	r3, [pc, #8]	; (d4ee0 <network_ready+0xc>)
   d4ed8:	681b      	ldr	r3, [r3, #0]
   d4eda:	691b      	ldr	r3, [r3, #16]
   d4edc:	9301      	str	r3, [sp, #4]
   d4ede:	bd08      	pop	{r3, pc}
   d4ee0:	00030240 	.word	0x00030240

000d4ee4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4ee4:	b508      	push	{r3, lr}
   d4ee6:	4b02      	ldr	r3, [pc, #8]	; (d4ef0 <network_on+0xc>)
   d4ee8:	681b      	ldr	r3, [r3, #0]
   d4eea:	695b      	ldr	r3, [r3, #20]
   d4eec:	9301      	str	r3, [sp, #4]
   d4eee:	bd08      	pop	{r3, pc}
   d4ef0:	00030240 	.word	0x00030240

000d4ef4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4ef4:	b508      	push	{r3, lr}
   d4ef6:	4b02      	ldr	r3, [pc, #8]	; (d4f00 <network_off+0xc>)
   d4ef8:	681b      	ldr	r3, [r3, #0]
   d4efa:	699b      	ldr	r3, [r3, #24]
   d4efc:	9301      	str	r3, [sp, #4]
   d4efe:	bd08      	pop	{r3, pc}
   d4f00:	00030240 	.word	0x00030240

000d4f04 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4f04:	b508      	push	{r3, lr}
   d4f06:	4b02      	ldr	r3, [pc, #8]	; (d4f10 <network_listen+0xc>)
   d4f08:	681b      	ldr	r3, [r3, #0]
   d4f0a:	69db      	ldr	r3, [r3, #28]
   d4f0c:	9301      	str	r3, [sp, #4]
   d4f0e:	bd08      	pop	{r3, pc}
   d4f10:	00030240 	.word	0x00030240

000d4f14 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4f14:	b508      	push	{r3, lr}
   d4f16:	4b02      	ldr	r3, [pc, #8]	; (d4f20 <network_listening+0xc>)
   d4f18:	681b      	ldr	r3, [r3, #0]
   d4f1a:	6a1b      	ldr	r3, [r3, #32]
   d4f1c:	9301      	str	r3, [sp, #4]
   d4f1e:	bd08      	pop	{r3, pc}
   d4f20:	00030240 	.word	0x00030240

000d4f24 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4f24:	b508      	push	{r3, lr}
   d4f26:	4b02      	ldr	r3, [pc, #8]	; (d4f30 <network_set_listen_timeout+0xc>)
   d4f28:	681b      	ldr	r3, [r3, #0]
   d4f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4f2c:	9301      	str	r3, [sp, #4]
   d4f2e:	bd08      	pop	{r3, pc}
   d4f30:	00030240 	.word	0x00030240

000d4f34 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4f34:	b508      	push	{r3, lr}
   d4f36:	4b02      	ldr	r3, [pc, #8]	; (d4f40 <network_get_listen_timeout+0xc>)
   d4f38:	681b      	ldr	r3, [r3, #0]
   d4f3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4f3c:	9301      	str	r3, [sp, #4]
   d4f3e:	bd08      	pop	{r3, pc}
   d4f40:	00030240 	.word	0x00030240

000d4f44 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4f44:	b508      	push	{r3, lr}
   d4f46:	4b02      	ldr	r3, [pc, #8]	; (d4f50 <malloc+0xc>)
   d4f48:	681b      	ldr	r3, [r3, #0]
   d4f4a:	681b      	ldr	r3, [r3, #0]
   d4f4c:	9301      	str	r3, [sp, #4]
   d4f4e:	bd08      	pop	{r3, pc}
   d4f50:	0003021c 	.word	0x0003021c

000d4f54 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4f54:	b508      	push	{r3, lr}
   d4f56:	4b02      	ldr	r3, [pc, #8]	; (d4f60 <free+0xc>)
   d4f58:	681b      	ldr	r3, [r3, #0]
   d4f5a:	685b      	ldr	r3, [r3, #4]
   d4f5c:	9301      	str	r3, [sp, #4]
   d4f5e:	bd08      	pop	{r3, pc}
   d4f60:	0003021c 	.word	0x0003021c

000d4f64 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4f64:	b508      	push	{r3, lr}
   d4f66:	4b02      	ldr	r3, [pc, #8]	; (d4f70 <realloc+0xc>)
   d4f68:	681b      	ldr	r3, [r3, #0]
   d4f6a:	689b      	ldr	r3, [r3, #8]
   d4f6c:	9301      	str	r3, [sp, #4]
   d4f6e:	bd08      	pop	{r3, pc}
   d4f70:	0003021c 	.word	0x0003021c

000d4f74 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d4f74:	b508      	push	{r3, lr}
   d4f76:	4b02      	ldr	r3, [pc, #8]	; (d4f80 <vsnprintf+0xc>)
   d4f78:	681b      	ldr	r3, [r3, #0]
   d4f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4f7c:	9301      	str	r3, [sp, #4]
   d4f7e:	bd08      	pop	{r3, pc}
   d4f80:	0003021c 	.word	0x0003021c

000d4f84 <_Z3mapiiiii>:
    HAL_ADC_Set_Sample_Time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   d4f84:	428a      	cmp	r2, r1
{
    HAL_ADC_Set_Sample_Time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
   d4f86:	b530      	push	{r4, r5, lr}
    if (fromEnd == fromStart) {
   d4f88:	d007      	beq.n	d4f9a <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   d4f8a:	9d03      	ldr	r5, [sp, #12]
   d4f8c:	1a44      	subs	r4, r0, r1
   d4f8e:	1aed      	subs	r5, r5, r3
   d4f90:	436c      	muls	r4, r5
   d4f92:	1a52      	subs	r2, r2, r1
   d4f94:	fb94 f4f2 	sdiv	r4, r4, r2
   d4f98:	18e0      	adds	r0, r4, r3
}
   d4f9a:	bd30      	pop	{r4, r5, pc}

000d4f9c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4f9c:	2100      	movs	r1, #0
   d4f9e:	f7ff bf55 	b.w	d4e4c <system_delay_ms>

000d4fa2 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d4fa2:	4770      	bx	lr

000d4fa4 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d4fa4:	2000      	movs	r0, #0
   d4fa6:	4770      	bx	lr

000d4fa8 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d4fa8:	4770      	bx	lr

000d4faa <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d4faa:	2000      	movs	r0, #0
   d4fac:	4770      	bx	lr

000d4fae <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d4fae:	4770      	bx	lr

000d4fb0 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d4fb0:	2000      	movs	r0, #0
   d4fb2:	4770      	bx	lr

000d4fb4 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d4fb4:	b510      	push	{r4, lr}
   d4fb6:	2114      	movs	r1, #20
   d4fb8:	4604      	mov	r4, r0
   d4fba:	f003 f8be 	bl	d813a <_ZdlPvj>
   d4fbe:	4620      	mov	r0, r4
   d4fc0:	bd10      	pop	{r4, pc}

000d4fc2 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
   d4fc2:	b510      	push	{r4, lr}
   d4fc4:	2114      	movs	r1, #20
   d4fc6:	4604      	mov	r4, r0
   d4fc8:	f003 f8b7 	bl	d813a <_ZdlPvj>
   d4fcc:	4620      	mov	r0, r4
   d4fce:	bd10      	pop	{r4, pc}

000d4fd0 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
   d4fd0:	b510      	push	{r4, lr}
   d4fd2:	2114      	movs	r1, #20
   d4fd4:	4604      	mov	r4, r0
   d4fd6:	f003 f8b0 	bl	d813a <_ZdlPvj>
   d4fda:	4620      	mov	r0, r4
   d4fdc:	bd10      	pop	{r4, pc}

000d4fde <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d4fde:	f7ff b85e 	b.w	d409e <_ZdlPv>

000d4fe2 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
   d4fe2:	f7ff b85c 	b.w	d409e <_ZdlPv>

000d4fe6 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
   d4fe6:	f7ff b85a 	b.w	d409e <_ZdlPv>
	...

000d4fec <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.101>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d4fec:	b508      	push	{r3, lr}
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
   d4fee:	200a      	movs	r0, #10
   d4ff0:	4a02      	ldr	r2, [pc, #8]	; (d4ffc <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.101+0x10>)
   d4ff2:	2100      	movs	r1, #0
   d4ff4:	f7ff fefa 	bl	d4dec <panic_>
    }
}
   d4ff8:	bd08      	pop	{r3, pc}
   d4ffa:	bf00      	nop
   d4ffc:	000d4b1d 	.word	0x000d4b1d

000d5000 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.110>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d5000:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d5002:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d5004:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d5006:	689b      	ldr	r3, [r3, #8]
   d5008:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d500a:	68a3      	ldr	r3, [r4, #8]
   d500c:	3b01      	subs	r3, #1
   d500e:	60a3      	str	r3, [r4, #8]
   d5010:	b92b      	cbnz	r3, d501e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.110+0x1e>
            _M_destroy();
   d5012:	6823      	ldr	r3, [r4, #0]
   d5014:	4620      	mov	r0, r4
   d5016:	68db      	ldr	r3, [r3, #12]
        }
    }
   d5018:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d501c:	4718      	bx	r3
   d501e:	bd10      	pop	{r4, pc}

000d5020 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   d5020:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d5024:	b2da      	uxtb	r2, r3
   d5026:	2a09      	cmp	r2, #9
   d5028:	d801      	bhi.n	d502e <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   d502a:	4618      	mov	r0, r3
   d502c:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   d502e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d5032:	2b05      	cmp	r3, #5
   d5034:	d801      	bhi.n	d503a <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   d5036:	3857      	subs	r0, #87	; 0x57
   d5038:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   d503a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d503e:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   d5040:	bf94      	ite	ls
   d5042:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   d5044:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
   d5048:	4770      	bx	lr
	...

000d504c <_ZN8particle3ble13WiringBleLockC1Ev>:

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d504c:	b510      	push	{r4, lr}
            locked_(false) {
   d504e:	2300      	movs	r3, #0
   d5050:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d5052:	4b04      	ldr	r3, [pc, #16]	; (d5064 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d5054:	4604      	mov	r4, r0
   d5056:	6818      	ldr	r0, [r3, #0]
   d5058:	f7ff fd48 	bl	d4aec <os_mutex_recursive_lock>
        lock.locked_ = false;
    }

    void lock() {
        mutex_.lock();
        locked_ = true;
   d505c:	2301      	movs	r3, #1
   d505e:	7023      	strb	r3, [r4, #0]
class WiringBleLock {
public:
    WiringBleLock() :
            locked_(false) {
        lock();
    }
   d5060:	4620      	mov	r0, r4
   d5062:	bd10      	pop	{r4, pc}
   d5064:	2003e390 	.word	0x2003e390

000d5068 <_ZN8particle3ble13WiringBleLockD1Ev>:

    ~WiringBleLock() {
   d5068:	b510      	push	{r4, lr}
        if (locked_) {
   d506a:	7803      	ldrb	r3, [r0, #0]
    WiringBleLock() :
            locked_(false) {
        lock();
    }

    ~WiringBleLock() {
   d506c:	4604      	mov	r4, r0
        if (locked_) {
   d506e:	b11b      	cbz	r3, d5078 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d5070:	4b02      	ldr	r3, [pc, #8]	; (d507c <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   d5072:	6818      	ldr	r0, [r3, #0]
   d5074:	f7ff fd42 	bl	d4afc <os_mutex_recursive_unlock>
            unlock();
        }
    }
   d5078:	4620      	mov	r0, r4
   d507a:	bd10      	pop	{r4, pc}
   d507c:	2003e390 	.word	0x2003e390

000d5080 <_ZNK8particle10BleAddresseqERKS0_>:
BleAddress& BleAddress::operator=(const uint8_t addr[BLE_SIG_ADDR_LEN]) {
    memcpy(address_.addr, addr, BLE_SIG_ADDR_LEN);
    return *this;
}

bool BleAddress::operator==(const BleAddress& addr) const {
   d5080:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   d5082:	7982      	ldrb	r2, [r0, #6]
   d5084:	798b      	ldrb	r3, [r1, #6]
   d5086:	429a      	cmp	r2, r3
   d5088:	d106      	bne.n	d5098 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   d508a:	2206      	movs	r2, #6
   d508c:	f003 fe00 	bl	d8c90 <memcmp>
   d5090:	fab0 f080 	clz	r0, r0
   d5094:	0940      	lsrs	r0, r0, #5
   d5096:	bd08      	pop	{r3, pc}
        return true;
    }
    return false;
   d5098:	2000      	movs	r0, #0
}
   d509a:	bd08      	pop	{r3, pc}

000d509c <_ZN8particle7BleUuidC1Ev>:


/*******************************************************
 * BleUuid class
 */
BleUuid::BleUuid()
   d509c:	b510      	push	{r4, lr}
        : uuid_() {
   d509e:	2214      	movs	r2, #20


/*******************************************************
 * BleUuid class
 */
BleUuid::BleUuid()
   d50a0:	4604      	mov	r4, r0
        : uuid_() {
   d50a2:	2100      	movs	r1, #0
   d50a4:	f003 fe29 	bl	d8cfa <memset>
}
   d50a8:	4620      	mov	r0, r4
   d50aa:	bd10      	pop	{r4, pc}

000d50ac <_ZN8particle7BleUuidC1ERKS0_>:

BleUuid::BleUuid(const hal_ble_uuid_t& uuid) {
    uuid_ = uuid;
}

BleUuid::BleUuid(const BleUuid& uuid)
   d50ac:	b510      	push	{r4, lr}
        : uuid_(uuid.uuid_) {
   d50ae:	4603      	mov	r3, r0
   d50b0:	f101 0214 	add.w	r2, r1, #20
   d50b4:	f851 4b04 	ldr.w	r4, [r1], #4
   d50b8:	f843 4b04 	str.w	r4, [r3], #4
   d50bc:	4291      	cmp	r1, r2
   d50be:	d1f9      	bne.n	d50b4 <_ZN8particle7BleUuidC1ERKS0_+0x8>
}
   d50c0:	bd10      	pop	{r4, pc}

000d50c2 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order)
   d50c2:	b570      	push	{r4, r5, r6, lr}
   d50c4:	460c      	mov	r4, r1
   d50c6:	4605      	mov	r5, r0
   d50c8:	4616      	mov	r6, r2
        : BleUuid() {
   d50ca:	f7ff ffe7 	bl	d509c <_ZN8particle7BleUuidC1Ev>
    if (!uuid128) {
   d50ce:	b92c      	cbnz	r4, d50dc <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1a>
        memset(uuid_.uuid128, 0x00, BLE_SIG_UUID_128BIT_LEN);
   d50d0:	2210      	movs	r2, #16
   d50d2:	4621      	mov	r1, r4
   d50d4:	4628      	mov	r0, r5
   d50d6:	f003 fe10 	bl	d8cfa <memset>
   d50da:	e016      	b.n	d510a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x48>
    } else {
        if (order == BleUuidOrder::LSB) {
   d50dc:	2e01      	cmp	r6, #1
   d50de:	d109      	bne.n	d50f4 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x32>
            memcpy(uuid_.uuid128, uuid128, BLE_SIG_UUID_128BIT_LEN);
   d50e0:	462b      	mov	r3, r5
   d50e2:	f104 0210 	add.w	r2, r4, #16
   d50e6:	f854 1b04 	ldr.w	r1, [r4], #4
   d50ea:	f843 1b04 	str.w	r1, [r3], #4
   d50ee:	4294      	cmp	r4, r2
   d50f0:	d1f9      	bne.n	d50e6 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x24>
   d50f2:	e008      	b.n	d5106 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x44>
   d50f4:	1e6a      	subs	r2, r5, #1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order)
        : BleUuid() {
    if (!uuid128) {
        memset(uuid_.uuid128, 0x00, BLE_SIG_UUID_128BIT_LEN);
    } else {
        if (order == BleUuidOrder::LSB) {
   d50f6:	230f      	movs	r3, #15
            memcpy(uuid_.uuid128, uuid128, BLE_SIG_UUID_128BIT_LEN);
        } else {
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
                uuid_.uuid128[i] = uuid128[j];
   d50f8:	5ce1      	ldrb	r1, [r4, r3]
   d50fa:	f802 1f01 	strb.w	r1, [r2, #1]!
        memset(uuid_.uuid128, 0x00, BLE_SIG_UUID_128BIT_LEN);
    } else {
        if (order == BleUuidOrder::LSB) {
            memcpy(uuid_.uuid128, uuid128, BLE_SIG_UUID_128BIT_LEN);
        } else {
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   d50fe:	3b01      	subs	r3, #1
   d5100:	b2db      	uxtb	r3, r3
   d5102:	2bff      	cmp	r3, #255	; 0xff
   d5104:	d1f8      	bne.n	d50f8 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
                uuid_.uuid128[i] = uuid128[j];
            }
        }
        uuid_.type = BLE_UUID_TYPE_128BIT;
   d5106:	2301      	movs	r3, #1
   d5108:	742b      	strb	r3, [r5, #16]
    }
}
   d510a:	4628      	mov	r0, r5
   d510c:	bd70      	pop	{r4, r5, r6, pc}

000d510e <_ZN8particle7BleUuidC1Et>:

BleUuid::BleUuid(uint16_t uuid16)
   d510e:	b538      	push	{r3, r4, r5, lr}
   d5110:	4604      	mov	r4, r0
   d5112:	460d      	mov	r5, r1
        : BleUuid() {
   d5114:	f7ff ffc2 	bl	d509c <_ZN8particle7BleUuidC1Ev>
    uuid_.uuid16 = uuid16;
    uuid_.type = BLE_UUID_TYPE_16BIT;
   d5118:	2300      	movs	r3, #0
    }
}

BleUuid::BleUuid(uint16_t uuid16)
        : BleUuid() {
    uuid_.uuid16 = uuid16;
   d511a:	8025      	strh	r5, [r4, #0]
    uuid_.type = BLE_UUID_TYPE_16BIT;
   d511c:	7423      	strb	r3, [r4, #16]
}
   d511e:	4620      	mov	r0, r4
   d5120:	bd38      	pop	{r3, r4, r5, pc}

000d5122 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:

BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   d5122:	b538      	push	{r3, r4, r5, lr}
   d5124:	4604      	mov	r4, r0
   d5126:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   d5128:	461a      	mov	r2, r3
   d512a:	f7ff ffca 	bl	d50c2 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid_.uuid128[12] = (uint8_t)(uuid16 & 0x00FF);
   d512e:	7325      	strb	r5, [r4, #12]
    uuid_.uuid128[13] = (uint8_t)((uuid16 >> 8) & 0x00FF);
    uuid_.type = BLE_UUID_TYPE_128BIT;
   d5130:	2301      	movs	r3, #1
}

BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
        : BleUuid(uuid128, order) {
    uuid_.uuid128[12] = (uint8_t)(uuid16 & 0x00FF);
    uuid_.uuid128[13] = (uint8_t)((uuid16 >> 8) & 0x00FF);
   d5132:	0a2d      	lsrs	r5, r5, #8
   d5134:	7365      	strb	r5, [r4, #13]
    uuid_.type = BLE_UUID_TYPE_128BIT;
   d5136:	7423      	strb	r3, [r4, #16]
}
   d5138:	4620      	mov	r0, r4
   d513a:	bd38      	pop	{r3, r4, r5, pc}

000d513c <_ZNK8particle7BleUuid4typeEv>:
        uint8_t temp[BLE_SIG_UUID_128BIT_LEN] = {};
        return memcmp(uuid_.uuid128, temp, BLE_SIG_UUID_128BIT_LEN);
    }
}

BleUuidType BleUuid::type() const {
   d513c:	7c03      	ldrb	r3, [r0, #16]
   d513e:	f013 0ffd 	tst.w	r3, #253	; 0xfd
    if (uuid_.type == BLE_UUID_TYPE_16BIT || uuid_.type == BLE_UUID_TYPE_128BIT_SHORTED) {
        return BleUuidType::SHORT;
    } else {
        return BleUuidType::LONG;
    }
}
   d5142:	bf14      	ite	ne
   d5144:	2001      	movne	r0, #1
   d5146:	2000      	moveq	r0, #0
   d5148:	4770      	bx	lr

000d514a <_ZNK8particle7BleUuid7isValidEv>:

BleUuid::BleUuid(const String& uuid)
        : BleUuid(uuid.c_str()) {
}

bool BleUuid::isValid() const {
   d514a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d514c:	4604      	mov	r4, r0
    if (type() == BleUuidType::SHORT) {
   d514e:	f7ff fff5 	bl	d513c <_ZNK8particle7BleUuid4typeEv>
   d5152:	b908      	cbnz	r0, d5158 <_ZNK8particle7BleUuid7isValidEv+0xe>
        return uuid_.uuid16 != 0x0000;
   d5154:	8820      	ldrh	r0, [r4, #0]
   d5156:	e009      	b.n	d516c <_ZNK8particle7BleUuid7isValidEv+0x22>
    } else {
        uint8_t temp[BLE_SIG_UUID_128BIT_LEN] = {};
   d5158:	2210      	movs	r2, #16
   d515a:	2100      	movs	r1, #0
   d515c:	4668      	mov	r0, sp
   d515e:	f003 fdcc 	bl	d8cfa <memset>
        return memcmp(uuid_.uuid128, temp, BLE_SIG_UUID_128BIT_LEN);
   d5162:	2210      	movs	r2, #16
   d5164:	4669      	mov	r1, sp
   d5166:	4620      	mov	r0, r4
   d5168:	f003 fd92 	bl	d8c90 <memcmp>
   d516c:	3000      	adds	r0, #0
   d516e:	bf18      	it	ne
   d5170:	2001      	movne	r0, #1
    }
}
   d5172:	b004      	add	sp, #16
   d5174:	bd10      	pop	{r4, pc}

000d5176 <_ZNK8particle7BleUuid7shortedEv>:
    return uuid_;
}

uint16_t BleUuid::shorted() const {
    return uuid_.uuid16;
}
   d5176:	8800      	ldrh	r0, [r0, #0]
   d5178:	4770      	bx	lr

000d517a <_ZNK8particle7BleUuid8rawBytesEv>:
    memcpy(uuid128, uuid_.uuid128, BLE_SIG_UUID_128BIT_LEN);
}

const uint8_t* BleUuid::rawBytes() const {
    return uuid_.uuid128;
}
   d517a:	4770      	bx	lr

000d517c <_ZN8particle7BleUuidaSERKS0_>:
    memcpy(buf, cStr, len);
    buf[len++] = '\0';
    return len;
}

BleUuid& BleUuid::operator=(const BleUuid& uuid) {
   d517c:	b510      	push	{r4, lr}
    uuid_ = uuid.uuid_;
   d517e:	4603      	mov	r3, r0
   d5180:	f101 0214 	add.w	r2, r1, #20
   d5184:	f851 4b04 	ldr.w	r4, [r1], #4
   d5188:	f843 4b04 	str.w	r4, [r3], #4
   d518c:	4291      	cmp	r1, r2
   d518e:	d1f9      	bne.n	d5184 <_ZN8particle7BleUuidaSERKS0_+0x8>
    return *this;
}
   d5190:	bd10      	pop	{r4, pc}

000d5192 <_ZN8particle7BleUuidaSEPKh>:

BleUuid& BleUuid::operator=(const uint8_t* uuid128) {
   d5192:	b510      	push	{r4, lr}
    if (uuid128) {
   d5194:	b151      	cbz	r1, d51ac <_ZN8particle7BleUuidaSEPKh+0x1a>
        memcpy(uuid_.uuid128, uuid128, BLE_SIG_UUID_128BIT_LEN);
   d5196:	4603      	mov	r3, r0
   d5198:	f101 0210 	add.w	r2, r1, #16
   d519c:	f851 4b04 	ldr.w	r4, [r1], #4
   d51a0:	f843 4b04 	str.w	r4, [r3], #4
   d51a4:	4291      	cmp	r1, r2
   d51a6:	d1f9      	bne.n	d519c <_ZN8particle7BleUuidaSEPKh+0xa>
        uuid_.type = BLE_UUID_TYPE_128BIT;
   d51a8:	2301      	movs	r3, #1
   d51aa:	7403      	strb	r3, [r0, #16]
    }
    return *this;
}
   d51ac:	bd10      	pop	{r4, pc}

000d51ae <_ZNK8particle7BleUuideqERKS0_>:
BleUuid& BleUuid::operator=(const hal_ble_uuid_t& uuid) {
    uuid_ = uuid;
    return *this;
}

bool BleUuid::operator==(const BleUuid& uuid) const {
   d51ae:	b510      	push	{r4, lr}
   d51b0:	4604      	mov	r4, r0
    if (type() == BleUuidType::SHORT) {
   d51b2:	f7ff ffc3 	bl	d513c <_ZNK8particle7BleUuid4typeEv>
   d51b6:	b928      	cbnz	r0, d51c4 <_ZNK8particle7BleUuideqERKS0_+0x16>
        return (uuid_.uuid16 == uuid.uuid_.uuid16);
   d51b8:	8808      	ldrh	r0, [r1, #0]
   d51ba:	8823      	ldrh	r3, [r4, #0]
   d51bc:	1a1b      	subs	r3, r3, r0
   d51be:	4258      	negs	r0, r3
   d51c0:	4158      	adcs	r0, r3
   d51c2:	bd10      	pop	{r4, pc}
    } else {
        return !memcmp(uuid_.uuid128, uuid.uuid_.uuid128, BLE_SIG_UUID_128BIT_LEN);
   d51c4:	2210      	movs	r2, #16
   d51c6:	4620      	mov	r0, r4
   d51c8:	f003 fd62 	bl	d8c90 <memcmp>
   d51cc:	fab0 f080 	clz	r0, r0
   d51d0:	0940      	lsrs	r0, r0, #5
    }
}
   d51d2:	bd10      	pop	{r4, pc}

000d51d4 <_ZN8particle7BleUuid9constructEPKc>:

bool BleUuid::operator==(const uint8_t* uuid128) const {
    return (type() == BleUuidType::LONG && !memcmp(uuid128, uuid_.uuid128, BLE_SIG_UUID_128BIT_LEN));
}

void BleUuid::construct(const char* uuid) {
   d51d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d51d6:	4605      	mov	r5, r0
    if (uuid == nullptr) {
   d51d8:	460e      	mov	r6, r1
   d51da:	b919      	cbnz	r1, d51e4 <_ZN8particle7BleUuid9constructEPKc+0x10>
        memset(uuid_.uuid128, 0x00, BLE_SIG_UUID_128BIT_LEN);
   d51dc:	2210      	movs	r2, #16
   d51de:	f003 fd8c 	bl	d8cfa <memset>
   d51e2:	e051      	b.n	d5288 <_ZN8particle7BleUuid9constructEPKc+0xb4>
        uuid_.type = BLE_UUID_TYPE_128BIT;
        return;
    }
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   d51e4:	2124      	movs	r1, #36	; 0x24
   d51e6:	4630      	mov	r0, r6
   d51e8:	f003 fe31 	bl	d8e4e <strnlen>
   d51ec:	2804      	cmp	r0, #4
   d51ee:	d002      	beq.n	d51f6 <_ZN8particle7BleUuid9constructEPKc+0x22>
   d51f0:	2700      	movs	r7, #0
   d51f2:	2410      	movs	r4, #16
   d51f4:	e03b      	b.n	d526e <_ZN8particle7BleUuid9constructEPKc+0x9a>

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d51f6:	7830      	ldrb	r0, [r6, #0]
   d51f8:	f7ff ff12 	bl	d5020 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d51fc:	1e04      	subs	r4, r0, #0
   d51fe:	db47      	blt.n	d5290 <_ZN8particle7BleUuid9constructEPKc+0xbc>
            break;
        }
        const int l = hexToNibble(*src++);
   d5200:	7870      	ldrb	r0, [r6, #1]
   d5202:	f7ff ff0d 	bl	d5020 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d5206:	2800      	cmp	r0, #0
   d5208:	db42      	blt.n	d5290 <_ZN8particle7BleUuid9constructEPKc+0xbc>
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d520a:	ea40 1004 	orr.w	r0, r0, r4, lsl #4
   d520e:	f88d 0004 	strb.w	r0, [sp, #4]
}

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d5212:	78b0      	ldrb	r0, [r6, #2]
   d5214:	f7ff ff04 	bl	d5020 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d5218:	1e04      	subs	r4, r0, #0
   d521a:	db39      	blt.n	d5290 <_ZN8particle7BleUuid9constructEPKc+0xbc>
            break;
        }
        const int l = hexToNibble(*src++);
   d521c:	78f0      	ldrb	r0, [r6, #3]
   d521e:	f7ff feff 	bl	d5020 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d5222:	2800      	cmp	r0, #0
   d5224:	db34      	blt.n	d5290 <_ZN8particle7BleUuid9constructEPKc+0xbc>
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d5226:	ea40 1004 	orr.w	r0, r0, r4, lsl #4
        char buf[2] = {};
        if (hexToBytes(uuid, buf, BLE_SIG_UUID_16BIT_LEN) == BLE_SIG_UUID_16BIT_LEN) {
            uuid_.uuid16 = ((uint16_t)buf[0] << 8) | (uint16_t)buf[1];
   d522a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d522e:	b2c0      	uxtb	r0, r0
   d5230:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   d5234:	8028      	strh	r0, [r5, #0]
        } else {
            uuid_.uuid16 = 0x0000;
        }
        uuid_.type = BLE_UUID_TYPE_16BIT;
   d5236:	2300      	movs	r3, #0
   d5238:	e027      	b.n	d528a <_ZN8particle7BleUuid9constructEPKc+0xb6>
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d523a:	b32c      	cbz	r4, d5288 <_ZN8particle7BleUuid9constructEPKc+0xb4>
        int8_t hi = hexToNibble(uuid[i]);
   d523c:	5df0      	ldrb	r0, [r6, r7]
   d523e:	f7ff feef 	bl	d5020 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   d5242:	0603      	lsls	r3, r0, #24
   d5244:	d412      	bmi.n	d526c <_ZN8particle7BleUuid9constructEPKc+0x98>
            uuid_.uuid128[len - 1] = hi << 4;
   d5246:	3c01      	subs	r4, #1
   d5248:	0100      	lsls	r0, r0, #4
   d524a:	5528      	strb	r0, [r5, r4]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   d524c:	2124      	movs	r1, #36	; 0x24
   d524e:	4630      	mov	r0, r6
   d5250:	f003 fdfd 	bl	d8e4e <strnlen>
   d5254:	3701      	adds	r7, #1
   d5256:	4287      	cmp	r7, r0
   d5258:	d208      	bcs.n	d526c <_ZN8particle7BleUuid9constructEPKc+0x98>
                int8_t lo = hexToNibble(uuid[i]);
   d525a:	5df0      	ldrb	r0, [r6, r7]
   d525c:	f7ff fee0 	bl	d5020 <_ZN8particle11hexToNibbleEc>
   d5260:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   d5262:	2800      	cmp	r0, #0
                    uuid_.uuid128[len - 1] |= lo;
   d5264:	bfa2      	ittt	ge
   d5266:	5d2b      	ldrbge	r3, [r5, r4]
   d5268:	4318      	orrge	r0, r3
   d526a:	5528      	strbge	r0, [r5, r4]
        }
        uuid_.type = BLE_UUID_TYPE_16BIT;
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d526c:	3701      	adds	r7, #1
   d526e:	2124      	movs	r1, #36	; 0x24
   d5270:	4630      	mov	r0, r6
   d5272:	f003 fdec 	bl	d8e4e <strnlen>
   d5276:	4287      	cmp	r7, r0
   d5278:	d3df      	bcc.n	d523a <_ZN8particle7BleUuid9constructEPKc+0x66>
   d527a:	442c      	add	r4, r5
            }
            len--;
        }
    }
    while (len > 0) {
        uuid_.uuid128[len - 1] = 0x00;
   d527c:	2300      	movs	r3, #0
                }
            }
            len--;
        }
    }
    while (len > 0) {
   d527e:	42a5      	cmp	r5, r4
   d5280:	d002      	beq.n	d5288 <_ZN8particle7BleUuid9constructEPKc+0xb4>
        uuid_.uuid128[len - 1] = 0x00;
   d5282:	f804 3d01 	strb.w	r3, [r4, #-1]!
                }
            }
            len--;
        }
    }
    while (len > 0) {
   d5286:	e7fa      	b.n	d527e <_ZN8particle7BleUuid9constructEPKc+0xaa>
        uuid_.uuid128[len - 1] = 0x00;
        len--;
    }
    uuid_.type = BLE_UUID_TYPE_128BIT;
   d5288:	2301      	movs	r3, #1
   d528a:	742b      	strb	r3, [r5, #16]
}
   d528c:	b003      	add	sp, #12
   d528e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
        char buf[2] = {};
        if (hexToBytes(uuid, buf, BLE_SIG_UUID_16BIT_LEN) == BLE_SIG_UUID_16BIT_LEN) {
            uuid_.uuid16 = ((uint16_t)buf[0] << 8) | (uint16_t)buf[1];
        } else {
            uuid_.uuid16 = 0x0000;
   d5290:	2300      	movs	r3, #0
   d5292:	802b      	strh	r3, [r5, #0]
   d5294:	e7cf      	b.n	d5236 <_ZN8particle7BleUuid9constructEPKc+0x62>

000d5296 <_ZN8particle7BleUuidC1EPKc>:
    uuid_.uuid128[12] = (uint8_t)(uuid16 & 0x00FF);
    uuid_.uuid128[13] = (uint8_t)((uuid16 >> 8) & 0x00FF);
    uuid_.type = BLE_UUID_TYPE_128BIT;
}

BleUuid::BleUuid(const char* uuid)
   d5296:	b538      	push	{r3, r4, r5, lr}
   d5298:	4604      	mov	r4, r0
   d529a:	460d      	mov	r5, r1
        : BleUuid() {
   d529c:	f7ff fefe 	bl	d509c <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   d52a0:	4620      	mov	r0, r4
   d52a2:	4629      	mov	r1, r5
   d52a4:	f7ff ff96 	bl	d51d4 <_ZN8particle7BleUuid9constructEPKc>
}
   d52a8:	4620      	mov	r0, r4
   d52aa:	bd38      	pop	{r3, r4, r5, pc}

000d52ac <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>:
        break;
    }
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   d52ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
   d52ae:	b18b      	cbz	r3, d52d4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x28>
   d52b0:	2400      	movs	r4, #0
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d52b2:	1ce5      	adds	r5, r4, #3
   d52b4:	428d      	cmp	r5, r1
   d52b6:	d80f      	bhi.n	d52d8 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   d52b8:	1c66      	adds	r6, r4, #1
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
        adsLen = buf[i];
   d52ba:	5d05      	ldrb	r5, [r0, r4]
        if (buf[i + 1] == adsType) {
   d52bc:	5d87      	ldrb	r7, [r0, r6]
   d52be:	4297      	cmp	r7, r2
   d52c0:	d105      	bne.n	d52ce <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x22>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   d52c2:	442e      	add	r6, r5
   d52c4:	42b1      	cmp	r1, r6
   d52c6:	d307      	bcc.n	d52d8 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
                *offset = i;
   d52c8:	601c      	str	r4, [r3, #0]
                adsLen += 1;
   d52ca:	1c68      	adds	r0, r5, #1
                return adsLen;
   d52cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
            } else {
                return 0;
            }
        } else {
            // Navigate to the next AD structure.
            i += (adsLen + 1);
   d52ce:	3501      	adds	r5, #1
   d52d0:	442c      	add	r4, r5
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d52d2:	e7ee      	b.n	d52b2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x6>
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
    if (offset == nullptr) {
        return 0;
   d52d4:	4618      	mov	r0, r3
   d52d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d52d8:	2000      	movs	r0, #0
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   d52da:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d52dc <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
    selfData_[selfLen_++] = beacon.measurePower;

    return selfLen_;
}

size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d52dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d52e0:	4604      	mov	r4, r0
   d52e2:	460e      	mov	r6, r1
   d52e4:	461d      	mov	r5, r3
    if (buf == nullptr) {
   d52e6:	4617      	mov	r7, r2
   d52e8:	2a00      	cmp	r2, #0
   d52ea:	d03a      	beq.n	d5362 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        return selfLen_;
    }
    size_t offset;
    size_t adsLen = locate(selfData_, selfLen_, type, &offset);
   d52ec:	460a      	mov	r2, r1
   d52ee:	ab01      	add	r3, sp, #4
   d52f0:	6a01      	ldr	r1, [r0, #32]
   d52f2:	f7ff ffdb 	bl	d52ac <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
    if (!force && adsLen > 0) {
   d52f6:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   d52fa:	6a22      	ldr	r2, [r4, #32]
   d52fc:	bb03      	cbnz	r3, d5340 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
   d52fe:	b1f8      	cbz	r0, d5340 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
        // Update the existing AD structure.
        size_t staLen = selfLen_ - adsLen;
        if ((staLen + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d5300:	1c96      	adds	r6, r2, #2
   d5302:	442e      	add	r6, r5
   d5304:	1a36      	subs	r6, r6, r0
   d5306:	2e1f      	cmp	r6, #31
   d5308:	d82b      	bhi.n	d5362 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
            // Firstly, move the last consistent block.
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d530a:	f8dd 8004 	ldr.w	r8, [sp, #4]
   d530e:	f108 0902 	add.w	r9, r8, #2
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d5312:	ebc8 0202 	rsb	r2, r8, r2
   d5316:	1a12      	subs	r2, r2, r0
   d5318:	eb00 0108 	add.w	r1, r0, r8
   d531c:	eb05 0009 	add.w	r0, r5, r9
   d5320:	b292      	uxth	r2, r2
   d5322:	4421      	add	r1, r4
   d5324:	4420      	add	r0, r4
   d5326:	f003 fccd 	bl	d8cc4 <memmove>
            // Secondly, Update the AD structure.
            // The Length field is the total length of Type field and Data field.
            selfData_[offset] = len + 1;
   d532a:	1c6b      	adds	r3, r5, #1
   d532c:	f804 3008 	strb.w	r3, [r4, r8]
            memcpy(&selfData_[offset + 2], buf, len);
   d5330:	462a      	mov	r2, r5
   d5332:	4639      	mov	r1, r7
   d5334:	eb04 0009 	add.w	r0, r4, r9
   d5338:	f003 fcb9 	bl	d8cae <memcpy>
            // An AD structure is composed of one byte length field, one byte Type field and Data field.
            selfLen_ = staLen + len + 2;
   d533c:	6226      	str	r6, [r4, #32]
   d533e:	e010      	b.n	d5362 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
   d5340:	1c90      	adds	r0, r2, #2
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d5342:	182b      	adds	r3, r5, r0
   d5344:	2b1f      	cmp	r3, #31
   d5346:	d80c      	bhi.n	d5362 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
   d5348:	1c6b      	adds	r3, r5, #1
   d534a:	54a3      	strb	r3, [r4, r2]
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d534c:	4422      	add	r2, r4
   d534e:	6220      	str	r0, [r4, #32]
        memcpy(&selfData_[selfLen_], buf, len);
   d5350:	4639      	mov	r1, r7
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d5352:	7056      	strb	r6, [r2, #1]
        memcpy(&selfData_[selfLen_], buf, len);
   d5354:	4420      	add	r0, r4
   d5356:	462a      	mov	r2, r5
   d5358:	f003 fca9 	bl	d8cae <memcpy>
        selfLen_ += len;
   d535c:	6a22      	ldr	r2, [r4, #32]
   d535e:	442a      	add	r2, r5
   d5360:	6222      	str	r2, [r4, #32]
    }
    return selfLen_;
   d5362:	6a20      	ldr	r0, [r4, #32]
}
   d5364:	b003      	add	sp, #12
   d5366:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d536a <_ZN8particle18BleAdvertisingDataC1Ev>:


/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
   d536a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d536c:	4604      	mov	r4, r0
        : selfData_(),
          selfLen_(0) {
   d536e:	4603      	mov	r3, r0
   d5370:	f100 021f 	add.w	r2, r0, #31
   d5374:	2000      	movs	r0, #0
   d5376:	f803 0b01 	strb.w	r0, [r3], #1
   d537a:	4293      	cmp	r3, r2
   d537c:	f04f 0100 	mov.w	r1, #0
   d5380:	d1f9      	bne.n	d5376 <_ZN8particle18BleAdvertisingDataC1Ev+0xc>
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d5382:	aa04      	add	r2, sp, #16
   d5384:	2306      	movs	r3, #6
   d5386:	f802 3d01 	strb.w	r3, [r2, #-1]!
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d538a:	2301      	movs	r3, #1
/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
        : selfData_(),
          selfLen_(0) {
   d538c:	6221      	str	r1, [r4, #32]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d538e:	9100      	str	r1, [sp, #0]
   d5390:	4620      	mov	r0, r4
   d5392:	4619      	mov	r1, r3
   d5394:	f7ff ffa2 	bl	d52dc <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d5398:	4620      	mov	r0, r4
   d539a:	b004      	add	sp, #16
   d539c:	bd10      	pop	{r4, pc}

000d539e <_ZN8particle18BleAdvertisingData15appendLocalNameEPKc>:
        selfLen_ += len;
    }
    return selfLen_;
}

size_t BleAdvertisingData::appendLocalName(const char* name) {
   d539e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d53a0:	460c      	mov	r4, r1
   d53a2:	4605      	mov	r5, r0
    return append(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, (const uint8_t*)name, strnlen(name, BLE_MAX_DEV_NAME_LEN), false);
   d53a4:	2114      	movs	r1, #20
   d53a6:	4620      	mov	r0, r4
   d53a8:	f003 fd51 	bl	d8e4e <strnlen>
   d53ac:	2300      	movs	r3, #0
   d53ae:	9300      	str	r3, [sp, #0]
   d53b0:	4622      	mov	r2, r4
   d53b2:	4603      	mov	r3, r0
   d53b4:	2109      	movs	r1, #9
   d53b6:	4628      	mov	r0, r5
   d53b8:	f7ff ff90 	bl	d52dc <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d53bc:	b003      	add	sp, #12
   d53be:	bd30      	pop	{r4, r5, pc}

000d53c0 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d53c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d53c2:	460a      	mov	r2, r1
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d53c4:	460e      	mov	r6, r1
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d53c6:	ab01      	add	r3, sp, #4
   d53c8:	6a01      	ldr	r1, [r0, #32]
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d53ca:	4604      	mov	r4, r0
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d53cc:	f7ff ff6e 	bl	d52ac <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
    if (len > 0) {
   d53d0:	4605      	mov	r5, r0
   d53d2:	b178      	cbz	r0, d53f4 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x34>
        size_t moveLen = selfLen_ - offset - len;
   d53d4:	9801      	ldr	r0, [sp, #4]
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   d53d6:	6a22      	ldr	r2, [r4, #32]
   d53d8:	1829      	adds	r1, r5, r0
   d53da:	1a12      	subs	r2, r2, r0
   d53dc:	1b52      	subs	r2, r2, r5
   d53de:	4421      	add	r1, r4
   d53e0:	4420      	add	r0, r4
   d53e2:	f003 fc64 	bl	d8cae <memcpy>
        selfLen_ -= len;
   d53e6:	6a23      	ldr	r3, [r4, #32]
   d53e8:	1b5d      	subs	r5, r3, r5
   d53ea:	6225      	str	r5, [r4, #32]
        // Recursively remove duplicated type.
        remove(type);
   d53ec:	4631      	mov	r1, r6
   d53ee:	4620      	mov	r0, r4
   d53f0:	f7ff ffe6 	bl	d53c0 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
    }
}
   d53f4:	b002      	add	sp, #8
   d53f6:	bd70      	pop	{r4, r5, r6, pc}

000d53f8 <_ZN8particle21BleCharacteristicImplC1Ev>:
/*******************************************************
 * BleCharacteristicImpl definition
 */
class BleCharacteristicImpl {
public:
    BleCharacteristicImpl()
   d53f8:	b538      	push	{r3, r4, r5, lr}
              attrHandles_(),
              charUuid_(),
              svcUuid_(),
              description_(),
              callback_(nullptr),
              context_(nullptr) {
   d53fa:	2500      	movs	r5, #0
   d53fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
/*******************************************************
 * BleCharacteristicImpl definition
 */
class BleCharacteristicImpl {
public:
    BleCharacteristicImpl()
   d5400:	4604      	mov	r4, r0
              attrHandles_(),
              charUuid_(),
              svcUuid_(),
              description_(),
              callback_(nullptr),
              context_(nullptr) {
   d5402:	8043      	strh	r3, [r0, #2]
   d5404:	220e      	movs	r2, #14
   d5406:	4629      	mov	r1, r5
   d5408:	7005      	strb	r5, [r0, #0]
   d540a:	7105      	strb	r5, [r0, #4]
   d540c:	3006      	adds	r0, #6
   d540e:	f003 fc74 	bl	d8cfa <memset>
   d5412:	f104 0014 	add.w	r0, r4, #20
   d5416:	f7ff fe41 	bl	d509c <_ZN8particle7BleUuidC1Ev>
   d541a:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d541e:	f7ff fe3d 	bl	d509c <_ZN8particle7BleUuidC1Ev>
   d5422:	4904      	ldr	r1, [pc, #16]	; (d5434 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   d5424:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d5428:	f002 fc06 	bl	d7c38 <_ZN6StringC1EPK19__FlashStringHelper>
   d542c:	64e5      	str	r5, [r4, #76]	; 0x4c
   d542e:	6525      	str	r5, [r4, #80]	; 0x50
    }
   d5430:	4620      	mov	r0, r4
   d5432:	bd38      	pop	{r3, r4, r5, pc}
   d5434:	000d9518 	.word	0x000d9518

000d5438 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    void onDisconnectedCallback(BleOnDisconnectedCallback callback, void* context) {
        disconnectedCb_ = callback;
        disconnectedContext_ = context;
    }

    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   d5438:	b510      	push	{r4, lr}
   d543a:	6983      	ldr	r3, [r0, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d543c:	69c2      	ldr	r2, [r0, #28]
   d543e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   d5442:	4293      	cmp	r3, r2
   d5444:	4618      	mov	r0, r3
   d5446:	d006      	beq.n	d5456 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   d5448:	6804      	ldr	r4, [r0, #0]
   d544a:	8824      	ldrh	r4, [r4, #0]
   d544c:	428c      	cmp	r4, r1
   d544e:	f103 0308 	add.w	r3, r3, #8
   d5452:	d1f6      	bne.n	d5442 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
   d5454:	bd10      	pop	{r4, pc}
                return &peer;
            }
        }
        return nullptr;
   d5456:	2000      	movs	r0, #0
    }
   d5458:	bd10      	pop	{r4, pc}
	...

000d545c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   d545c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d5460:	4680      	mov	r8, r0
   d5462:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   d5464:	460e      	mov	r6, r1
   d5466:	b369      	cbz	r1, d54c4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x68>
   d5468:	b362      	cbz	r2, d54c4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x68>
   d546a:	2af4      	cmp	r2, #244	; 0xf4
   d546c:	6805      	ldr	r5, [r0, #0]
   d546e:	bf28      	it	cs
   d5470:	22f4      	movcs	r2, #244	; 0xf4
   d5472:	4614      	mov	r4, r2
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->local()) {
   d5474:	782a      	ldrb	r2, [r5, #0]
   d5476:	b1a2      	cbz	r2, d54a2 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x46>
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if ((impl()->properties() & BleCharacteristicProperty::READ) == BleCharacteristicProperty::READ) {
   d5478:	792b      	ldrb	r3, [r5, #4]
   d547a:	0798      	lsls	r0, r3, #30
   d547c:	d507      	bpl.n	d548e <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x32>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   d547e:	2300      	movs	r3, #0
   d5480:	4622      	mov	r2, r4
   d5482:	89a8      	ldrh	r0, [r5, #12]
   d5484:	f7ff fac4 	bl	d4a10 <hal_ble_gatt_server_set_characteristic_value>
   d5488:	2800      	cmp	r0, #0
   d548a:	da02      	bge.n	d5492 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x36>
   d548c:	e043      	b.n	d5516 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
    if (buf == nullptr || len == 0) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->local()) {
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   d548e:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d5492:	f8d8 5000 	ldr.w	r5, [r8]
        // Updates the local characteristic value for peer to read.
        if ((impl()->properties() & BleCharacteristicProperty::READ) == BleCharacteristicProperty::READ) {
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if ((impl()->properties() & BleCharacteristicProperty::NOTIFY) == BleCharacteristicProperty::NOTIFY && type != BleTxRxType::ACK) {
   d5496:	792b      	ldrb	r3, [r5, #4]
   d5498:	06da      	lsls	r2, r3, #27
   d549a:	d518      	bpl.n	d54ce <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x72>
   d549c:	2f01      	cmp	r7, #1
   d549e:	d123      	bne.n	d54e8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8c>
   d54a0:	e015      	b.n	d54ce <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x72>
        if ((impl()->properties() & BleCharacteristicProperty::INDICATE) == BleCharacteristicProperty::INDICATE && type != BleTxRxType::NACK) {
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return ret;
    }
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   d54a2:	8868      	ldrh	r0, [r5, #2]
   d54a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d54a8:	4298      	cmp	r0, r3
   d54aa:	d00d      	beq.n	d54c8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x6c>
        if ((impl()->properties() & BleCharacteristicProperty::WRITE_WO_RSP) == BleCharacteristicProperty::WRITE_WO_RSP && type != BleTxRxType::ACK) {
   d54ac:	792b      	ldrb	r3, [r5, #4]
   d54ae:	0759      	lsls	r1, r3, #29
   d54b0:	d523      	bpl.n	d54fa <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9e>
   d54b2:	2f01      	cmp	r7, #1
   d54b4:	d021      	beq.n	d54fa <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9e>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d54b6:	89a9      	ldrh	r1, [r5, #12]
   d54b8:	9200      	str	r2, [sp, #0]
   d54ba:	4623      	mov	r3, r4
   d54bc:	4632      	mov	r2, r6
   d54be:	f7ff fabb 	bl	d4a38 <hal_ble_gatt_client_write_without_response>
   d54c2:	e028      	b.n	d5516 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
    if (buf == nullptr || len == 0) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   d54c4:	4815      	ldr	r0, [pc, #84]	; (d551c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xc0>)
   d54c6:	e026      	b.n	d5516 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
        if ((impl()->properties() & BleCharacteristicProperty::WRITE) == BleCharacteristicProperty::WRITE && type != BleTxRxType::NACK) {
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
   d54c8:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   d54cc:	e023      	b.n	d5516 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if ((impl()->properties() & BleCharacteristicProperty::NOTIFY) == BleCharacteristicProperty::NOTIFY && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if ((impl()->properties() & BleCharacteristicProperty::INDICATE) == BleCharacteristicProperty::INDICATE && type != BleTxRxType::NACK) {
   d54ce:	069a      	lsls	r2, r3, #26
   d54d0:	d521      	bpl.n	d5516 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
   d54d2:	2f02      	cmp	r7, #2
   d54d4:	d01f      	beq.n	d5516 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d54d6:	89a8      	ldrh	r0, [r5, #12]
   d54d8:	2300      	movs	r3, #0
   d54da:	4622      	mov	r2, r4
   d54dc:	4631      	mov	r1, r6
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d54de:	b002      	add	sp, #8
   d54e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        }
        if ((impl()->properties() & BleCharacteristicProperty::NOTIFY) == BleCharacteristicProperty::NOTIFY && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if ((impl()->properties() & BleCharacteristicProperty::INDICATE) == BleCharacteristicProperty::INDICATE && type != BleTxRxType::NACK) {
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d54e4:	f7ff bad0 	b.w	d4a88 <hal_ble_gatt_server_indicate_characteristic_value>
        // Updates the local characteristic value for peer to read.
        if ((impl()->properties() & BleCharacteristicProperty::READ) == BleCharacteristicProperty::READ) {
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if ((impl()->properties() & BleCharacteristicProperty::NOTIFY) == BleCharacteristicProperty::NOTIFY && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d54e8:	89a8      	ldrh	r0, [r5, #12]
   d54ea:	2300      	movs	r3, #0
   d54ec:	4622      	mov	r2, r4
   d54ee:	4631      	mov	r1, r6
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d54f0:	b002      	add	sp, #8
   d54f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        // Updates the local characteristic value for peer to read.
        if ((impl()->properties() & BleCharacteristicProperty::READ) == BleCharacteristicProperty::READ) {
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if ((impl()->properties() & BleCharacteristicProperty::NOTIFY) == BleCharacteristicProperty::NOTIFY && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d54f6:	f7ff babd 	b.w	d4a74 <hal_ble_gatt_server_notify_characteristic_value>
    }
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
        if ((impl()->properties() & BleCharacteristicProperty::WRITE_WO_RSP) == BleCharacteristicProperty::WRITE_WO_RSP && type != BleTxRxType::ACK) {
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if ((impl()->properties() & BleCharacteristicProperty::WRITE) == BleCharacteristicProperty::WRITE && type != BleTxRxType::NACK) {
   d54fa:	071b      	lsls	r3, r3, #28
   d54fc:	d501      	bpl.n	d5502 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xa6>
   d54fe:	2f02      	cmp	r7, #2
   d5500:	d102      	bne.n	d5508 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xac>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
   d5502:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d5506:	e006      	b.n	d5516 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
        if ((impl()->properties() & BleCharacteristicProperty::WRITE_WO_RSP) == BleCharacteristicProperty::WRITE_WO_RSP && type != BleTxRxType::ACK) {
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if ((impl()->properties() & BleCharacteristicProperty::WRITE) == BleCharacteristicProperty::WRITE && type != BleTxRxType::NACK) {
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d5508:	2300      	movs	r3, #0
   d550a:	89a9      	ldrh	r1, [r5, #12]
   d550c:	9300      	str	r3, [sp, #0]
   d550e:	4632      	mov	r2, r6
   d5510:	4623      	mov	r3, r4
   d5512:	f7ff fa87 	bl	d4a24 <hal_ble_gatt_client_write_with_response>
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d5516:	b002      	add	sp, #8
   d5518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d551c:	fffffef2 	.word	0xfffffef2

000d5520 <_ZNK8particle13BlePeerDevice7addressEv>:

void BlePeerDevice::bind(const BleAddress& address) const {
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   d5520:	b510      	push	{r4, lr}
    return impl()->address();
   d5522:	680a      	ldr	r2, [r1, #0]
   d5524:	f852 3f02 	ldr.w	r3, [r2, #2]!
   d5528:	6003      	str	r3, [r0, #0]
   d552a:	6853      	ldr	r3, [r2, #4]
   d552c:	6043      	str	r3, [r0, #4]
}
   d552e:	bd10      	pop	{r4, pc}

000d5530 <_ZNK8particle13BlePeerDeviceeqERKS0_>:

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d5530:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d5532:	6802      	ldr	r2, [r0, #0]
   d5534:	680b      	ldr	r3, [r1, #0]
   d5536:	8812      	ldrh	r2, [r2, #0]
   d5538:	881b      	ldrh	r3, [r3, #0]
   d553a:	429a      	cmp	r2, r3

BleAddress BlePeerDevice::address() const {
    return impl()->address();
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d553c:	460c      	mov	r4, r1
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d553e:	d10c      	bne.n	d555a <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2a>
   d5540:	4601      	mov	r1, r0
   d5542:	4668      	mov	r0, sp
   d5544:	f7ff ffec 	bl	d5520 <_ZNK8particle13BlePeerDevice7addressEv>
   d5548:	4621      	mov	r1, r4
   d554a:	a802      	add	r0, sp, #8
   d554c:	f7ff ffe8 	bl	d5520 <_ZNK8particle13BlePeerDevice7addressEv>
   d5550:	a902      	add	r1, sp, #8
   d5552:	4668      	mov	r0, sp
   d5554:	f7ff fd94 	bl	d5080 <_ZNK8particle10BleAddresseqERKS0_>
   d5558:	b900      	cbnz	r0, d555c <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2c>
        return true;
    }
    return false;
   d555a:	2000      	movs	r0, #0
}
   d555c:	b004      	add	sp, #16
   d555e:	bd10      	pop	{r4, pc}

000d5560 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d5560:	b510      	push	{r4, lr}
   d5562:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d5564:	2034      	movs	r0, #52	; 0x34
   d5566:	f7fe fd98 	bl	d409a <_Znwj>
   d556a:	4601      	mov	r1, r0
   d556c:	b168      	cbz	r0, d558a <_ZN8particle14BleLocalDeviceC1Ev+0x2a>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d556e:	2300      	movs	r3, #0
   d5570:	6003      	str	r3, [r0, #0]
   d5572:	6043      	str	r3, [r0, #4]
   d5574:	6083      	str	r3, [r0, #8]
   d5576:	60c3      	str	r3, [r0, #12]
   d5578:	6103      	str	r3, [r0, #16]
   d557a:	6143      	str	r3, [r0, #20]
   d557c:	6183      	str	r3, [r0, #24]
   d557e:	61c3      	str	r3, [r0, #28]
   d5580:	6203      	str	r3, [r0, #32]
public:
    BleLocalDeviceImpl()
            : connectedCb_(nullptr),
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
   d5582:	6243      	str	r3, [r0, #36]	; 0x24
   d5584:	6283      	str	r3, [r0, #40]	; 0x28
   d5586:	62c3      	str	r3, [r0, #44]	; 0x2c
   d5588:	6303      	str	r3, [r0, #48]	; 0x30
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d558a:	6021      	str	r1, [r4, #0]
/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   d558c:	b919      	cbnz	r1, d5596 <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   d558e:	4a0a      	ldr	r2, [pc, #40]	; (d55b8 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d5590:	200a      	movs	r0, #10
   d5592:	f7ff fc2b 	bl	d4dec <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   d5596:	2000      	movs	r0, #0
   d5598:	f7ff fa06 	bl	d49a8 <hal_ble_stack_init>
   d559c:	b120      	cbz	r0, d55a8 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   d559e:	4a06      	ldr	r2, [pc, #24]	; (d55b8 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d55a0:	2100      	movs	r1, #0
   d55a2:	200a      	movs	r0, #10
   d55a4:	f7ff fc22 	bl	d4dec <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   d55a8:	2200      	movs	r2, #0
   d55aa:	6821      	ldr	r1, [r4, #0]
   d55ac:	4803      	ldr	r0, [pc, #12]	; (d55bc <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   d55ae:	f7ff fa57 	bl	d4a60 <hal_ble_set_callback_on_periph_link_events>
}
   d55b2:	4620      	mov	r0, r4
   d55b4:	bd10      	pop	{r4, pc}
   d55b6:	bf00      	nop
   d55b8:	000d4b1d 	.word	0x000d4b1d
   d55bc:	000d59c5 	.word	0x000d59c5

000d55c0 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   d55c0:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   d55c2:	4c0a      	ldr	r4, [pc, #40]	; (d55ec <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   d55c4:	6823      	ldr	r3, [r4, #0]
   d55c6:	07db      	lsls	r3, r3, #31
   d55c8:	d40e      	bmi.n	d55e8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d55ca:	4620      	mov	r0, r4
   d55cc:	f7fe fd76 	bl	d40bc <__cxa_guard_acquire>
   d55d0:	b150      	cbz	r0, d55e8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d55d2:	4807      	ldr	r0, [pc, #28]	; (d55f0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d55d4:	f7ff ffc4 	bl	d5560 <_ZN8particle14BleLocalDeviceC1Ev>
   d55d8:	4620      	mov	r0, r4
   d55da:	f7fe fd74 	bl	d40c6 <__cxa_guard_release>
   d55de:	4a05      	ldr	r2, [pc, #20]	; (d55f4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d55e0:	4905      	ldr	r1, [pc, #20]	; (d55f8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   d55e2:	4803      	ldr	r0, [pc, #12]	; (d55f0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d55e4:	f002 fda4 	bl	d8130 <__aeabi_atexit>
    return instance;
}
   d55e8:	4801      	ldr	r0, [pc, #4]	; (d55f0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d55ea:	bd10      	pop	{r4, pc}
   d55ec:	2003e388 	.word	0x2003e388
   d55f0:	2003e384 	.word	0x2003e384
   d55f4:	2003e294 	.word	0x2003e294
   d55f8:	000d57ad 	.word	0x000d57ad

000d55fc <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
/*
 * WARN: This is executed from HAL ble thread. If the BLE wiring lock is acquired by a thread,
 * calling wiring APIs those acquiring the BLE wiring lock from the callback will suspend the
 * the execution of the callback, until the BLE wiring lock is released.
 */
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d55fc:	b570      	push	{r4, r5, r6, lr}
    auto impl = static_cast<BleCharacteristicImpl*>(context);
    // This callback won't modified any data in wiring.
    //WiringBleLock lk;
    switch (event->type) {
   d55fe:	6803      	ldr	r3, [r0, #0]
   d5600:	3b09      	subs	r3, #9
   d5602:	2b01      	cmp	r3, #1
/*
 * WARN: This is executed from HAL ble thread. If the BLE wiring lock is acquired by a thread,
 * calling wiring APIs those acquiring the BLE wiring lock from the callback will suspend the
 * the execution of the callback, until the BLE wiring lock is released.
 */
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d5604:	b08a      	sub	sp, #40	; 0x28
   d5606:	4604      	mov	r4, r0
   d5608:	460e      	mov	r6, r1
    auto impl = static_cast<BleCharacteristicImpl*>(context);
    // This callback won't modified any data in wiring.
    //WiringBleLock lk;
    switch (event->type) {
   d560a:	d819      	bhi.n	d5640 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
        case BLE_EVT_DATA_NOTIFIED:
        case BLE_EVT_DATA_WRITTEN: {
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   d560c:	f7ff ffd8 	bl	d55c0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d5610:	88a1      	ldrh	r1, [r4, #4]
   d5612:	6800      	ldr	r0, [r0, #0]
   d5614:	f7ff ff10 	bl	d5438 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   d5618:	4602      	mov	r2, r0
   d561a:	b958      	cbnz	r0, d5634 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   d561c:	2320      	movs	r3, #32
   d561e:	9302      	str	r3, [sp, #8]
   d5620:	4b08      	ldr	r3, [pc, #32]	; (d5644 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x48>)
   d5622:	9003      	str	r0, [sp, #12]
   d5624:	9300      	str	r3, [sp, #0]
   d5626:	aa02      	add	r2, sp, #8
   d5628:	4603      	mov	r3, r0
   d562a:	4907      	ldr	r1, [pc, #28]	; (d5648 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x4c>)
   d562c:	2032      	movs	r0, #50	; 0x32
   d562e:	f7ff fbe5 	bl	d4dfc <log_message>
   d5632:	e005      	b.n	d5640 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
                break;
            }
            if (impl->callback_) {
   d5634:	6cf5      	ldr	r5, [r6, #76]	; 0x4c
   d5636:	b11d      	cbz	r5, d5640 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
                impl->callback_(event->params.data_written.data, event->params.data_written.len, *peer, impl->context_);
   d5638:	6d33      	ldr	r3, [r6, #80]	; 0x50
   d563a:	68e1      	ldr	r1, [r4, #12]
   d563c:	6920      	ldr	r0, [r4, #16]
   d563e:	47a8      	blx	r5
        }
        default: {
            break;
        }
    }
}
   d5640:	b00a      	add	sp, #40	; 0x28
   d5642:	bd70      	pop	{r4, r5, r6, pc}
   d5644:	000d9246 	.word	0x000d9246
   d5648:	000d91fc 	.word	0x000d91fc

000d564c <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams* params) const {
    return hal_ble_gap_get_advertising_parameters(params, nullptr);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   d564c:	4608      	mov	r0, r1
   d564e:	b909      	cbnz	r1, d5654 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x8>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   d5650:	460a      	mov	r2, r1
   d5652:	e001      	b.n	d5658 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xc>
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   d5654:	6a09      	ldr	r1, [r1, #32]
   d5656:	2200      	movs	r2, #0
   d5658:	f7ff b9ae 	b.w	d49b8 <hal_ble_gap_set_advertising_data>

000d565c <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:
    }
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   d565c:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   d565e:	460c      	mov	r4, r1
   d5660:	b911      	cbnz	r1, d5668 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xc>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   d5662:	460a      	mov	r2, r1
   d5664:	4608      	mov	r0, r1
   d5666:	e006      	b.n	d5676 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x1a>
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   d5668:	2101      	movs	r1, #1
   d566a:	4620      	mov	r0, r4
   d566c:	f7ff fea8 	bl	d53c0 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d5670:	6a21      	ldr	r1, [r4, #32]
   d5672:	2200      	movs	r2, #0
   d5674:	4620      	mov	r0, r4
    }
}
   d5676:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
    if (scanResponse == nullptr) {
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d567a:	f7ff b9a5 	b.w	d49c8 <hal_ble_gap_set_scan_response_data>

000d567e <_ZNK8particle14BleLocalDevice9advertiseEv>:
    size_t len = CHECK(hal_ble_gap_get_scan_response_data(scanResponse->data(), BLE_MAX_ADV_DATA_LEN, nullptr));
    scanResponse->resize(len);
    return len;
}

int BleLocalDevice::advertise() const {
   d567e:	b513      	push	{r0, r1, r4, lr}
    WiringBleLock lk;
   d5680:	a801      	add	r0, sp, #4
   d5682:	f7ff fce3 	bl	d504c <_ZN8particle3ble13WiringBleLockC1Ev>
    return hal_ble_gap_start_advertising(nullptr);
   d5686:	2000      	movs	r0, #0
   d5688:	f7ff f9a6 	bl	d49d8 <hal_ble_gap_start_advertising>
   d568c:	4604      	mov	r4, r0
    scanResponse->resize(len);
    return len;
}

int BleLocalDevice::advertise() const {
    WiringBleLock lk;
   d568e:	a801      	add	r0, sp, #4
   d5690:	f7ff fcea 	bl	d5068 <_ZN8particle3ble13WiringBleLockD1Ev>
    return hal_ble_gap_start_advertising(nullptr);
}
   d5694:	4620      	mov	r0, r4
   d5696:	b002      	add	sp, #8
   d5698:	bd10      	pop	{r4, pc}

000d569a <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d569a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d569c:	4605      	mov	r5, r0
   d569e:	460c      	mov	r4, r1
    WiringBleLock lk;
   d56a0:	a801      	add	r0, sp, #4
int BleLocalDevice::advertise() const {
    WiringBleLock lk;
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d56a2:	4616      	mov	r6, r2
    WiringBleLock lk;
   d56a4:	f7ff fcd2 	bl	d504c <_ZN8particle3ble13WiringBleLockC1Ev>
    CHECK(setAdvertisingData(advertisingData));
   d56a8:	4621      	mov	r1, r4
   d56aa:	4628      	mov	r0, r5
   d56ac:	f7ff ffce 	bl	d564c <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   d56b0:	2800      	cmp	r0, #0
   d56b2:	db08      	blt.n	d56c6 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x2c>
    CHECK(setScanResponseData(scanResponse));
   d56b4:	4631      	mov	r1, r6
   d56b6:	4628      	mov	r0, r5
   d56b8:	f7ff ffd0 	bl	d565c <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   d56bc:	2800      	cmp	r0, #0
   d56be:	db02      	blt.n	d56c6 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x2c>
    return advertise();
   d56c0:	4628      	mov	r0, r5
   d56c2:	f7ff ffdc 	bl	d567e <_ZNK8particle14BleLocalDevice9advertiseEv>
   d56c6:	4604      	mov	r4, r0
    WiringBleLock lk;
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
    WiringBleLock lk;
   d56c8:	a801      	add	r0, sp, #4
   d56ca:	f7ff fccd 	bl	d5068 <_ZN8particle3ble13WiringBleLockD1Ev>
    CHECK(setAdvertisingData(advertisingData));
    CHECK(setScanResponseData(scanResponse));
    return advertise();
}
   d56ce:	4620      	mov	r0, r4
   d56d0:	b002      	add	sp, #8
   d56d2:	bd70      	pop	{r4, r5, r6, pc}

000d56d4 <_ZNK8particle14BleLocalDevice9connectedEv>:
    ppcp.slave_latency = latency;
    ppcp.conn_sup_timeout = timeout;
    return hal_ble_gap_set_ppcp(&ppcp, nullptr);
}

bool BleLocalDevice::connected() const {
   d56d4:	6803      	ldr	r3, [r0, #0]
    return (impl()->peers().size() > 0);
   d56d6:	69d8      	ldr	r0, [r3, #28]
}
   d56d8:	2800      	cmp	r0, #0
   d56da:	bfd4      	ite	le
   d56dc:	2000      	movle	r0, #0
   d56de:	2001      	movgt	r0, #1
   d56e0:	4770      	bx	lr

000d56e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d56e2:	680b      	ldr	r3, [r1, #0]
   d56e4:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d56e6:	b113      	cbz	r3, d56ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d56e8:	685a      	ldr	r2, [r3, #4]
   d56ea:	3201      	adds	r2, #1
   d56ec:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d56ee:	4770      	bx	lr

000d56f0 <_ZN8particle17BleCharacteristicC1ERKS0_>:
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   d56f0:	b510      	push	{r4, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d56f2:	f851 3b04 	ldr.w	r3, [r1], #4
   d56f6:	4604      	mov	r4, r0
   d56f8:	f840 3b04 	str.w	r3, [r0], #4
   d56fc:	f7ff fff1 	bl	d56e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        : impl_(characteristic.impl_) {
    if (!impl()) {
   d5700:	6823      	ldr	r3, [r4, #0]
   d5702:	b90b      	cbnz	r3, d5708 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   d5704:	f7ff fc72 	bl	d4fec <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.101>
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(copy), 0x%08X => 0x%08X -> 0x%08X, count: %d", &characteristic, this, impl(), impl_.use_count());
}
   d5708:	4620      	mov	r0, r4
   d570a:	bd10      	pop	{r4, pc}

000d570c <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   d570c:	b510      	push	{r4, lr}
   d570e:	f851 3b04 	ldr.w	r3, [r1], #4
   d5712:	4604      	mov	r4, r0
   d5714:	f840 3b04 	str.w	r3, [r0], #4
   d5718:	f7ff ffe3 	bl	d56e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d571c:	4620      	mov	r0, r4
   d571e:	bd10      	pop	{r4, pc}

000d5720 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d5720:	b510      	push	{r4, lr}
   d5722:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   d5724:	6800      	ldr	r0, [r0, #0]
   d5726:	b128      	cbz	r0, d5734 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d5728:	6843      	ldr	r3, [r0, #4]
   d572a:	3b01      	subs	r3, #1
   d572c:	6043      	str	r3, [r0, #4]
   d572e:	b90b      	cbnz	r3, d5734 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d5730:	f7ff fc66 	bl	d5000 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.110>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d5734:	4620      	mov	r0, r4
   d5736:	bd10      	pop	{r4, pc}

000d5738 <_ZN8particle17BleCharacteristicD1Ev>:
    impl_ = characteristic.impl_;
    DEBUG("now:0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
    return *this;
}

BleCharacteristic::~BleCharacteristic() {
   d5738:	b510      	push	{r4, lr}
   d573a:	4604      	mov	r4, r0
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d573c:	3004      	adds	r0, #4
   d573e:	f7ff ffef 	bl	d5720 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    DEBUG("~BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count() - 1);
}
   d5742:	4620      	mov	r0, r4
   d5744:	bd10      	pop	{r4, pc}

000d5746 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5746:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d5748:	6804      	ldr	r4, [r0, #0]
   d574a:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d574c:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d574e:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5752:	42a6      	cmp	r6, r4
   d5754:	d004      	beq.n	d5760 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   d5756:	1d20      	adds	r0, r4, #4
   d5758:	f7ff ffe2 	bl	d5720 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d575c:	3408      	adds	r4, #8
   d575e:	e7f8      	b.n	d5752 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5760:	6828      	ldr	r0, [r5, #0]
   d5762:	f7ff fbf7 	bl	d4f54 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d5766:	4628      	mov	r0, r5
   d5768:	bd70      	pop	{r4, r5, r6, pc}

000d576a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d576a:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d576c:	6804      	ldr	r4, [r0, #0]
   d576e:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5770:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d5772:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5776:	42a6      	cmp	r6, r4
   d5778:	d004      	beq.n	d5784 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   d577a:	1d20      	adds	r0, r4, #4
   d577c:	f7ff ffd0 	bl	d5720 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5780:	3408      	adds	r4, #8
   d5782:	e7f8      	b.n	d5776 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5784:	6828      	ldr	r0, [r5, #0]
   d5786:	f7ff fbe5 	bl	d4f54 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d578a:	4628      	mov	r0, r5
   d578c:	bd70      	pop	{r4, r5, r6, pc}

000d578e <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d578e:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d5790:	6904      	ldr	r4, [r0, #16]
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
    }

    ~BlePeerDeviceImpl() = default;
   d5792:	f104 0018 	add.w	r0, r4, #24
   d5796:	f7ff ffe8 	bl	d576a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d579a:	f104 000c 	add.w	r0, r4, #12
   d579e:	f7ff ffd2 	bl	d5746 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
   d57a2:	4620      	mov	r0, r4
   d57a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d57a8:	f7fe bc79 	b.w	d409e <_ZdlPv>

000d57ac <_ZN8particle14BleLocalDeviceD1Ev>:
        return impl_.get();
    }

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   d57ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d57ae:	6804      	ldr	r4, [r0, #0]
   d57b0:	4607      	mov	r7, r0
   d57b2:	b1c4      	cbz	r4, d57e6 <_ZN8particle14BleLocalDeviceD1Ev+0x3a>
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
   d57b4:	69a5      	ldr	r5, [r4, #24]
   d57b6:	69e3      	ldr	r3, [r4, #28]
   d57b8:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d57bc:	42ae      	cmp	r6, r5
   d57be:	d004      	beq.n	d57ca <_ZN8particle14BleLocalDeviceD1Ev+0x1e>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d57c0:	1d28      	adds	r0, r5, #4
   d57c2:	f7ff ffad 	bl	d5720 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d57c6:	3508      	adds	r5, #8
   d57c8:	e7f8      	b.n	d57bc <_ZN8particle14BleLocalDeviceD1Ev+0x10>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d57ca:	69a0      	ldr	r0, [r4, #24]
   d57cc:	f7ff fbc2 	bl	d4f54 <free>
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
    }

    ~BleLocalDeviceImpl() = default;
   d57d0:	f104 000c 	add.w	r0, r4, #12
   d57d4:	f7ff ffc9 	bl	d576a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d57d8:	4620      	mov	r0, r4
   d57da:	f7ff ffb4 	bl	d5746 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d57de:	2134      	movs	r1, #52	; 0x34
   d57e0:	4620      	mov	r0, r4
   d57e2:	f002 fcaa 	bl	d813a <_ZdlPvj>
   d57e6:	4638      	mov	r0, r7
   d57e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d57ec <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d57ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d57ee:	2500      	movs	r5, #0
   d57f0:	6005      	str	r5, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d57f2:	6045      	str	r5, [r0, #4]
   d57f4:	4606      	mov	r6, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d57f6:	2024      	movs	r0, #36	; 0x24
   d57f8:	f7fe fc4f 	bl	d409a <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d57fc:	4604      	mov	r4, r0
   d57fe:	b178      	cbz	r0, d5820 <_ZN8particle13BlePeerDeviceC1Ev+0x34>
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d5800:	4603      	mov	r3, r0
   d5802:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d5806:	f823 2b02 	strh.w	r2, [r3], #2

/*******************************************************
 * BleAddress class
 */
BleAddress::BleAddress()
        : address_{} {
   d580a:	f8c0 5002 	str.w	r5, [r0, #2]
   d580e:	605d      	str	r5, [r3, #4]
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d5810:	7285      	strb	r5, [r0, #10]
   d5812:	72c5      	strb	r5, [r0, #11]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d5814:	60c5      	str	r5, [r0, #12]
   d5816:	6105      	str	r5, [r0, #16]
   d5818:	6145      	str	r5, [r0, #20]
   d581a:	6185      	str	r5, [r0, #24]
   d581c:	61c5      	str	r5, [r0, #28]
   d581e:	6205      	str	r5, [r0, #32]
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d5820:	2300      	movs	r3, #0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d5822:	2014      	movs	r0, #20
   d5824:	9301      	str	r3, [sp, #4]
   d5826:	f7fe fc38 	bl	d409a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d582a:	4603      	mov	r3, r0
   d582c:	b128      	cbz	r0, d583a <_ZN8particle13BlePeerDeviceC1Ev+0x4e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d582e:	2201      	movs	r2, #1
   d5830:	6042      	str	r2, [r0, #4]
   d5832:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d5834:	4a08      	ldr	r2, [pc, #32]	; (d5858 <_ZN8particle13BlePeerDeviceC1Ev+0x6c>)
   d5836:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d5838:	6104      	str	r4, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d583a:	a802      	add	r0, sp, #8
   d583c:	6872      	ldr	r2, [r6, #4]
   d583e:	f840 2d04 	str.w	r2, [r0, #-4]!
	_M_pi = __tmp;
   d5842:	6073      	str	r3, [r6, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d5844:	6034      	str	r4, [r6, #0]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d5846:	f7ff ff6b 	bl	d5720 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
   d584a:	6833      	ldr	r3, [r6, #0]
   d584c:	b90b      	cbnz	r3, d5852 <_ZN8particle13BlePeerDeviceC1Ev+0x66>
   d584e:	f7ff fbcd 	bl	d4fec <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.101>
        SPARK_ASSERT(false);
    }
}
   d5852:	4630      	mov	r0, r6
   d5854:	b002      	add	sp, #8
   d5856:	bd70      	pop	{r4, r5, r6, pc}
   d5858:	000d91d8 	.word	0x000d91d8

000d585c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>:
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
   d585c:	b538      	push	{r3, r4, r5, lr}
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d585e:	680c      	ldr	r4, [r1, #0]
	if (__tmp != _M_pi)
   d5860:	6803      	ldr	r3, [r0, #0]
   d5862:	429c      	cmp	r4, r3
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
   d5864:	4605      	mov	r5, r0
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
   d5866:	d00c      	beq.n	d5882 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x26>
	  {
	    if (__tmp != 0)
   d5868:	b114      	cbz	r4, d5870 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x14>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d586a:	6863      	ldr	r3, [r4, #4]
   d586c:	3301      	adds	r3, #1
   d586e:	6063      	str	r3, [r4, #4]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
   d5870:	6828      	ldr	r0, [r5, #0]
   d5872:	b128      	cbz	r0, d5880 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d5874:	6843      	ldr	r3, [r0, #4]
   d5876:	3b01      	subs	r3, #1
   d5878:	6043      	str	r3, [r0, #4]
   d587a:	b90b      	cbnz	r3, d5880 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>
   d587c:	f7ff fbc0 	bl	d5000 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.110>
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
	      _M_pi->_M_release();
	    _M_pi = __tmp;
   d5880:	602c      	str	r4, [r5, #0]
	  }
	return *this;
      }
   d5882:	4628      	mov	r0, r5
   d5884:	bd38      	pop	{r3, r4, r5, pc}

000d5886 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d5886:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d5888:	b570      	push	{r4, r5, r6, lr}
   d588a:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d588c:	d91a      	bls.n	d58c4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x3e>
   d588e:	4290      	cmp	r0, r2
   d5890:	d219      	bcs.n	d58c6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x40>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
   d5892:	f1a1 0608 	sub.w	r6, r1, #8
   d5896:	1a51      	subs	r1, r2, r1
   d5898:	3904      	subs	r1, #4
   d589a:	1f15      	subs	r5, r2, #4
   d589c:	1844      	adds	r4, r0, r1
            for (; end != p; --end, --dest) {
   d589e:	1f2b      	subs	r3, r5, #4
   d58a0:	429e      	cmp	r6, r3
   d58a2:	d025      	beq.n	d58f0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*end));
   d58a4:	2c04      	cmp	r4, #4
   d58a6:	d007      	beq.n	d58b8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x32>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d58a8:	f855 3c04 	ldr.w	r3, [r5, #-4]
   d58ac:	f844 3c04 	str.w	r3, [r4, #-4]
   d58b0:	4629      	mov	r1, r5
   d58b2:	4620      	mov	r0, r4
   d58b4:	f7ff ff15 	bl	d56e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d58b8:	4628      	mov	r0, r5
   d58ba:	f7ff ff31 	bl	d5720 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d58be:	3d08      	subs	r5, #8
   d58c0:	3c08      	subs	r4, #8
   d58c2:	e7ec      	b.n	d589e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x18>
                end->~T();
            }
        } else if (dest != p) {
   d58c4:	d014      	beq.n	d58f0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
   d58c6:	1d0c      	adds	r4, r1, #4
   d58c8:	1d06      	adds	r6, r0, #4
            for (; p != end; ++p, ++dest) {
   d58ca:	1f23      	subs	r3, r4, #4
   d58cc:	429d      	cmp	r5, r3
   d58ce:	d00f      	beq.n	d58f0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*p));
   d58d0:	2e04      	cmp	r6, #4
   d58d2:	d007      	beq.n	d58e4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x5e>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d58d4:	f854 3c04 	ldr.w	r3, [r4, #-4]
   d58d8:	f846 3c04 	str.w	r3, [r6, #-4]
   d58dc:	4621      	mov	r1, r4
   d58de:	4630      	mov	r0, r6
   d58e0:	f7ff feff 	bl	d56e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d58e4:	4620      	mov	r0, r4
   d58e6:	f7ff ff1b 	bl	d5720 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d58ea:	3408      	adds	r4, #8
   d58ec:	3608      	adds	r6, #8
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d58ee:	e7ec      	b.n	d58ca <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x44>
   d58f0:	bd70      	pop	{r4, r5, r6, pc}

000d58f2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>:
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d58f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    T* const p = find(data_, data_ + size_, value);
   d58f6:	6804      	ldr	r4, [r0, #0]
   d58f8:	6843      	ldr	r3, [r0, #4]
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d58fa:	4605      	mov	r5, r0
   d58fc:	4688      	mov	r8, r1
    T* const p = find(data_, data_ + size_, value);
   d58fe:	eb04 07c3 	add.w	r7, r4, r3, lsl #3
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d5902:	42a7      	cmp	r7, r4
   d5904:	d018      	beq.n	d5938 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x46>
            if (*p == value) {
   d5906:	4641      	mov	r1, r8
   d5908:	4620      	mov	r0, r4
   d590a:	f7ff fe11 	bl	d5530 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   d590e:	4606      	mov	r6, r0
   d5910:	b908      	cbnz	r0, d5916 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d5912:	3408      	adds	r4, #8
   d5914:	e7f5      	b.n	d5902 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x10>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
   d5916:	b18c      	cbz	r4, d593c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4a>
   d5918:	1d20      	adds	r0, r4, #4
   d591a:	f7ff ff01 	bl	d5720 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
   d591e:	682b      	ldr	r3, [r5, #0]
   d5920:	686a      	ldr	r2, [r5, #4]
   d5922:	f104 0108 	add.w	r1, r4, #8
   d5926:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d592a:	4620      	mov	r0, r4
   d592c:	f7ff ffab 	bl	d5886 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   d5930:	686b      	ldr	r3, [r5, #4]
   d5932:	3b01      	subs	r3, #1
   d5934:	606b      	str	r3, [r5, #4]
    return true;
   d5936:	e002      	b.n	d593e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
   d5938:	2600      	movs	r6, #0
   d593a:	e000      	b.n	d593e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>
   d593c:	4626      	mov	r6, r4
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
    return true;
}
   d593e:	4630      	mov	r0, r6
   d5940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5944 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d5944:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d5946:	4604      	mov	r4, r0
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5948:	f851 3b04 	ldr.w	r3, [r1], #4
    return insert(size_, std::move(value));
   d594c:	6847      	ldr	r7, [r0, #4]
   d594e:	9300      	str	r3, [sp, #0]
   d5950:	a801      	add	r0, sp, #4
   d5952:	f7ff fec6 	bl	d56e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5956:	6866      	ldr	r6, [r4, #4]
   d5958:	68a3      	ldr	r3, [r4, #8]
   d595a:	429e      	cmp	r6, r3
   d595c:	db14      	blt.n	d5988 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x44>
   d595e:	3601      	adds	r6, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d5960:	2e00      	cmp	r6, #0
   d5962:	dd0b      	ble.n	d597c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x38>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d5964:	00f0      	lsls	r0, r6, #3
   d5966:	f7ff faed 	bl	d4f44 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d596a:	4605      	mov	r5, r0
   d596c:	b318      	cbz	r0, d59b6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x72>
                return false;
            }
            move(d, data_, data_ + size_);
   d596e:	e894 0006 	ldmia.w	r4, {r1, r2}
   d5972:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d5976:	f7ff ff86 	bl	d5886 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d597a:	e000      	b.n	d597e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d597c:	2500      	movs	r5, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d597e:	6820      	ldr	r0, [r4, #0]
   d5980:	f7ff fae8 	bl	d4f54 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d5984:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d5986:	60a6      	str	r6, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d5988:	6826      	ldr	r6, [r4, #0]
    move(p + 1, p, data_ + size_);
   d598a:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d598c:	eb06 05c7 	add.w	r5, r6, r7, lsl #3
    move(p + 1, p, data_ + size_);
   d5990:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
   d5994:	4629      	mov	r1, r5
   d5996:	f105 0008 	add.w	r0, r5, #8
   d599a:	f7ff ff74 	bl	d5886 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d599e:	b135      	cbz	r5, d59ae <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6a>
   d59a0:	9b00      	ldr	r3, [sp, #0]
   d59a2:	f846 3037 	str.w	r3, [r6, r7, lsl #3]
   d59a6:	a901      	add	r1, sp, #4
   d59a8:	1d28      	adds	r0, r5, #4
   d59aa:	f7ff fe9a 	bl	d56e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    ++size_;
   d59ae:	6863      	ldr	r3, [r4, #4]
   d59b0:	3301      	adds	r3, #1
   d59b2:	6063      	str	r3, [r4, #4]
   d59b4:	2501      	movs	r5, #1
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d59b6:	a801      	add	r0, sp, #4
   d59b8:	f7ff feb2 	bl	d5720 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d59bc:	4628      	mov	r0, r5
   d59be:	b003      	add	sp, #12
   d59c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d59c4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d59c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d59c8:	4604      	mov	r4, r0
   d59ca:	b08e      	sub	sp, #56	; 0x38
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d59cc:	a803      	add	r0, sp, #12
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d59ce:	460d      	mov	r5, r1
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d59d0:	f7ff fb3c 	bl	d504c <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   d59d4:	6823      	ldr	r3, [r4, #0]
   d59d6:	2b03      	cmp	r3, #3
   d59d8:	d002      	beq.n	d59e0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
   d59da:	2b04      	cmp	r3, #4
   d59dc:	d042      	beq.n	d5a64 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xa0>
   d59de:	e087      	b.n	d5af0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
   d59e0:	a804      	add	r0, sp, #16
   d59e2:	f7ff ff03 	bl	d57ec <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   d59e6:	9b04      	ldr	r3, [sp, #16]
   d59e8:	8922      	ldrh	r2, [r4, #8]
   d59ea:	801a      	strh	r2, [r3, #0]
    }
    return address_.addr[i];
}

BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
    address_ = addr;
   d59ec:	6862      	ldr	r2, [r4, #4]
   d59ee:	9904      	ldr	r1, [sp, #16]
   d59f0:	f852 3f08 	ldr.w	r3, [r2, #8]!
   d59f4:	f8c1 3002 	str.w	r3, [r1, #2]
   d59f8:	6853      	ldr	r3, [r2, #4]
   d59fa:	f8c1 3006 	str.w	r3, [r1, #6]
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d59fe:	a807      	add	r0, sp, #28
   d5a00:	9b04      	ldr	r3, [sp, #16]
   d5a02:	9306      	str	r3, [sp, #24]
   d5a04:	a905      	add	r1, sp, #20
   d5a06:	f7ff fe6c 	bl	d56e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d5a0a:	a906      	add	r1, sp, #24
   d5a0c:	f105 0018 	add.w	r0, r5, #24
   d5a10:	f7ff ff98 	bl	d5944 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   d5a14:	4604      	mov	r4, r0
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5a16:	a807      	add	r0, sp, #28
   d5a18:	f7ff fe82 	bl	d5720 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5a1c:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   d5a1e:	9306      	str	r3, [sp, #24]
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d5a20:	b974      	cbnz	r4, d5a40 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x7c>
                    LOG(ERROR, "Failed to append peer Central device.");
   d5a22:	4b36      	ldr	r3, [pc, #216]	; (d5afc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x138>)
   d5a24:	9300      	str	r3, [sp, #0]
   d5a26:	aa06      	add	r2, sp, #24
   d5a28:	4623      	mov	r3, r4
   d5a2a:	4935      	ldr	r1, [pc, #212]	; (d5b00 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d5a2c:	9407      	str	r4, [sp, #28]
   d5a2e:	2032      	movs	r0, #50	; 0x32
   d5a30:	f7ff f9e4 	bl	d4dfc <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   d5a34:	9b04      	ldr	r3, [sp, #16]
   d5a36:	4621      	mov	r1, r4
   d5a38:	8818      	ldrh	r0, [r3, #0]
   d5a3a:	f7fe ffd5 	bl	d49e8 <hal_ble_gap_disconnect>
   d5a3e:	e00d      	b.n	d5a5c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    return;
                }
                LOG(TRACE, "Connected by Central device.");
   d5a40:	4a30      	ldr	r2, [pc, #192]	; (d5b04 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x140>)
   d5a42:	9200      	str	r2, [sp, #0]
   d5a44:	2300      	movs	r3, #0
   d5a46:	aa06      	add	r2, sp, #24
   d5a48:	492d      	ldr	r1, [pc, #180]	; (d5b00 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d5a4a:	9307      	str	r3, [sp, #28]
   d5a4c:	2001      	movs	r0, #1
   d5a4e:	f7ff f9d5 	bl	d4dfc <log_message>
                if (impl->connectedCb_) {
   d5a52:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   d5a54:	b113      	cbz	r3, d5a5c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    impl->connectedCb_(peer, impl->connectedContext_);
   d5a56:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   d5a58:	a804      	add	r0, sp, #16
   d5a5a:	4798      	blx	r3
   d5a5c:	a805      	add	r0, sp, #20
   d5a5e:	f7ff fe5f 	bl	d5720 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5a62:	e045      	b.n	d5af0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
                }
                break;
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d5a64:	8921      	ldrh	r1, [r4, #8]
   d5a66:	4628      	mov	r0, r5
   d5a68:	f7ff fce6 	bl	d5438 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d5a6c:	4607      	mov	r7, r0
   d5a6e:	2800      	cmp	r0, #0
   d5a70:	d03e      	beq.n	d5af0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
   d5a72:	6804      	ldr	r4, [r0, #0]
   d5a74:	69a3      	ldr	r3, [r4, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d5a76:	69e1      	ldr	r1, [r4, #28]
    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
    }

    void onDisconnected() {
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   d5a78:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d5a7c:	8022      	strh	r2, [r4, #0]
   d5a7e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
        for (auto& characteristic : characteristics_) {
   d5a82:	4299      	cmp	r1, r3
   d5a84:	d003      	beq.n	d5a8e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xca>
   d5a86:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d5a8a:	8042      	strh	r2, [r0, #2]
   d5a8c:	e7f9      	b.n	d5a82 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xbe>
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d5a8e:	68e6      	ldr	r6, [r4, #12]
   d5a90:	6923      	ldr	r3, [r4, #16]
   d5a92:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5a96:	45b0      	cmp	r8, r6
   d5a98:	d004      	beq.n	d5aa4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
   d5a9a:	1d30      	adds	r0, r6, #4
   d5a9c:	f7ff fe40 	bl	d5720 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5aa0:	3608      	adds	r6, #8
   d5aa2:	e7f8      	b.n	d5a96 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xd2>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d5aa4:	2300      	movs	r3, #0
   d5aa6:	6123      	str	r3, [r4, #16]
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d5aa8:	69a6      	ldr	r6, [r4, #24]
   d5aaa:	69e3      	ldr	r3, [r4, #28]
   d5aac:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5ab0:	45b0      	cmp	r8, r6
   d5ab2:	d004      	beq.n	d5abe <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xfa>
   d5ab4:	1d30      	adds	r0, r6, #4
   d5ab6:	f7ff fe33 	bl	d5720 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5aba:	3608      	adds	r6, #8
   d5abc:	e7f8      	b.n	d5ab0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d5abe:	2300      	movs	r3, #0
   d5ac0:	61e3      	str	r3, [r4, #28]
        }
        services_.clear();
        characteristics_.clear();
        servicesDiscovered_ = false;
   d5ac2:	72a3      	strb	r3, [r4, #10]
        characteristicsDiscovered_ = false;
   d5ac4:	72e3      	strb	r3, [r4, #11]
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
                if (peer) {
                    peer->impl()->onDisconnected();
                    if (impl->disconnectedCb_) {
   d5ac6:	6aab      	ldr	r3, [r5, #40]	; 0x28
   d5ac8:	b113      	cbz	r3, d5ad0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10c>
                        impl->disconnectedCb_(*peer, impl->disconnectedContext_);
   d5aca:	6b29      	ldr	r1, [r5, #48]	; 0x30
   d5acc:	4638      	mov	r0, r7
   d5ace:	4798      	blx	r3
                    }
                    LOG(TRACE, "Disconnected by remote device.");
   d5ad0:	2320      	movs	r3, #32
   d5ad2:	4a0d      	ldr	r2, [pc, #52]	; (d5b08 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x144>)
   d5ad4:	9306      	str	r3, [sp, #24]
   d5ad6:	9200      	str	r2, [sp, #0]
   d5ad8:	2300      	movs	r3, #0
   d5ada:	4909      	ldr	r1, [pc, #36]	; (d5b00 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d5adc:	9307      	str	r3, [sp, #28]
   d5ade:	2001      	movs	r0, #1
   d5ae0:	aa06      	add	r2, sp, #24
   d5ae2:	f7ff f98b 	bl	d4dfc <log_message>
                    impl->peers_.removeOne(*peer);
   d5ae6:	4639      	mov	r1, r7
   d5ae8:	f105 0018 	add.w	r0, r5, #24
   d5aec:	f7ff ff01 	bl	d58f2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d5af0:	a803      	add	r0, sp, #12
   d5af2:	f7ff fab9 	bl	d5068 <_ZN8particle3ble13WiringBleLockD1Ev>
            }
            default: {
                break;
            }
        }
    }
   d5af6:	b00e      	add	sp, #56	; 0x38
   d5af8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5afc:	000d925e 	.word	0x000d925e
   d5b00:	000d91fc 	.word	0x000d91fc
   d5b04:	000d9284 	.word	0x000d9284
   d5b08:	000d92a1 	.word	0x000d92a1

000d5b0c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d5b0c:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d5b0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5b10:	4606      	mov	r6, r0
   d5b12:	460c      	mov	r4, r1
   d5b14:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d5b16:	d914      	bls.n	d5b42 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d5b18:	4290      	cmp	r0, r2
   d5b1a:	d213      	bcs.n	d5b44 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d5b1c:	f1a2 0508 	sub.w	r5, r2, #8
            dest += end - p - 1;
   d5b20:	1a6c      	subs	r4, r5, r1
   d5b22:	f1a1 0708 	sub.w	r7, r1, #8
   d5b26:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d5b28:	42af      	cmp	r7, r5
   d5b2a:	d018      	beq.n	d5b5e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d5b2c:	b11c      	cbz	r4, d5b36 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept
      : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   d5b2e:	4629      	mov	r1, r5
   d5b30:	4620      	mov	r0, r4
   d5b32:	f7ff fdeb 	bl	d570c <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d5b36:	1d28      	adds	r0, r5, #4
   d5b38:	f7ff fdf2 	bl	d5720 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d5b3c:	3d08      	subs	r5, #8
   d5b3e:	3c08      	subs	r4, #8
   d5b40:	e7f2      	b.n	d5b28 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d5b42:	d00c      	beq.n	d5b5e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d5b44:	42ac      	cmp	r4, r5
   d5b46:	d00a      	beq.n	d5b5e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d5b48:	b11e      	cbz	r6, d5b52 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d5b4a:	4621      	mov	r1, r4
   d5b4c:	4630      	mov	r0, r6
   d5b4e:	f7ff fddd 	bl	d570c <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d5b52:	1d20      	adds	r0, r4, #4
   d5b54:	f7ff fde4 	bl	d5720 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d5b58:	3408      	adds	r4, #8
   d5b5a:	3608      	adds	r6, #8
   d5b5c:	e7f2      	b.n	d5b44 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
   d5b5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5b60 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d5b60:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d5b62:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d5b64:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d5b66:	dd0b      	ble.n	d5b80 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d5b68:	00f0      	lsls	r0, r6, #3
   d5b6a:	f7ff f9eb 	bl	d4f44 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d5b6e:	4604      	mov	r4, r0
   d5b70:	b170      	cbz	r0, d5b90 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d5b72:	e895 0006 	ldmia.w	r5, {r1, r2}
   d5b76:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d5b7a:	f7ff ffc7 	bl	d5b0c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d5b7e:	e000      	b.n	d5b82 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d5b80:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5b82:	6828      	ldr	r0, [r5, #0]
   d5b84:	f7ff f9e6 	bl	d4f54 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d5b88:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d5b8a:	60ae      	str	r6, [r5, #8]
        return true;
   d5b8c:	2001      	movs	r0, #1
   d5b8e:	bd70      	pop	{r4, r5, r6, pc}
    }
   d5b90:	bd70      	pop	{r4, r5, r6, pc}

000d5b92 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d5b92:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5b94:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d5b96:	6845      	ldr	r5, [r0, #4]
   d5b98:	4668      	mov	r0, sp
   d5b9a:	f7ff fdb7 	bl	d570c <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5b9e:	6861      	ldr	r1, [r4, #4]
   d5ba0:	68a3      	ldr	r3, [r4, #8]
   d5ba2:	4299      	cmp	r1, r3
   d5ba4:	db05      	blt.n	d5bb2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x20>
   d5ba6:	3101      	adds	r1, #1
   d5ba8:	4620      	mov	r0, r4
   d5baa:	f7ff ffd9 	bl	d5b60 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d5bae:	4606      	mov	r6, r0
   d5bb0:	b198      	cbz	r0, d5bda <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x48>
        return false;
    }
    T* const p = data_ + i;
   d5bb2:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d5bb4:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d5bb6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d5bba:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d5bbe:	4629      	mov	r1, r5
   d5bc0:	f105 0008 	add.w	r0, r5, #8
   d5bc4:	f7ff ffa2 	bl	d5b0c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d5bc8:	b11d      	cbz	r5, d5bd2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x40>
   d5bca:	4669      	mov	r1, sp
   d5bcc:	4628      	mov	r0, r5
   d5bce:	f7ff fd9d 	bl	d570c <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   d5bd2:	6863      	ldr	r3, [r4, #4]
   d5bd4:	3301      	adds	r3, #1
   d5bd6:	6063      	str	r3, [r4, #4]
   d5bd8:	2601      	movs	r6, #1
   d5bda:	a801      	add	r0, sp, #4
   d5bdc:	f7ff fda0 	bl	d5720 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d5be0:	4630      	mov	r0, r6
   d5be2:	b002      	add	sp, #8
   d5be4:	bd70      	pop	{r4, r5, r6, pc}

000d5be6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d5be6:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d5be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5bea:	4606      	mov	r6, r0
   d5bec:	460c      	mov	r4, r1
   d5bee:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d5bf0:	d914      	bls.n	d5c1c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d5bf2:	4290      	cmp	r0, r2
   d5bf4:	d213      	bcs.n	d5c1e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d5bf6:	f1a2 0508 	sub.w	r5, r2, #8
            dest += end - p - 1;
   d5bfa:	1a6c      	subs	r4, r5, r1
   d5bfc:	f1a1 0708 	sub.w	r7, r1, #8
   d5c00:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d5c02:	42af      	cmp	r7, r5
   d5c04:	d018      	beq.n	d5c38 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d5c06:	b11c      	cbz	r4, d5c10 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   d5c08:	4629      	mov	r1, r5
   d5c0a:	4620      	mov	r0, r4
   d5c0c:	f7ff fd70 	bl	d56f0 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d5c10:	1d28      	adds	r0, r5, #4
   d5c12:	f7ff fd85 	bl	d5720 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d5c16:	3d08      	subs	r5, #8
   d5c18:	3c08      	subs	r4, #8
   d5c1a:	e7f2      	b.n	d5c02 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d5c1c:	d00c      	beq.n	d5c38 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d5c1e:	42ac      	cmp	r4, r5
   d5c20:	d00a      	beq.n	d5c38 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d5c22:	b11e      	cbz	r6, d5c2c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d5c24:	4621      	mov	r1, r4
   d5c26:	4630      	mov	r0, r6
   d5c28:	f7ff fd62 	bl	d56f0 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d5c2c:	1d20      	adds	r0, r4, #4
   d5c2e:	f7ff fd77 	bl	d5720 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d5c32:	3408      	adds	r4, #8
   d5c34:	3608      	adds	r6, #8
   d5c36:	e7f2      	b.n	d5c1e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
   d5c38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5c3a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d5c3a:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d5c3c:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d5c3e:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d5c40:	dd0b      	ble.n	d5c5a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d5c42:	00f0      	lsls	r0, r6, #3
   d5c44:	f7ff f97e 	bl	d4f44 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d5c48:	4604      	mov	r4, r0
   d5c4a:	b170      	cbz	r0, d5c6a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d5c4c:	e895 0006 	ldmia.w	r5, {r1, r2}
   d5c50:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d5c54:	f7ff ffc7 	bl	d5be6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d5c58:	e000      	b.n	d5c5c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d5c5a:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5c5c:	6828      	ldr	r0, [r5, #0]
   d5c5e:	f7ff f979 	bl	d4f54 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d5c62:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d5c64:	60ae      	str	r6, [r5, #8]
        return true;
   d5c66:	2001      	movs	r0, #1
   d5c68:	bd70      	pop	{r4, r5, r6, pc}
    }
   d5c6a:	bd70      	pop	{r4, r5, r6, pc}

000d5c6c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d5c6c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5c6e:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d5c70:	6845      	ldr	r5, [r0, #4]
   d5c72:	4668      	mov	r0, sp
   d5c74:	f7ff fd3c 	bl	d56f0 <_ZN8particle17BleCharacteristicC1ERKS0_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5c78:	6861      	ldr	r1, [r4, #4]
   d5c7a:	68a3      	ldr	r3, [r4, #8]
   d5c7c:	4299      	cmp	r1, r3
   d5c7e:	db05      	blt.n	d5c8c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x20>
   d5c80:	3101      	adds	r1, #1
   d5c82:	4620      	mov	r0, r4
   d5c84:	f7ff ffd9 	bl	d5c3a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d5c88:	4606      	mov	r6, r0
   d5c8a:	b198      	cbz	r0, d5cb4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x48>
        return false;
    }
    T* const p = data_ + i;
   d5c8c:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d5c8e:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d5c90:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d5c94:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d5c98:	4629      	mov	r1, r5
   d5c9a:	f105 0008 	add.w	r0, r5, #8
   d5c9e:	f7ff ffa2 	bl	d5be6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d5ca2:	b11d      	cbz	r5, d5cac <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x40>
   d5ca4:	4669      	mov	r1, sp
   d5ca6:	4628      	mov	r0, r5
   d5ca8:	f7ff fd22 	bl	d56f0 <_ZN8particle17BleCharacteristicC1ERKS0_>
    ++size_;
   d5cac:	6863      	ldr	r3, [r4, #4]
   d5cae:	3301      	adds	r3, #1
   d5cb0:	6063      	str	r3, [r4, #4]
   d5cb2:	2601      	movs	r6, #1
   d5cb4:	a801      	add	r0, sp, #4
   d5cb6:	f7ff fd33 	bl	d5720 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d5cba:	4630      	mov	r0, r6
   d5cbc:	b002      	add	sp, #8
   d5cbe:	bd70      	pop	{r4, r5, r6, pc}

000d5cc0 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
   d5cc0:	b510      	push	{r4, lr}
   d5cc2:	4604      	mov	r4, r0
      {
	if (_M_ptr != nullptr)
   d5cc4:	6840      	ldr	r0, [r0, #4]
   d5cc6:	b108      	cbz	r0, d5ccc <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d5cc8:	f7fe f9e9 	bl	d409e <_ZdlPv>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
      }
   d5ccc:	4620      	mov	r0, r4
   d5cce:	bd10      	pop	{r4, pc}

000d5cd0 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d5cd0:	b507      	push	{r0, r1, r2, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d5cd2:	6903      	ldr	r3, [r0, #16]
      template<typename _Alloc>
        struct _Deleter
        {
          void operator()(typename _Alloc::value_type* __ptr)
          {
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
   d5cd4:	300c      	adds	r0, #12
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(&__a), _M_ptr(__ptr)
   d5cd6:	e88d 0009 	stmia.w	sp, {r0, r3}
            : BleCharacteristicImpl(desc, properties, callback, context) {
        charUuid_ = charUuid;
        svcUuid_ = svcUuid;
    }

    ~BleCharacteristicImpl() = default;
   d5cda:	f103 003c 	add.w	r0, r3, #60	; 0x3c
   d5cde:	f001 ff64 	bl	d7baa <_ZN6StringD1Ev>
   d5ce2:	4668      	mov	r0, sp
   d5ce4:	f7ff ffec 	bl	d5cc0 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d5ce8:	b003      	add	sp, #12
   d5cea:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5cf0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d5cf0:	b538      	push	{r3, r4, r5, lr}
   d5cf2:	2300      	movs	r3, #0
   d5cf4:	4604      	mov	r4, r0
   d5cf6:	6003      	str	r3, [r0, #0]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d5cf8:	2014      	movs	r0, #20
   d5cfa:	460d      	mov	r5, r1
   d5cfc:	f7fe f9cd 	bl	d409a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d5d00:	b128      	cbz	r0, d5d0e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d5d02:	2301      	movs	r3, #1
   d5d04:	6043      	str	r3, [r0, #4]
   d5d06:	6083      	str	r3, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d5d08:	4b02      	ldr	r3, [pc, #8]	; (d5d14 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x24>)
   d5d0a:	6003      	str	r3, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d5d0c:	6105      	str	r5, [r0, #16]
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
	      _M_pi = __mem;
   d5d0e:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      __d(__p); // Call _Deleter on __p.
	      __throw_exception_again;
	    }
	}
   d5d10:	4620      	mov	r0, r4
   d5d12:	bd38      	pop	{r3, r4, r5, pc}
   d5d14:	000d91a0 	.word	0x000d91a0

000d5d18 <_ZN8particle17BleCharacteristic9constructEPKcNS_25BleCharacteristicPropertyERNS_7BleUuidES5_PFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(...), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

void BleCharacteristic::construct(const char* desc, BleCharacteristicProperty properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   d5d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5d1c:	b088      	sub	sp, #32
   d5d1e:	4605      	mov	r5, r0
   d5d20:	461e      	mov	r6, r3
   d5d22:	2054      	movs	r0, #84	; 0x54
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d5d24:	2300      	movs	r3, #0
   d5d26:	460f      	mov	r7, r1
   d5d28:	4690      	mov	r8, r2
   d5d2a:	9304      	str	r3, [sp, #16]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d5d2c:	9305      	str	r3, [sp, #20]
   d5d2e:	f7fe f9b4 	bl	d409a <_Znwj>
   d5d32:	f8cd d018 	str.w	sp, [sp, #24]
   d5d36:	4604      	mov	r4, r0
   d5d38:	9007      	str	r0, [sp, #28]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d5d3a:	b1b0      	cbz	r0, d5d6a <_ZN8particle17BleCharacteristic9constructEPKcNS_25BleCharacteristicPropertyERNS_7BleUuidES5_PFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x52>
              callback_(nullptr),
              context_(nullptr) {
    }

    BleCharacteristicImpl(const char* desc, BleCharacteristicProperty properties, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl() {
   d5d3c:	f7ff fb5c 	bl	d53f8 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
        description_ = desc;
   d5d40:	4639      	mov	r1, r7
   d5d42:	f104 003c 	add.w	r0, r4, #60	; 0x3c
              context_(nullptr) {
    }

    BleCharacteristicImpl(const char* desc, BleCharacteristicProperty properties, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl() {
        properties_ = properties;
   d5d46:	f884 8004 	strb.w	r8, [r4, #4]
        description_ = desc;
   d5d4a:	f001 ffa2 	bl	d7c92 <_ZN6StringaSEPKc>
        callback_ = callback;
   d5d4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d5d50:	64e3      	str	r3, [r4, #76]	; 0x4c
        context_ = context;
    }

    BleCharacteristicImpl(const char* desc, BleCharacteristicProperty properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl(desc, properties, callback, context) {
        charUuid_ = charUuid;
   d5d52:	4631      	mov	r1, r6
    BleCharacteristicImpl(const char* desc, BleCharacteristicProperty properties, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl() {
        properties_ = properties;
        description_ = desc;
        callback_ = callback;
        context_ = context;
   d5d54:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d5d56:	6523      	str	r3, [r4, #80]	; 0x50
    }

    BleCharacteristicImpl(const char* desc, BleCharacteristicProperty properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl(desc, properties, callback, context) {
        charUuid_ = charUuid;
   d5d58:	f104 0014 	add.w	r0, r4, #20
   d5d5c:	f7ff fa0e 	bl	d517c <_ZN8particle7BleUuidaSERKS0_>
        svcUuid_ = svcUuid;
   d5d60:	990e      	ldr	r1, [sp, #56]	; 0x38
   d5d62:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d5d66:	f7ff fa09 	bl	d517c <_ZN8particle7BleUuidaSERKS0_>
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d5d6a:	4621      	mov	r1, r4

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
	_M_ptr = nullptr;
   d5d6c:	2600      	movs	r6, #0
   d5d6e:	ab01      	add	r3, sp, #4
   d5d70:	aa02      	add	r2, sp, #8
   d5d72:	a803      	add	r0, sp, #12
   d5d74:	9607      	str	r6, [sp, #28]
   d5d76:	f7ff ffbb 	bl	d5cf0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5d7a:	9b03      	ldr	r3, [sp, #12]
	__r._M_pi = _M_pi;
   d5d7c:	9a05      	ldr	r2, [sp, #20]
   d5d7e:	9203      	str	r2, [sp, #12]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d5d80:	a803      	add	r0, sp, #12
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d5d82:	9305      	str	r3, [sp, #20]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d5d84:	9404      	str	r4, [sp, #16]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d5d86:	f7ff fccb 	bl	d5720 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	: _M_ptr(), _M_refcount()
	{
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<typename std::remove_cv<_Tp>::type> __traits;
	  _Deleter<typename __traits::allocator_type> __del = { __a };
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
   d5d8a:	a806      	add	r0, sp, #24
   d5d8c:	f7ff ff98 	bl	d5cc0 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5d90:	9b04      	ldr	r3, [sp, #16]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5d92:	6829      	ldr	r1, [r5, #0]
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5d94:	9a05      	ldr	r2, [sp, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   d5d96:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d5d98:	a808      	add	r0, sp, #32
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5d9a:	686b      	ldr	r3, [r5, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5d9c:	9106      	str	r1, [sp, #24]
	__r._M_pi = _M_pi;
   d5d9e:	606a      	str	r2, [r5, #4]
	_M_pi = __tmp;
   d5da0:	f840 3d04 	str.w	r3, [r0, #-4]!

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d5da4:	9605      	str	r6, [sp, #20]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d5da6:	9604      	str	r6, [sp, #16]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5da8:	f7ff fcba 	bl	d5720 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5dac:	a805      	add	r0, sp, #20
   d5dae:	f7ff fcb7 	bl	d5720 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    DEBUG("BleCharacteristic(...), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

void BleCharacteristic::construct(const char* desc, BleCharacteristicProperty properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
    impl_ = std::make_shared<BleCharacteristicImpl>(desc, properties, charUuid, svcUuid, callback, context);
    if (!impl()) {
   d5db2:	6829      	ldr	r1, [r5, #0]
   d5db4:	b919      	cbnz	r1, d5dbe <_ZN8particle17BleCharacteristic9constructEPKcNS_25BleCharacteristicPropertyERNS_7BleUuidES5_PFvPKhjRKNS_13BlePeerDeviceEPvESB_+0xa6>
        SPARK_ASSERT(false);
   d5db6:	4a03      	ldr	r2, [pc, #12]	; (d5dc4 <_ZN8particle17BleCharacteristic9constructEPKcNS_25BleCharacteristicPropertyERNS_7BleUuidES5_PFvPKhjRKNS_13BlePeerDeviceEPvESB_+0xac>)
   d5db8:	200a      	movs	r0, #10
   d5dba:	f7ff f817 	bl	d4dec <panic_>
    }
    DEBUG("BleCharacteristic(), construct(...):0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}
   d5dbe:	b008      	add	sp, #32
   d5dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5dc4:	000d4b1d 	.word	0x000d4b1d

000d5dc8 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
   d5dc8:	b510      	push	{r4, lr}
   d5dca:	4604      	mov	r4, r0
      {
	if (_M_ptr != nullptr)
   d5dcc:	6840      	ldr	r0, [r0, #4]
   d5dce:	b108      	cbz	r0, d5dd4 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d5dd0:	f7fe f965 	bl	d409e <_ZdlPv>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
      }
   d5dd4:	4620      	mov	r0, r4
   d5dd6:	bd10      	pop	{r4, pc}

000d5dd8 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d5dd8:	b507      	push	{r0, r1, r2, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d5dda:	6903      	ldr	r3, [r0, #16]
      template<typename _Alloc>
        struct _Deleter
        {
          void operator()(typename _Alloc::value_type* __ptr)
          {
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
   d5ddc:	300c      	adds	r0, #12
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(&__a), _M_ptr(__ptr)
   d5dde:	e88d 0009 	stmia.w	sp, {r0, r3}
   d5de2:	4668      	mov	r0, sp
   d5de4:	f7ff fff0 	bl	d5dc8 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d5de8:	b003      	add	sp, #12
   d5dea:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5df0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d5df0:	b538      	push	{r3, r4, r5, lr}
   d5df2:	2300      	movs	r3, #0
   d5df4:	4604      	mov	r4, r0
   d5df6:	6003      	str	r3, [r0, #0]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d5df8:	2014      	movs	r0, #20
   d5dfa:	460d      	mov	r5, r1
   d5dfc:	f7fe f94d 	bl	d409a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d5e00:	b128      	cbz	r0, d5e0e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d5e02:	2301      	movs	r3, #1
   d5e04:	6043      	str	r3, [r0, #4]
   d5e06:	6083      	str	r3, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d5e08:	4b02      	ldr	r3, [pc, #8]	; (d5e14 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x24>)
   d5e0a:	6003      	str	r3, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d5e0c:	6105      	str	r5, [r0, #16]
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
	      _M_pi = __mem;
   d5e0e:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      __d(__p); // Call _Deleter on __p.
	      __throw_exception_again;
	    }
	}
   d5e10:	4620      	mov	r0, r4
   d5e12:	bd38      	pop	{r3, r4, r5, pc}
   d5e14:	000d91bc 	.word	0x000d91bc

000d5e18 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   d5e18:	b5f0      	push	{r4, r5, r6, r7, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d5e1a:	2600      	movs	r6, #0
   d5e1c:	b087      	sub	sp, #28
   d5e1e:	6006      	str	r6, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d5e20:	6046      	str	r6, [r0, #4]
   d5e22:	4604      	mov	r4, r0
   d5e24:	2018      	movs	r0, #24
   d5e26:	460f      	mov	r7, r1
   d5e28:	f7fe f937 	bl	d409a <_Znwj>
   d5e2c:	f8cd d010 	str.w	sp, [sp, #16]
   d5e30:	4605      	mov	r5, r0
   d5e32:	9005      	str	r0, [sp, #20]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d5e34:	b138      	cbz	r0, d5e46 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x2e>
class BleServiceImpl {
public:
    BleServiceImpl()
            : uuid_(),
              startHandle_(BLE_INVALID_ATTR_HANDLE),
              endHandle_(BLE_INVALID_ATTR_HANDLE) {
   d5e36:	f7ff f931 	bl	d509c <_ZN8particle7BleUuidC1Ev>
    }

    BleServiceImpl(const BleUuid& svcUuid)
            : BleServiceImpl() {
        uuid_ = svcUuid;
   d5e3a:	4639      	mov	r1, r7
   d5e3c:	4628      	mov	r0, r5
class BleServiceImpl {
public:
    BleServiceImpl()
            : uuid_(),
              startHandle_(BLE_INVALID_ATTR_HANDLE),
              endHandle_(BLE_INVALID_ATTR_HANDLE) {
   d5e3e:	82ae      	strh	r6, [r5, #20]
   d5e40:	82ee      	strh	r6, [r5, #22]
    }

    BleServiceImpl(const BleUuid& svcUuid)
            : BleServiceImpl() {
        uuid_ = svcUuid;
   d5e42:	f7ff f99b 	bl	d517c <_ZN8particle7BleUuidaSERKS0_>

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
	_M_ptr = nullptr;
   d5e46:	2300      	movs	r3, #0
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d5e48:	4629      	mov	r1, r5
   d5e4a:	9305      	str	r3, [sp, #20]
   d5e4c:	aa02      	add	r2, sp, #8
   d5e4e:	ab01      	add	r3, sp, #4
   d5e50:	a803      	add	r0, sp, #12
   d5e52:	f7ff ffcd 	bl	d5df0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5e56:	9b03      	ldr	r3, [sp, #12]
	__r._M_pi = _M_pi;
   d5e58:	6862      	ldr	r2, [r4, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d5e5a:	6025      	str	r5, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d5e5c:	6063      	str	r3, [r4, #4]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d5e5e:	a803      	add	r0, sp, #12

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d5e60:	9203      	str	r2, [sp, #12]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d5e62:	f7ff fc5d 	bl	d5720 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	: _M_ptr(), _M_refcount()
	{
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<typename std::remove_cv<_Tp>::type> __traits;
	  _Deleter<typename __traits::allocator_type> __del = { __a };
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
   d5e66:	a804      	add	r0, sp, #16
   d5e68:	f7ff ffae 	bl	d5dc8 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>
    }
}

BleService::BleService(const BleUuid& uuid)
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
   d5e6c:	6823      	ldr	r3, [r4, #0]
   d5e6e:	b90b      	cbnz	r3, d5e74 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x5c>
   d5e70:	f7ff f8bc 	bl	d4fec <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.101>
        SPARK_ASSERT(false);
    }
}
   d5e74:	4620      	mov	r0, r4
   d5e76:	b007      	add	sp, #28
   d5e78:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d5e7c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        p.disconnect();
    }
    return SYSTEM_ERROR_NONE;
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   d5e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5e80:	4617      	mov	r7, r2
   d5e82:	b09f      	sub	sp, #124	; 0x7c
   d5e84:	4680      	mov	r8, r0
    WiringBleLock lk;
   d5e86:	a805      	add	r0, sp, #20
        p.disconnect();
    }
    return SYSTEM_ERROR_NONE;
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   d5e88:	460e      	mov	r6, r1
    WiringBleLock lk;
   d5e8a:	f7ff f8df 	bl	d504c <_ZN8particle3ble13WiringBleLockC1Ev>
   d5e8e:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   d5e90:	7923      	ldrb	r3, [r4, #4]
   d5e92:	2b00      	cmp	r3, #0
   d5e94:	f000 80f3 	beq.w	d607e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x202>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5e98:	6833      	ldr	r3, [r6, #0]
   d5e9a:	68dd      	ldr	r5, [r3, #12]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d5e9c:	691b      	ldr	r3, [r3, #16]
   d5e9e:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   d5ea2:	9303      	str	r3, [sp, #12]
    }

    BleCharacteristicImpl& operator=(const BleCharacteristicImpl& charImpl) = delete;

    bool operator==(const BleCharacteristicImpl& impl) {
        if (charUuid_ == impl.charUuid_ &&
   d5ea4:	f104 0a14 	add.w	sl, r4, #20
                svcUuid_ == impl.svcUuid_ &&
   d5ea8:	f104 0b28 	add.w	fp, r4, #40	; 0x28
    WiringBleLock lk;
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
   d5eac:	9b03      	ldr	r3, [sp, #12]
   d5eae:	42ab      	cmp	r3, r5
   d5eb0:	d023      	beq.n	d5efa <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
   d5eb2:	f8d5 9000 	ldr.w	r9, [r5]
    }

    BleCharacteristicImpl& operator=(const BleCharacteristicImpl& charImpl) = delete;

    bool operator==(const BleCharacteristicImpl& impl) {
        if (charUuid_ == impl.charUuid_ &&
   d5eb6:	4650      	mov	r0, sl
   d5eb8:	f109 0114 	add.w	r1, r9, #20
   d5ebc:	f7ff f977 	bl	d51ae <_ZNK8particle7BleUuideqERKS0_>
                svcUuid_ == impl.svcUuid_ &&
                isLocal_ == impl.isLocal_ &&
   d5ec0:	2800      	cmp	r0, #0
   d5ec2:	f000 80e1 	beq.w	d6088 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>

    BleCharacteristicImpl& operator=(const BleCharacteristicImpl& charImpl) = delete;

    bool operator==(const BleCharacteristicImpl& impl) {
        if (charUuid_ == impl.charUuid_ &&
                svcUuid_ == impl.svcUuid_ &&
   d5ec6:	f109 0128 	add.w	r1, r9, #40	; 0x28
   d5eca:	4658      	mov	r0, fp
   d5ecc:	f7ff f96f 	bl	d51ae <_ZNK8particle7BleUuideqERKS0_>
    }

    BleCharacteristicImpl& operator=(const BleCharacteristicImpl& charImpl) = delete;

    bool operator==(const BleCharacteristicImpl& impl) {
        if (charUuid_ == impl.charUuid_ &&
   d5ed0:	2800      	cmp	r0, #0
   d5ed2:	f000 80d9 	beq.w	d6088 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>
                svcUuid_ == impl.svcUuid_ &&
                isLocal_ == impl.isLocal_ &&
   d5ed6:	6823      	ldr	r3, [r4, #0]
   d5ed8:	f423 417f 	bic.w	r1, r3, #65280	; 0xff00
   d5edc:	f8d9 3000 	ldr.w	r3, [r9]
   d5ee0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
   d5ee4:	4299      	cmp	r1, r3
   d5ee6:	f040 80cf 	bne.w	d6088 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   d5eea:	2320      	movs	r3, #32
   d5eec:	4a6b      	ldr	r2, [pc, #428]	; (d609c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x220>)
   d5eee:	9313      	str	r3, [sp, #76]	; 0x4c
   d5ef0:	2300      	movs	r3, #0
   d5ef2:	9200      	str	r2, [sp, #0]
   d5ef4:	9314      	str	r3, [sp, #80]	; 0x50
   d5ef6:	aa13      	add	r2, sp, #76	; 0x4c
   d5ef8:	e0bd      	b.n	d6076 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fa>
    BleUuid& charUUID() {
        return charUuid_;
    }

    BleUuid& svcUUID() {
        return svcUuid_;
   d5efa:	f104 0528 	add.w	r5, r4, #40	; 0x28
            return characteristic;
        }
    }
    // If the service that the characteristic belongs to is not specified,
    // put the characteristic to the default service.
    if (!charImpl->svcUUID().isValid()) {
   d5efe:	4628      	mov	r0, r5
   d5f00:	f7ff f923 	bl	d514a <_ZNK8particle7BleUuid7isValidEv>
   d5f04:	b918      	cbnz	r0, d5f0e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x92>
        LOG_DEBUG(TRACE, "Assign default service UUID.");
        charImpl->svcUUID() = PARTICLE_DEFAULT_BLE_SVC_UUID;
   d5f06:	4966      	ldr	r1, [pc, #408]	; (d60a0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x224>)
   d5f08:	4628      	mov	r0, r5
   d5f0a:	f7ff f942 	bl	d5192 <_ZN8particle7BleUuidaSEPKh>
   d5f0e:	6833      	ldr	r3, [r6, #0]
   d5f10:	f8d3 9000 	ldr.w	r9, [r3]
   d5f14:	685b      	ldr	r3, [r3, #4]
   d5f16:	eb09 0ac3 	add.w	sl, r9, r3, lsl #3
    }
    BleService* service = nullptr;
    for (auto& svc : impl()->services()) {
   d5f1a:	45d1      	cmp	r9, sl
            break;
        }
    }
    // Add service as needed.
    if (!service) {
        BleService svc(charImpl->svcUUID());
   d5f1c:	4629      	mov	r1, r5
    if (!charImpl->svcUUID().isValid()) {
        LOG_DEBUG(TRACE, "Assign default service UUID.");
        charImpl->svcUUID() = PARTICLE_DEFAULT_BLE_SVC_UUID;
    }
    BleService* service = nullptr;
    for (auto& svc : impl()->services()) {
   d5f1e:	d008      	beq.n	d5f32 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb6>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   d5f20:	f8d9 0000 	ldr.w	r0, [r9]
   d5f24:	f7ff f943 	bl	d51ae <_ZNK8particle7BleUuideqERKS0_>
   d5f28:	2800      	cmp	r0, #0
   d5f2a:	d137      	bne.n	d5f9c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x120>
    if (!charImpl->svcUUID().isValid()) {
        LOG_DEBUG(TRACE, "Assign default service UUID.");
        charImpl->svcUUID() = PARTICLE_DEFAULT_BLE_SVC_UUID;
    }
    BleService* service = nullptr;
    for (auto& svc : impl()->services()) {
   d5f2c:	f109 0908 	add.w	r9, r9, #8
   d5f30:	e7f3      	b.n	d5f1a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x9e>
            break;
        }
    }
    // Add service as needed.
    if (!service) {
        BleService svc(charImpl->svcUUID());
   d5f32:	a806      	add	r0, sp, #24
   d5f34:	f7ff ff70 	bl	d5e18 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        return BleUuidType::LONG;
    }
}

hal_ble_uuid_t BleUuid::halUUID() {
    return uuid_;
   d5f38:	aa13      	add	r2, sp, #76	; 0x4c
   d5f3a:	462b      	mov	r3, r5
   d5f3c:	f104 0c38 	add.w	ip, r4, #56	; 0x38
   d5f40:	4696      	mov	lr, r2
   d5f42:	6818      	ldr	r0, [r3, #0]
   d5f44:	6859      	ldr	r1, [r3, #4]
   d5f46:	4615      	mov	r5, r2
   d5f48:	c503      	stmia	r5!, {r0, r1}
   d5f4a:	3308      	adds	r3, #8
   d5f4c:	4563      	cmp	r3, ip
   d5f4e:	462a      	mov	r2, r5
   d5f50:	d1f7      	bne.n	d5f42 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xc6>
   d5f52:	6818      	ldr	r0, [r3, #0]
   d5f54:	6028      	str	r0, [r5, #0]
    }
    // Add service as needed.
    if (!service) {
        BleService svc(charImpl->svcUUID());
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   d5f56:	9a06      	ldr	r2, [sp, #24]
   d5f58:	2300      	movs	r3, #0
   d5f5a:	3214      	adds	r2, #20
   d5f5c:	4671      	mov	r1, lr
   d5f5e:	2001      	movs	r0, #1
   d5f60:	f7fe fd4c 	bl	d49fc <hal_ble_gatt_server_add_service>
   d5f64:	2800      	cmp	r0, #0
   d5f66:	d17e      	bne.n	d6066 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1ea>
    }

    ~BleLocalDeviceImpl() = default;

    Vector<BleService>& services() {
        return services_;
   d5f68:	6835      	ldr	r5, [r6, #0]
   d5f6a:	a906      	add	r1, sp, #24
   d5f6c:	a80b      	add	r0, sp, #44	; 0x2c
   d5f6e:	f7ff fbcd 	bl	d570c <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        BleService svc(charImpl->svcUUID());
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
            return characteristic;
        }
        if(!impl()->services().append(svc)) {
   d5f72:	4628      	mov	r0, r5
   d5f74:	a90b      	add	r1, sp, #44	; 0x2c
   d5f76:	f7ff fe0c 	bl	d5b92 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   d5f7a:	4605      	mov	r5, r0
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5f7c:	a80c      	add	r0, sp, #48	; 0x30
   d5f7e:	f7ff fbcf 	bl	d5720 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5f82:	2d00      	cmp	r5, #0
   d5f84:	d06f      	beq.n	d6066 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1ea>
   d5f86:	6832      	ldr	r2, [r6, #0]
    return data_[0];
}

template<typename T, typename AllocatorT>
inline T& spark::Vector<T, AllocatorT>::last() {
    return data_[size_ - 1];
   d5f88:	6853      	ldr	r3, [r2, #4]
   d5f8a:	6812      	ldr	r2, [r2, #0]
   d5f8c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   d5f90:	3b01      	subs	r3, #1
   d5f92:	a807      	add	r0, sp, #28
   d5f94:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   d5f98:	f7ff fbc2 	bl	d5720 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            context_ = charImpl.context_;
        }
    }

    void assignUuidIfNeeded() {
        if (!charUuid_.isValid()) {
   d5f9c:	f104 0514 	add.w	r5, r4, #20
   d5fa0:	4628      	mov	r0, r5
   d5fa2:	f7ff f8d2 	bl	d514a <_ZNK8particle7BleUuid7isValidEv>
   d5fa6:	b968      	cbnz	r0, d5fc4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x148>
            LOG_DEBUG(TRACE, "Assign default characteristic UUID.");
            defaultUuidCharCount_++;
   d5fa8:	4b3e      	ldr	r3, [pc, #248]	; (d60a4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x228>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d5faa:	493d      	ldr	r1, [pc, #244]	; (d60a0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x224>)
    }

    void assignUuidIfNeeded() {
        if (!charUuid_.isValid()) {
            LOG_DEBUG(TRACE, "Assign default characteristic UUID.");
            defaultUuidCharCount_++;
   d5fac:	881a      	ldrh	r2, [r3, #0]
   d5fae:	3201      	adds	r2, #1
   d5fb0:	b292      	uxth	r2, r2
   d5fb2:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d5fb4:	a813      	add	r0, sp, #76	; 0x4c
   d5fb6:	2301      	movs	r3, #1
   d5fb8:	f7ff f8b3 	bl	d5122 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   d5fbc:	a913      	add	r1, sp, #76	; 0x4c
   d5fbe:	4628      	mov	r0, r5
   d5fc0:	f7ff f8dc 	bl	d517c <_ZN8particle7BleUuidaSERKS0_>
            return characteristic;
        }
        service = &impl()->services().last();
    }
    charImpl->assignUuidIfNeeded();
    hal_ble_char_init_t charInit = {};
   d5fc4:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
   d5fc8:	4652      	mov	r2, sl
   d5fca:	2100      	movs	r1, #0
   d5fcc:	a813      	add	r0, sp, #76	; 0x4c
   d5fce:	f002 fe94 	bl	d8cfa <memset>
    charInit.version = BLE_API_VERSION;
   d5fd2:	2301      	movs	r3, #1
        return BleUuidType::LONG;
    }
}

hal_ble_uuid_t BleUuid::halUUID() {
    return uuid_;
   d5fd4:	aa06      	add	r2, sp, #24
        }
        service = &impl()->services().last();
    }
    charImpl->assignUuidIfNeeded();
    hal_ble_char_init_t charInit = {};
    charInit.version = BLE_API_VERSION;
   d5fd6:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
    charInit.size = sizeof(hal_ble_char_init_t);
   d5fda:	f8ad a04e 	strh.w	sl, [sp, #78]	; 0x4e
        return BleUuidType::LONG;
    }
}

hal_ble_uuid_t BleUuid::halUUID() {
    return uuid_;
   d5fde:	462b      	mov	r3, r5
   d5fe0:	f104 0c24 	add.w	ip, r4, #36	; 0x24
   d5fe4:	4615      	mov	r5, r2
   d5fe6:	6818      	ldr	r0, [r3, #0]
   d5fe8:	6859      	ldr	r1, [r3, #4]
   d5fea:	4696      	mov	lr, r2
   d5fec:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   d5ff0:	3308      	adds	r3, #8
   d5ff2:	4563      	cmp	r3, ip
   d5ff4:	4672      	mov	r2, lr
   d5ff6:	d1f6      	bne.n	d5fe6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x16a>
   d5ff8:	6818      	ldr	r0, [r3, #0]
   d5ffa:	f8ce 0000 	str.w	r0, [lr]
    }
    charImpl->assignUuidIfNeeded();
    hal_ble_char_init_t charInit = {};
    charInit.version = BLE_API_VERSION;
    charInit.size = sizeof(hal_ble_char_init_t);
    charInit.uuid = charImpl->charUUID().halUUID();
   d5ffe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6000:	f10d 0e58 	add.w	lr, sp, #88	; 0x58
   d6004:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   d6008:	682b      	ldr	r3, [r5, #0]
   d600a:	f8ce 3000 	str.w	r3, [lr]
    charInit.properties = static_cast<uint8_t>(charImpl->properties());
   d600e:	7923      	ldrb	r3, [r4, #4]
   d6010:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
    charInit.service_handle = service->impl()->startHandle();
   d6014:	f8d9 3000 	ldr.w	r3, [r9]
   d6018:	8a9b      	ldrh	r3, [r3, #20]
   d601a:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
    charInit.description = charImpl->description().c_str();
   d601e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d6020:	9315      	str	r3, [sp, #84]	; 0x54
    charInit.callback = charImpl->onBleCharEvents;
    charInit.context = charImpl;
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d6022:	2200      	movs	r2, #0
    charInit.size = sizeof(hal_ble_char_init_t);
    charInit.uuid = charImpl->charUUID().halUUID();
    charInit.properties = static_cast<uint8_t>(charImpl->properties());
    charInit.service_handle = service->impl()->startHandle();
    charInit.description = charImpl->description().c_str();
    charInit.callback = charImpl->onBleCharEvents;
   d6024:	4b20      	ldr	r3, [pc, #128]	; (d60a8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x22c>)
   d6026:	931c      	str	r3, [sp, #112]	; 0x70
    charInit.context = charImpl;
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d6028:	1da1      	adds	r1, r4, #6
   d602a:	a813      	add	r0, sp, #76	; 0x4c
    charInit.uuid = charImpl->charUUID().halUUID();
    charInit.properties = static_cast<uint8_t>(charImpl->properties());
    charInit.service_handle = service->impl()->startHandle();
    charInit.description = charImpl->description().c_str();
    charInit.callback = charImpl->onBleCharEvents;
    charInit.context = charImpl;
   d602c:	941d      	str	r4, [sp, #116]	; 0x74
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d602e:	f7fe fd0d 	bl	d4a4c <hal_ble_gatt_server_add_characteristic>
   d6032:	bb20      	cbnz	r0, d607e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x202>
        return characteristic;
    }
    charImpl->local() = true;
   d6034:	2301      	movs	r3, #1
   d6036:	7023      	strb	r3, [r4, #0]
    Vector<BleService>& services() {
        return services_;
    }

    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
   d6038:	6834      	ldr	r4, [r6, #0]
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
        return characteristic;
    }
    charImpl->local() = true;
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
   d603a:	4639      	mov	r1, r7
    Vector<BleService>& services() {
        return services_;
    }

    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
   d603c:	340c      	adds	r4, #12
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
        return characteristic;
    }
    charImpl->local() = true;
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
   d603e:	a80b      	add	r0, sp, #44	; 0x2c
   d6040:	f7ff fb56 	bl	d56f0 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d6044:	4620      	mov	r0, r4
   d6046:	a90b      	add	r1, sp, #44	; 0x2c
   d6048:	f7ff fe10 	bl	d5c6c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   d604c:	4604      	mov	r4, r0
   d604e:	a80c      	add	r0, sp, #48	; 0x30
   d6050:	f7ff fb66 	bl	d5720 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6054:	b99c      	cbnz	r4, d607e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x202>
        LOG(ERROR, "Failed to append local characteristic.");
   d6056:	2320      	movs	r3, #32
   d6058:	930b      	str	r3, [sp, #44]	; 0x2c
   d605a:	4b14      	ldr	r3, [pc, #80]	; (d60ac <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x230>)
   d605c:	9300      	str	r3, [sp, #0]
   d605e:	940c      	str	r4, [sp, #48]	; 0x30
   d6060:	4623      	mov	r3, r4
   d6062:	aa0b      	add	r2, sp, #44	; 0x2c
   d6064:	e007      	b.n	d6076 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fa>
    // Add service as needed.
    if (!service) {
        BleService svc(charImpl->svcUUID());
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
            return characteristic;
   d6066:	4639      	mov	r1, r7
   d6068:	4640      	mov	r0, r8
   d606a:	f7ff fb41 	bl	d56f0 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d606e:	a807      	add	r0, sp, #28
   d6070:	f7ff fb56 	bl	d5720 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6074:	e00a      	b.n	d608c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x210>
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   d6076:	490e      	ldr	r1, [pc, #56]	; (d60b0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x234>)
   d6078:	2032      	movs	r0, #50	; 0x32
   d607a:	f7fe febf 	bl	d4dfc <log_message>
            return characteristic;
   d607e:	4639      	mov	r1, r7
   d6080:	4640      	mov	r0, r8
   d6082:	f7ff fb35 	bl	d56f0 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d6086:	e001      	b.n	d608c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x210>
   d6088:	3508      	adds	r5, #8
    WiringBleLock lk;
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
   d608a:	e70f      	b.n	d5eac <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x30>
    }
    return SYSTEM_ERROR_NONE;
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
    WiringBleLock lk;
   d608c:	a805      	add	r0, sp, #20
   d608e:	f7fe ffeb 	bl	d5068 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   d6092:	4640      	mov	r0, r8
   d6094:	b01f      	add	sp, #124	; 0x7c
   d6096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d609a:	bf00      	nop
   d609c:	000d9371 	.word	0x000d9371
   d60a0:	000d91ec 	.word	0x000d91ec
   d60a4:	2003e38c 	.word	0x2003e38c
   d60a8:	000d55fd 	.word	0x000d55fd
   d60ac:	000d934a 	.word	0x000d934a
   d60b0:	000d91fc 	.word	0x000d91fc

000d60b4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d60b4:	4802      	ldr	r0, [pc, #8]	; (d60c0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d60b6:	2300      	movs	r3, #0
   d60b8:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d60ba:	f7fe bd0f 	b.w	d4adc <os_mutex_recursive_create>
   d60be:	bf00      	nop
   d60c0:	2003e390 	.word	0x2003e390

000d60c4 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d60c4:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d60c6:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d60c8:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d60ca:	b113      	cbz	r3, d60d2 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d60cc:	2203      	movs	r2, #3
   d60ce:	4601      	mov	r1, r0
   d60d0:	4798      	blx	r3
    }
   d60d2:	4620      	mov	r0, r4
   d60d4:	bd10      	pop	{r4, pc}

000d60d6 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d60d6:	2200      	movs	r2, #0
   d60d8:	4611      	mov	r1, r2
   d60da:	6840      	ldr	r0, [r0, #4]
   d60dc:	f7fe bf1a 	b.w	d4f14 <network_listening>

000d60e0 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d60e0:	2200      	movs	r2, #0
   d60e2:	4611      	mov	r1, r2
   d60e4:	6840      	ldr	r0, [r0, #4]
   d60e6:	f7fe bf25 	b.w	d4f34 <network_get_listen_timeout>

000d60ea <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d60ea:	2200      	movs	r2, #0
   d60ec:	6840      	ldr	r0, [r0, #4]
   d60ee:	f7fe bf19 	b.w	d4f24 <network_set_listen_timeout>

000d60f2 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d60f2:	2200      	movs	r2, #0
   d60f4:	f081 0101 	eor.w	r1, r1, #1
   d60f8:	6840      	ldr	r0, [r0, #4]
   d60fa:	f7fe bf03 	b.w	d4f04 <network_listen>

000d60fe <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d60fe:	2300      	movs	r3, #0
   d6100:	461a      	mov	r2, r3
   d6102:	4619      	mov	r1, r3
   d6104:	6840      	ldr	r0, [r0, #4]
   d6106:	f7fe bef5 	b.w	d4ef4 <network_off>

000d610a <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d610a:	2300      	movs	r3, #0
   d610c:	461a      	mov	r2, r3
   d610e:	4619      	mov	r1, r3
   d6110:	6840      	ldr	r0, [r0, #4]
   d6112:	f7fe bee7 	b.w	d4ee4 <network_on>

000d6116 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6116:	2200      	movs	r2, #0
   d6118:	4611      	mov	r1, r2
   d611a:	6840      	ldr	r0, [r0, #4]
   d611c:	f7fe beda 	b.w	d4ed4 <network_ready>

000d6120 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6120:	2200      	movs	r2, #0
   d6122:	4611      	mov	r1, r2
   d6124:	6840      	ldr	r0, [r0, #4]
   d6126:	f7fe bec5 	b.w	d4eb4 <network_connecting>

000d612a <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d612a:	2200      	movs	r2, #0
   d612c:	2102      	movs	r1, #2
   d612e:	6840      	ldr	r0, [r0, #4]
   d6130:	f7fe bec8 	b.w	d4ec4 <network_disconnect>

000d6134 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6134:	2300      	movs	r3, #0
   d6136:	461a      	mov	r2, r3
   d6138:	6840      	ldr	r0, [r0, #4]
   d613a:	f7fe beb3 	b.w	d4ea4 <network_connect>
	...

000d6140 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d6140:	4b02      	ldr	r3, [pc, #8]	; (d614c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d6142:	2203      	movs	r2, #3
   d6144:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d6146:	4a02      	ldr	r2, [pc, #8]	; (d6150 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d6148:	601a      	str	r2, [r3, #0]
   d614a:	4770      	bx	lr
   d614c:	2003e394 	.word	0x2003e394
   d6150:	000d93a4 	.word	0x000d93a4

000d6154 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d6154:	4770      	bx	lr

000d6156 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d6156:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6158:	4606      	mov	r6, r0
   d615a:	4615      	mov	r5, r2
   d615c:	460c      	mov	r4, r1
   d615e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6160:	42bc      	cmp	r4, r7
   d6162:	d006      	beq.n	d6172 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d6164:	6833      	ldr	r3, [r6, #0]
   d6166:	f814 1b01 	ldrb.w	r1, [r4], #1
   d616a:	689b      	ldr	r3, [r3, #8]
   d616c:	4630      	mov	r0, r6
   d616e:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6170:	e7f6      	b.n	d6160 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d6172:	4628      	mov	r0, r5
   d6174:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6176 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d6176:	2200      	movs	r2, #0
   d6178:	7c00      	ldrb	r0, [r0, #16]
   d617a:	f7fe bcf7 	b.w	d4b6c <HAL_I2C_Write_Data>

000d617e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d617e:	2100      	movs	r1, #0
   d6180:	7c00      	ldrb	r0, [r0, #16]
   d6182:	f7fe bcfb 	b.w	d4b7c <HAL_I2C_Available_Data>

000d6186 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d6186:	2100      	movs	r1, #0
   d6188:	7c00      	ldrb	r0, [r0, #16]
   d618a:	f7fe bcff 	b.w	d4b8c <HAL_I2C_Read_Data>

000d618e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d618e:	2100      	movs	r1, #0
   d6190:	7c00      	ldrb	r0, [r0, #16]
   d6192:	f7fe bd03 	b.w	d4b9c <HAL_I2C_Peek_Data>

000d6196 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d6196:	2100      	movs	r1, #0
   d6198:	7c00      	ldrb	r0, [r0, #16]
   d619a:	f7fe bd07 	b.w	d4bac <HAL_I2C_Flush_Data>

000d619e <_ZN7TwoWireD0Ev>:
   d619e:	b510      	push	{r4, lr}
   d61a0:	2114      	movs	r1, #20
   d61a2:	4604      	mov	r4, r0
   d61a4:	f001 ffc9 	bl	d813a <_ZdlPvj>
   d61a8:	4620      	mov	r0, r4
   d61aa:	bd10      	pop	{r4, pc}

000d61ac <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d61ac:	b510      	push	{r4, lr}
   d61ae:	4604      	mov	r4, r0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d61b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d61b4:	4608      	mov	r0, r1
   d61b6:	60a3      	str	r3, [r4, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d61b8:	2100      	movs	r1, #0
   d61ba:	4b04      	ldr	r3, [pc, #16]	; (d61cc <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d61bc:	7420      	strb	r0, [r4, #16]
   d61be:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d61c0:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d61c2:	f7fe fd03 	bl	d4bcc <HAL_I2C_Init>

}
   d61c6:	4620      	mov	r0, r4
   d61c8:	bd10      	pop	{r4, pc}
   d61ca:	bf00      	nop
   d61cc:	000d93d8 	.word	0x000d93d8

000d61d0 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d61d0:	2100      	movs	r1, #0
   d61d2:	7c00      	ldrb	r0, [r0, #16]
   d61d4:	f7fe bcf2 	b.w	d4bbc <HAL_I2C_Is_Enabled>

000d61d8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d61d8:	4770      	bx	lr

000d61da <_ZN9IPAddressD0Ev>:
   d61da:	b510      	push	{r4, lr}
   d61dc:	2118      	movs	r1, #24
   d61de:	4604      	mov	r4, r0
   d61e0:	f001 ffab 	bl	d813a <_ZdlPvj>
   d61e4:	4620      	mov	r0, r4
   d61e6:	bd10      	pop	{r4, pc}

000d61e8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d61e8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d61ea:	7d03      	ldrb	r3, [r0, #20]
   d61ec:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d61ee:	b08d      	sub	sp, #52	; 0x34
   d61f0:	460e      	mov	r6, r1
   d61f2:	f100 0704 	add.w	r7, r0, #4
   d61f6:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d61fa:	d002      	beq.n	d6202 <_ZNK9IPAddress7printToER5Print+0x1a>
   d61fc:	f100 0508 	add.w	r5, r0, #8
   d6200:	e018      	b.n	d6234 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d6202:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6204:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d6206:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d620a:	232f      	movs	r3, #47	; 0x2f
   d620c:	462a      	mov	r2, r5
   d620e:	200a      	movs	r0, #10
   d6210:	f7fe fce4 	bl	d4bdc <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6214:	4628      	mov	r0, r5
   d6216:	f002 fdfd 	bl	d8e14 <strlen>
   d621a:	6833      	ldr	r3, [r6, #0]
   d621c:	4602      	mov	r2, r0
   d621e:	68db      	ldr	r3, [r3, #12]
   d6220:	4629      	mov	r1, r5
   d6222:	4630      	mov	r0, r6
   d6224:	4798      	blx	r3
   d6226:	e00f      	b.n	d6248 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d6228:	b124      	cbz	r4, d6234 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d622a:	212e      	movs	r1, #46	; 0x2e
   d622c:	4630      	mov	r0, r6
   d622e:	f001 fb3d 	bl	d78ac <_ZN5Print5printEc>
   d6232:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d6234:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d6238:	220a      	movs	r2, #10
   d623a:	4630      	mov	r0, r6
   d623c:	f001 fb72 	bl	d7924 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6240:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6242:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6244:	d1f0      	bne.n	d6228 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6246:	4620      	mov	r0, r4
    }
    return n;
}
   d6248:	b00d      	add	sp, #52	; 0x34
   d624a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d624c <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d624c:	b510      	push	{r4, lr}
   d624e:	4b05      	ldr	r3, [pc, #20]	; (d6264 <_ZN9IPAddressC1Ev+0x18>)
   d6250:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d6252:	2211      	movs	r2, #17
   d6254:	f840 3b04 	str.w	r3, [r0], #4
   d6258:	2100      	movs	r1, #0
   d625a:	f002 fd4e 	bl	d8cfa <memset>
{
    clear();
}
   d625e:	4620      	mov	r0, r4
   d6260:	bd10      	pop	{r4, pc}
   d6262:	bf00      	nop
   d6264:	000d9400 	.word	0x000d9400

000d6268 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d6268:	4603      	mov	r3, r0
   d626a:	4a07      	ldr	r2, [pc, #28]	; (d6288 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d626c:	b510      	push	{r4, lr}
   d626e:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d6272:	f101 0210 	add.w	r2, r1, #16
   d6276:	f851 4b04 	ldr.w	r4, [r1], #4
   d627a:	f843 4b04 	str.w	r4, [r3], #4
   d627e:	4291      	cmp	r1, r2
   d6280:	d1f9      	bne.n	d6276 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d6282:	780a      	ldrb	r2, [r1, #0]
   d6284:	701a      	strb	r2, [r3, #0]
}
   d6286:	bd10      	pop	{r4, pc}
   d6288:	000d9400 	.word	0x000d9400

000d628c <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d628c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d628e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d6292:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d6296:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d629a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d629e:	2304      	movs	r3, #4
   d62a0:	6041      	str	r1, [r0, #4]
   d62a2:	7503      	strb	r3, [r0, #20]
   d62a4:	bd10      	pop	{r4, pc}

000d62a6 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d62a6:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d62a8:	780d      	ldrb	r5, [r1, #0]
   d62aa:	788b      	ldrb	r3, [r1, #2]
   d62ac:	784a      	ldrb	r2, [r1, #1]
   d62ae:	78c9      	ldrb	r1, [r1, #3]
   d62b0:	9100      	str	r1, [sp, #0]
   d62b2:	4629      	mov	r1, r5
   d62b4:	f7ff ffea 	bl	d628c <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d62b8:	b003      	add	sp, #12
   d62ba:	bd30      	pop	{r4, r5, pc}

000d62bc <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:
#include <cstdarg>

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
   d62bc:	f100 0210 	add.w	r2, r0, #16
    size_t n = 1;
   d62c0:	2301      	movs	r3, #1
    do {
        if (t->type == JSMN_OBJECT) {
   d62c2:	f812 1c10 	ldrb.w	r1, [r2, #-16]
   d62c6:	2901      	cmp	r1, #1
   d62c8:	4610      	mov	r0, r2
   d62ca:	d104      	bne.n	d62d6 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x1a>
            n += t->size * 2; // Number of name and value tokens
   d62cc:	f852 1c04 	ldr.w	r1, [r2, #-4]
   d62d0:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   d62d4:	e004      	b.n	d62e0 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x24>
        } else if (t->type == JSMN_ARRAY) {
   d62d6:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   d62d8:	bf04      	itt	eq
   d62da:	f852 1c04 	ldreq.w	r1, [r2, #-4]
   d62de:	185b      	addeq	r3, r3, r1
namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
    do {
   d62e0:	3b01      	subs	r3, #1
   d62e2:	f102 0210 	add.w	r2, r2, #16
   d62e6:	d1ec      	bne.n	d62c2 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
        }
        ++t;
        --n;
    } while (n);
    return t;
}
   d62e8:	4770      	bx	lr

000d62ea <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   d62ea:	b40e      	push	{r1, r2, r3}
   d62ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d62f0:	b087      	sub	sp, #28
   d62f2:	af00      	add	r7, sp, #0
   d62f4:	f107 0434 	add.w	r4, r7, #52	; 0x34
   d62f8:	4605      	mov	r5, r0
   d62fa:	f854 6b04 	ldr.w	r6, [r4], #4
    char buf[16];
    va_list args;
    va_start(args, fmt);
   d62fe:	607c      	str	r4, [r7, #4]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d6300:	4623      	mov	r3, r4
   d6302:	4632      	mov	r2, r6
   d6304:	2110      	movs	r1, #16
   d6306:	f107 0008 	add.w	r0, r7, #8
   d630a:	f7fe fe33 	bl	d4f74 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   d630e:	280f      	cmp	r0, #15
   d6310:	d916      	bls.n	d6340 <_ZN5spark10JSONWriter6printfEPKcz+0x56>
        char buf[n + 1]; // Use larger buffer
   d6312:	f100 0308 	add.w	r3, r0, #8
   d6316:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   d631a:	46e8      	mov	r8, sp
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
        char buf[n + 1]; // Use larger buffer
   d631c:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d6320:	4632      	mov	r2, r6
   d6322:	1c41      	adds	r1, r0, #1
   d6324:	4623      	mov	r3, r4
   d6326:	4668      	mov	r0, sp
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
        char buf[n + 1]; // Use larger buffer
        va_start(args, fmt);
   d6328:	607c      	str	r4, [r7, #4]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d632a:	f7fe fe23 	bl	d4f74 <vsnprintf>
        va_end(args);
        if (n > 0) {
   d632e:	1e02      	subs	r2, r0, #0
   d6330:	dd04      	ble.n	d633c <_ZN5spark10JSONWriter6printfEPKcz+0x52>
            write(buf, n);
   d6332:	682b      	ldr	r3, [r5, #0]
   d6334:	4669      	mov	r1, sp
   d6336:	689b      	ldr	r3, [r3, #8]
   d6338:	4628      	mov	r0, r5
   d633a:	4798      	blx	r3
   d633c:	46c5      	mov	sp, r8
   d633e:	e007      	b.n	d6350 <_ZN5spark10JSONWriter6printfEPKcz+0x66>
        }
    } else if (n > 0) {
   d6340:	b130      	cbz	r0, d6350 <_ZN5spark10JSONWriter6printfEPKcz+0x66>
        write(buf, n);
   d6342:	682b      	ldr	r3, [r5, #0]
   d6344:	4602      	mov	r2, r0
   d6346:	689b      	ldr	r3, [r3, #8]
   d6348:	f107 0108 	add.w	r1, r7, #8
   d634c:	4628      	mov	r0, r5
   d634e:	4798      	blx	r3
    }
}
   d6350:	371c      	adds	r7, #28
   d6352:	46bd      	mov	sp, r7
   d6354:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d6358:	b003      	add	sp, #12
   d635a:	4770      	bx	lr

000d635c <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d635c:	b513      	push	{r0, r1, r4, lr}
   d635e:	ab02      	add	r3, sp, #8
    write(&c, 1);
   d6360:	6802      	ldr	r2, [r0, #0]

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d6362:	f803 1d01 	strb.w	r1, [r3, #-1]!
    write(&c, 1);
   d6366:	6894      	ldr	r4, [r2, #8]
   d6368:	4619      	mov	r1, r3
   d636a:	2201      	movs	r2, #1
   d636c:	47a0      	blx	r4
}
   d636e:	b002      	add	sp, #8
   d6370:	bd10      	pop	{r4, pc}

000d6372 <_ZNK5spark9JSONValue4typeEv>:
        return 0.0;
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
   d6372:	6883      	ldr	r3, [r0, #8]
   d6374:	b1fb      	cbz	r3, d63b6 <_ZNK5spark9JSONValue4typeEv+0x44>
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
   d6376:	781a      	ldrb	r2, [r3, #0]
   d6378:	2a03      	cmp	r2, #3
   d637a:	d81a      	bhi.n	d63b2 <_ZNK5spark9JSONValue4typeEv+0x40>
   d637c:	e8df f002 	tbb	[pc, r2]
   d6380:	1d021704 	.word	0x1d021704
        return JSON_TYPE_INVALID;
    }
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
   d6384:	2005      	movs	r0, #5
   d6386:	4770      	bx	lr
    if (!t_) {
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
   d6388:	6802      	ldr	r2, [r0, #0]
   d638a:	685b      	ldr	r3, [r3, #4]
   d638c:	6852      	ldr	r2, [r2, #4]
   d638e:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   d6390:	282d      	cmp	r0, #45	; 0x2d
   d6392:	d014      	beq.n	d63be <_ZNK5spark9JSONValue4typeEv+0x4c>
   d6394:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d6398:	2b09      	cmp	r3, #9
   d639a:	d910      	bls.n	d63be <_ZNK5spark9JSONValue4typeEv+0x4c>
            return JSON_TYPE_NUMBER;
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   d639c:	2874      	cmp	r0, #116	; 0x74
   d639e:	d010      	beq.n	d63c2 <_ZNK5spark9JSONValue4typeEv+0x50>
   d63a0:	2866      	cmp	r0, #102	; 0x66
   d63a2:	d00e      	beq.n	d63c2 <_ZNK5spark9JSONValue4typeEv+0x50>
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
        return JSON_TYPE_INVALID;
   d63a4:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   d63a8:	4258      	negs	r0, r3
   d63aa:	4158      	adcs	r0, r3
   d63ac:	4770      	bx	lr
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
   d63ae:	2006      	movs	r0, #6
   d63b0:	4770      	bx	lr
    default:
        return JSON_TYPE_INVALID;
   d63b2:	2000      	movs	r0, #0
   d63b4:	4770      	bx	lr
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
        return JSON_TYPE_INVALID;
   d63b6:	4618      	mov	r0, r3
   d63b8:	4770      	bx	lr
            return JSON_TYPE_NULL;
        }
        return JSON_TYPE_INVALID;
    }
    case JSMN_STRING:
        return JSON_TYPE_STRING;
   d63ba:	2004      	movs	r0, #4
   d63bc:	4770      	bx	lr
    }
    switch (t_->type) {
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
        if (c == '-' || (c >= '0' && c <= '9')) {
            return JSON_TYPE_NUMBER;
   d63be:	2003      	movs	r0, #3
   d63c0:	4770      	bx	lr
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
            return JSON_TYPE_BOOL;
   d63c2:	2002      	movs	r0, #2
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
    default:
        return JSON_TYPE_INVALID;
    }
}
   d63c4:	4770      	bx	lr

000d63c6 <_ZNK5spark9JSONValue5toIntEv>:
    default:
        return false;
    }
}

int spark::JSONValue::toInt() const {
   d63c6:	b510      	push	{r4, lr}
   d63c8:	4604      	mov	r4, r0
    switch (type()) {
   d63ca:	f7ff ffd2 	bl	d6372 <_ZNK5spark9JSONValue4typeEv>
   d63ce:	2802      	cmp	r0, #2
   d63d0:	d00d      	beq.n	d63ee <_ZNK5spark9JSONValue5toIntEv+0x28>
   d63d2:	d316      	bcc.n	d6402 <_ZNK5spark9JSONValue5toIntEv+0x3c>
   d63d4:	2804      	cmp	r0, #4
   d63d6:	d814      	bhi.n	d6402 <_ZNK5spark9JSONValue5toIntEv+0x3c>
    }
    case JSON_TYPE_NUMBER:
    case JSON_TYPE_STRING: {
        // toInt() may produce incorrect results for floating point numbers, since we want to keep
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
   d63d8:	6822      	ldr	r2, [r4, #0]
   d63da:	68a3      	ldr	r3, [r4, #8]
        return strtol(s, nullptr, 10);
   d63dc:	6850      	ldr	r0, [r2, #4]
   d63de:	685b      	ldr	r3, [r3, #4]
   d63e0:	220a      	movs	r2, #10
   d63e2:	2100      	movs	r1, #0
   d63e4:	4418      	add	r0, r3
    }
    default:
        return 0;
    }
}
   d63e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    case JSON_TYPE_NUMBER:
    case JSON_TYPE_STRING: {
        // toInt() may produce incorrect results for floating point numbers, since we want to keep
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
        return strtol(s, nullptr, 10);
   d63ea:	f002 bdd5 	b.w	d8f98 <strtol>
}

int spark::JSONValue::toInt() const {
    switch (type()) {
    case JSON_TYPE_BOOL: {
        const char* const s = d_->json + t_->start;
   d63ee:	6822      	ldr	r2, [r4, #0]
   d63f0:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   d63f2:	6852      	ldr	r2, [r2, #4]
   d63f4:	685b      	ldr	r3, [r3, #4]
   d63f6:	5cd0      	ldrb	r0, [r2, r3]
   d63f8:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   d63fc:	4258      	negs	r0, r3
   d63fe:	4158      	adcs	r0, r3
   d6400:	bd10      	pop	{r4, pc}
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
        return strtol(s, nullptr, 10);
    }
    default:
        return 0;
   d6402:	2000      	movs	r0, #0
    }
}
   d6404:	bd10      	pop	{r4, pc}

000d6406 <_ZN5spark18JSONObjectIterator4nextEv>:
        n_ = t->size; // Number of properties
        d_ = d;
    }
}

bool spark::JSONObjectIterator::next() {
   d6406:	b510      	push	{r4, lr}
    if (!n_) {
   d6408:	6943      	ldr	r3, [r0, #20]
        n_ = t->size; // Number of properties
        d_ = d;
    }
}

bool spark::JSONObjectIterator::next() {
   d640a:	4604      	mov	r4, r0
    if (!n_) {
   d640c:	b15b      	cbz	r3, d6426 <_ZN5spark18JSONObjectIterator4nextEv+0x20>
        return false;
    }
    k_ = t_; // Name
   d640e:	6880      	ldr	r0, [r0, #8]
   d6410:	60e0      	str	r0, [r4, #12]
    ++t_;
    v_ = t_; // Value
    --n_;
   d6412:	3b01      	subs	r3, #1
bool spark::JSONObjectIterator::next() {
    if (!n_) {
        return false;
    }
    k_ = t_; // Name
    ++t_;
   d6414:	3010      	adds	r0, #16
   d6416:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   d6418:	6120      	str	r0, [r4, #16]
    --n_;
   d641a:	6163      	str	r3, [r4, #20]
    if (n_) {
   d641c:	b12b      	cbz	r3, d642a <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        t_ = skipToken(t_);
   d641e:	f7ff ff4d 	bl	d62bc <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   d6422:	60a0      	str	r0, [r4, #8]
   d6424:	e001      	b.n	d642a <_ZN5spark18JSONObjectIterator4nextEv+0x24>
    }
}

bool spark::JSONObjectIterator::next() {
    if (!n_) {
        return false;
   d6426:	4618      	mov	r0, r3
   d6428:	bd10      	pop	{r4, pc}
    v_ = t_; // Value
    --n_;
    if (n_) {
        t_ = skipToken(t_);
    }
    return true;
   d642a:	2001      	movs	r0, #1
}
   d642c:	bd10      	pop	{r4, pc}

000d642e <_ZN5spark10JSONWriter9endObjectEv>:
    write('{');
    state_ = BEGIN;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::endObject() {
   d642e:	b510      	push	{r4, lr}
    write('}');
   d6430:	217d      	movs	r1, #125	; 0x7d
    write('{');
    state_ = BEGIN;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::endObject() {
   d6432:	4604      	mov	r4, r0
    write('}');
   d6434:	f7ff ff92 	bl	d635c <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   d6438:	2301      	movs	r3, #1
   d643a:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d643c:	4620      	mov	r0, r4
   d643e:	bd10      	pop	{r4, pc}

000d6440 <_ZN5spark10JSONWriter14writeSeparatorEv>:
    } else if (n > 0) {
        write(buf, n);
    }
}

void spark::JSONWriter::writeSeparator() {
   d6440:	b508      	push	{r3, lr}
    switch (state_) {
   d6442:	7903      	ldrb	r3, [r0, #4]
   d6444:	2b01      	cmp	r3, #1
   d6446:	d002      	beq.n	d644e <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   d6448:	2b02      	cmp	r3, #2
   d644a:	d002      	beq.n	d6452 <_ZN5spark10JSONWriter14writeSeparatorEv+0x12>
   d644c:	bd08      	pop	{r3, pc}
    case NEXT:
        write(',');
   d644e:	212c      	movs	r1, #44	; 0x2c
   d6450:	e000      	b.n	d6454 <_ZN5spark10JSONWriter14writeSeparatorEv+0x14>
        break;
    case VALUE:
        write(':');
   d6452:	213a      	movs	r1, #58	; 0x3a
   d6454:	f7ff ff82 	bl	d635c <_ZN5spark10JSONWriter5writeEc>
   d6458:	bd08      	pop	{r3, pc}

000d645a <_ZN5spark10JSONWriter11beginObjectEv>:
    write(']');
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::beginObject() {
   d645a:	b510      	push	{r4, lr}
   d645c:	4604      	mov	r4, r0
    writeSeparator();
   d645e:	f7ff ffef 	bl	d6440 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   d6462:	4620      	mov	r0, r4
   d6464:	217b      	movs	r1, #123	; 0x7b
   d6466:	f7ff ff79 	bl	d635c <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   d646a:	2300      	movs	r3, #0
   d646c:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d646e:	4620      	mov	r0, r4
   d6470:	bd10      	pop	{r4, pc}
	...

000d6474 <_ZN5spark10JSONWriter5valueEi>:
    }
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::value(int val) {
   d6474:	b538      	push	{r3, r4, r5, lr}
   d6476:	4604      	mov	r4, r0
   d6478:	460d      	mov	r5, r1
    writeSeparator();
   d647a:	f7ff ffe1 	bl	d6440 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   d647e:	6823      	ldr	r3, [r4, #0]
   d6480:	4904      	ldr	r1, [pc, #16]	; (d6494 <_ZN5spark10JSONWriter5valueEi+0x20>)
   d6482:	68db      	ldr	r3, [r3, #12]
   d6484:	4620      	mov	r0, r4
   d6486:	462a      	mov	r2, r5
   d6488:	4798      	blx	r3
    state_ = NEXT;
   d648a:	2301      	movs	r3, #1
   d648c:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d648e:	4620      	mov	r0, r4
   d6490:	bd38      	pop	{r3, r4, r5, pc}
   d6492:	bf00      	nop
   d6494:	000d941b 	.word	0x000d941b

000d6498 <_ZN5spark10JSONWriter5valueEj>:

spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   d6498:	b538      	push	{r3, r4, r5, lr}
   d649a:	4604      	mov	r4, r0
   d649c:	460d      	mov	r5, r1
    writeSeparator();
   d649e:	f7ff ffcf 	bl	d6440 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   d64a2:	6823      	ldr	r3, [r4, #0]
   d64a4:	4904      	ldr	r1, [pc, #16]	; (d64b8 <_ZN5spark10JSONWriter5valueEj+0x20>)
   d64a6:	68db      	ldr	r3, [r3, #12]
   d64a8:	4620      	mov	r0, r4
   d64aa:	462a      	mov	r2, r5
   d64ac:	4798      	blx	r3
    state_ = NEXT;
   d64ae:	2301      	movs	r3, #1
   d64b0:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d64b2:	4620      	mov	r0, r4
   d64b4:	bd38      	pop	{r3, r4, r5, pc}
   d64b6:	bf00      	nop
   d64b8:	000d9063 	.word	0x000d9063

000d64bc <_ZN5spark10JSONWriter12writeEscapedEPKcj>:
    default:
        break;
    }
}

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d64bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d64be:	460d      	mov	r5, r1
   d64c0:	4617      	mov	r7, r2
    write('"');
   d64c2:	2122      	movs	r1, #34	; 0x22
    default:
        break;
    }
}

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d64c4:	4604      	mov	r4, r0
   d64c6:	442f      	add	r7, r5
    write('"');
   d64c8:	f7ff ff48 	bl	d635c <_ZN5spark10JSONWriter5writeEc>
   d64cc:	462a      	mov	r2, r5
    const char* const end = str + size;
   d64ce:	4629      	mov	r1, r5
    const char *s = str;
    while (s != end) {
   d64d0:	42ba      	cmp	r2, r7
   d64d2:	d038      	beq.n	d6546 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8a>
        const char c = *s;
   d64d4:	4616      	mov	r6, r2
   d64d6:	f816 5b01 	ldrb.w	r5, [r6], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
   d64da:	2d22      	cmp	r5, #34	; 0x22
   d64dc:	d003      	beq.n	d64e6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2a>
   d64de:	2d5c      	cmp	r5, #92	; 0x5c
   d64e0:	d001      	beq.n	d64e6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2a>
   d64e2:	2d1f      	cmp	r5, #31
   d64e4:	d82d      	bhi.n	d6542 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x86>
            write(str, s - str); // Write preceeding characters
   d64e6:	6823      	ldr	r3, [r4, #0]
   d64e8:	1a52      	subs	r2, r2, r1
   d64ea:	689b      	ldr	r3, [r3, #8]
   d64ec:	4620      	mov	r0, r4
   d64ee:	4798      	blx	r3
            write('\\');
   d64f0:	215c      	movs	r1, #92	; 0x5c
   d64f2:	4620      	mov	r0, r4
   d64f4:	f7ff ff32 	bl	d635c <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   d64f8:	2d0c      	cmp	r5, #12
   d64fa:	d019      	beq.n	d6530 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
   d64fc:	d807      	bhi.n	d650e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x52>
   d64fe:	2d09      	cmp	r5, #9
   d6500:	d00f      	beq.n	d6522 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x66>
   d6502:	2d0a      	cmp	r5, #10
   d6504:	d012      	beq.n	d652c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x70>
   d6506:	2d08      	cmp	r5, #8
   d6508:	d114      	bne.n	d6534 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x78>
            case '"':
            case '\\':
                write(c);
                break;
            case 0x08: // Backspace
                write('b');
   d650a:	2162      	movs	r1, #98	; 0x62
   d650c:	e00a      	b.n	d6524 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
    while (s != end) {
        const char c = *s;
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
            write(str, s - str); // Write preceeding characters
            write('\\');
            switch (c) {
   d650e:	2d22      	cmp	r5, #34	; 0x22
   d6510:	d005      	beq.n	d651e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d6512:	2d5c      	cmp	r5, #92	; 0x5c
   d6514:	d003      	beq.n	d651e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d6516:	2d0d      	cmp	r5, #13
   d6518:	d10c      	bne.n	d6534 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x78>
                break;
            case 0x0c: // Form feed
                write('f');
                break;
            case 0x0d: // Carriage return
                write('r');
   d651a:	2172      	movs	r1, #114	; 0x72
   d651c:	e002      	b.n	d6524 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
            write(str, s - str); // Write preceeding characters
            write('\\');
            switch (c) {
            case '"':
            case '\\':
                write(c);
   d651e:	4629      	mov	r1, r5
   d6520:	e000      	b.n	d6524 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
                break;
            case 0x08: // Backspace
                write('b');
                break;
            case 0x09: // Tab
                write('t');
   d6522:	2174      	movs	r1, #116	; 0x74
            case '"':
            case '\\':
                write(c);
                break;
            case 0x08: // Backspace
                write('b');
   d6524:	4620      	mov	r0, r4
   d6526:	f7ff ff19 	bl	d635c <_ZN5spark10JSONWriter5writeEc>
                break;
   d652a:	e009      	b.n	d6540 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x84>
            case 0x09: // Tab
                write('t');
                break;
            case 0x0a: // Line feed
                write('n');
   d652c:	216e      	movs	r1, #110	; 0x6e
   d652e:	e7f9      	b.n	d6524 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
                break;
            case 0x0c: // Form feed
                write('f');
   d6530:	2166      	movs	r1, #102	; 0x66
   d6532:	e7f7      	b.n	d6524 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   d6534:	6823      	ldr	r3, [r4, #0]
   d6536:	490a      	ldr	r1, [pc, #40]	; (d6560 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xa4>)
   d6538:	68db      	ldr	r3, [r3, #12]
   d653a:	462a      	mov	r2, r5
   d653c:	4620      	mov	r0, r4
   d653e:	4798      	blx	r3
                break;
            }
            str = s + 1;
   d6540:	4631      	mov	r1, r6

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
    write('"');
    const char* const end = str + size;
    const char *s = str;
    while (s != end) {
   d6542:	4632      	mov	r2, r6
   d6544:	e7c4      	b.n	d64d0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x14>
            }
            str = s + 1;
        }
        ++s;
    }
    if (s != str) {
   d6546:	4291      	cmp	r1, r2
   d6548:	d004      	beq.n	d6554 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x98>
        write(str, s - str); // Write remaining characters
   d654a:	6823      	ldr	r3, [r4, #0]
   d654c:	1a52      	subs	r2, r2, r1
   d654e:	689d      	ldr	r5, [r3, #8]
   d6550:	4620      	mov	r0, r4
   d6552:	47a8      	blx	r5
    }
    write('"');
   d6554:	2122      	movs	r1, #34	; 0x22
   d6556:	4620      	mov	r0, r4
   d6558:	f7ff ff00 	bl	d635c <_ZN5spark10JSONWriter5writeEc>
   d655c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d655e:	bf00      	nop
   d6560:	000d9426 	.word	0x000d9426

000d6564 <_ZN5spark10JSONWriter4nameEPKcj>:
    write('}');
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   d6564:	b570      	push	{r4, r5, r6, lr}
   d6566:	4604      	mov	r4, r0
   d6568:	460d      	mov	r5, r1
   d656a:	4616      	mov	r6, r2
    writeSeparator();
   d656c:	f7ff ff68 	bl	d6440 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   d6570:	4620      	mov	r0, r4
   d6572:	4632      	mov	r2, r6
   d6574:	4629      	mov	r1, r5
   d6576:	f7ff ffa1 	bl	d64bc <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   d657a:	2302      	movs	r3, #2
   d657c:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d657e:	4620      	mov	r0, r4
   d6580:	bd70      	pop	{r4, r5, r6, pc}

000d6582 <_ZN5spark10JSONWriter5valueEPKcj>:
    printf("%g", val);
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   d6582:	b570      	push	{r4, r5, r6, lr}
   d6584:	4604      	mov	r4, r0
   d6586:	460d      	mov	r5, r1
   d6588:	4616      	mov	r6, r2
    writeSeparator();
   d658a:	f7ff ff59 	bl	d6440 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   d658e:	4620      	mov	r0, r4
   d6590:	4632      	mov	r2, r6
   d6592:	4629      	mov	r1, r5
   d6594:	f7ff ff92 	bl	d64bc <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   d6598:	2301      	movs	r3, #1
   d659a:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d659c:	4620      	mov	r0, r4
   d659e:	bd70      	pop	{r4, r5, r6, pc}

000d65a0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
    t->end = str - json; // Update string length
    return true;
}

// spark::JSONString
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   d65a0:	b510      	push	{r4, lr}

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d65a2:	2300      	movs	r3, #0
   d65a4:	4604      	mov	r4, r0
   d65a6:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d65a8:	6043      	str	r3, [r0, #4]
}

// spark::JSONString
inline spark::JSONString::JSONString() :
        s_(""),
        n_(0) {
   d65aa:	4810      	ldr	r0, [pc, #64]	; (d65ec <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x4c>)
   d65ac:	60a0      	str	r0, [r4, #8]
   d65ae:	60e3      	str	r3, [r4, #12]
        JSONString() {
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   d65b0:	b1d1      	cbz	r1, d65e8 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x48>
   d65b2:	780b      	ldrb	r3, [r1, #0]
   d65b4:	2b03      	cmp	r3, #3
   d65b6:	d006      	beq.n	d65c6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   d65b8:	b9b3      	cbnz	r3, d65e8 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x48>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   d65ba:	6813      	ldr	r3, [r2, #0]
   d65bc:	6858      	ldr	r0, [r3, #4]
   d65be:	684b      	ldr	r3, [r1, #4]
   d65c0:	5cc3      	ldrb	r3, [r0, r3]
   d65c2:	2b6e      	cmp	r3, #110	; 0x6e
   d65c4:	d008      	beq.n	d65d8 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x38>
            s_ = d->json + t->start;
   d65c6:	6813      	ldr	r3, [r2, #0]
   d65c8:	6858      	ldr	r0, [r3, #4]
   d65ca:	684b      	ldr	r3, [r1, #4]
   d65cc:	4403      	add	r3, r0
   d65ce:	60a3      	str	r3, [r4, #8]
            n_ = t->end - t->start;
   d65d0:	688b      	ldr	r3, [r1, #8]
   d65d2:	6849      	ldr	r1, [r1, #4]
   d65d4:	1a5b      	subs	r3, r3, r1
   d65d6:	60e3      	str	r3, [r4, #12]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d65d8:	4611      	mov	r1, r2
   d65da:	4620      	mov	r0, r4
   d65dc:	f851 3b04 	ldr.w	r3, [r1], #4
   d65e0:	f840 3b04 	str.w	r3, [r0], #4
   d65e4:	f7ff f93a 	bl	d585c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        }
        d_ = d;
    }
}
   d65e8:	4620      	mov	r0, r4
   d65ea:	bd10      	pop	{r4, pc}
   d65ec:	000d9518 	.word	0x000d9518

000d65f0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d65f0:	2300      	movs	r3, #0
bool spark::JSONString::operator==(const JSONString &str) const {
    return n_ == str.n_ && strncmp(s_, str.s_, n_) == 0;
}

// spark::JSONObjectIterator
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   d65f2:	b510      	push	{r4, lr}
   d65f4:	4604      	mov	r4, r0
   d65f6:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d65f8:	6043      	str	r3, [r0, #4]
// spark::JSONObjectIterator
inline spark::JSONObjectIterator::JSONObjectIterator() :
        t_(nullptr),
        k_(nullptr),
        v_(nullptr),
        n_(0) {
   d65fa:	6083      	str	r3, [r0, #8]
   d65fc:	60c3      	str	r3, [r0, #12]
   d65fe:	6103      	str	r3, [r0, #16]
   d6600:	6143      	str	r3, [r0, #20]
        JSONObjectIterator() {
    if (t && t->type == JSMN_OBJECT) {
   d6602:	b171      	cbz	r1, d6622 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x32>
   d6604:	780b      	ldrb	r3, [r1, #0]
   d6606:	2b01      	cmp	r3, #1
   d6608:	d10b      	bne.n	d6622 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x32>
        t_ = t + 1; // First property's name
   d660a:	f101 0310 	add.w	r3, r1, #16
   d660e:	6083      	str	r3, [r0, #8]
        n_ = t->size; // Number of properties
   d6610:	68cb      	ldr	r3, [r1, #12]
   d6612:	6143      	str	r3, [r0, #20]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d6614:	4611      	mov	r1, r2
   d6616:	f851 3b04 	ldr.w	r3, [r1], #4
   d661a:	f840 3b04 	str.w	r3, [r0], #4
   d661e:	f7ff f91d 	bl	d585c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        d_ = d;
    }
}
   d6622:	4620      	mov	r0, r4
   d6624:	bd10      	pop	{r4, pc}

000d6626 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d6626:	2300      	movs	r3, #0
        }
    }
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   d6628:	b510      	push	{r4, lr}
   d662a:	4604      	mov	r4, r0
   d662c:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d662e:	6043      	str	r3, [r0, #4]
        JSONValue() {
    if (t) {
        t_ = t;
   d6630:	6081      	str	r1, [r0, #8]
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
        JSONValue() {
    if (t) {
   d6632:	b131      	cbz	r1, d6642 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x1c>
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d6634:	4611      	mov	r1, r2
   d6636:	f851 3b04 	ldr.w	r3, [r1], #4
   d663a:	f840 3b04 	str.w	r3, [r0], #4
   d663e:	f7ff f90d 	bl	d585c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        t_ = t;
        d_ = d;
    }
}
   d6642:	4620      	mov	r0, r4
   d6644:	bd10      	pop	{r4, pc}

000d6646 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   d6646:	6880      	ldr	r0, [r0, #8]
   d6648:	6803      	ldr	r3, [r0, #0]
   d664a:	68db      	ldr	r3, [r3, #12]
   d664c:	4718      	bx	r3

000d664e <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
inline void spark::StreamLogHandler::printf(const char *fmt, ArgsT... args) {
    stream_->printf(fmt, args...);
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
   d664e:	4770      	bx	lr

000d6650 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   d6650:	b119      	cbz	r1, d665a <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   d6652:	680b      	ldr	r3, [r1, #0]
   d6654:	4608      	mov	r0, r1
   d6656:	685b      	ldr	r3, [r3, #4]
   d6658:	4718      	bx	r3
   d665a:	4770      	bx	lr

000d665c <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print>:
}

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   d665c:	b119      	cbz	r1, d6666 <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print+0xa>
   d665e:	680b      	ldr	r3, [r1, #0]
   d6660:	4608      	mov	r0, r1
   d6662:	685b      	ldr	r3, [r3, #4]
   d6664:	4718      	bx	r3
   d6666:	4770      	bx	lr

000d6668 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:

    virtual Print* createStream(const char *type, const JSONValue &params) = 0;
    virtual void destroyStream(Print *stream);
};

class DefaultOutputStreamFactory: public OutputStreamFactory {
   d6668:	4770      	bx	lr

000d666a <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
    virtual LogHandler* createHandler(const char *type, LogLevel level, LogCategoryFilters filters, Print *stream,
            const JSONValue &params) = 0; // TODO: Use some generic container or a buffer instead of JSONValue
    virtual void destroyHandler(LogHandler *handler);
};

class DefaultLogHandlerFactory: public LogHandlerFactory {
   d666a:	4770      	bx	lr

000d666c <_ZN5spark16JSONStreamWriterD1Ev>:
    void writeSeparator();
    void writeEscaped(const char *data, size_t size);
    void write(char c);
};

class JSONStreamWriter: public JSONWriter {
   d666c:	4770      	bx	lr

000d666e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
    return s;
}
#endif

// Iterates over subcategory names separated by '.' character
const char* nextSubcategoryName(const char* &category, size_t &size) {
   d666e:	b538      	push	{r3, r4, r5, lr}
   d6670:	4604      	mov	r4, r0
   d6672:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   d6674:	6800      	ldr	r0, [r0, #0]
   d6676:	212e      	movs	r1, #46	; 0x2e
   d6678:	f002 fbb8 	bl	d8dec <strchrnul>
    size = s - category;
   d667c:	6823      	ldr	r3, [r4, #0]
   d667e:	1ac3      	subs	r3, r0, r3
   d6680:	602b      	str	r3, [r5, #0]
    if (size) {
   d6682:	b123      	cbz	r3, d668e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   d6684:	7803      	ldrb	r3, [r0, #0]
   d6686:	b103      	cbz	r3, d668a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   d6688:	3001      	adds	r0, #1
   d668a:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d668c:	6020      	str	r0, [r4, #0]
        }
        std::swap(s, category);
        return s;
    }
    return nullptr;
   d668e:	4618      	mov	r0, r3
}
   d6690:	bd38      	pop	{r3, r4, r5, pc}

000d6692 <_ZN5spark16JSONStreamWriterD0Ev>:
   d6692:	b510      	push	{r4, lr}
   d6694:	210c      	movs	r1, #12
   d6696:	4604      	mov	r4, r0
   d6698:	f001 fd4f 	bl	d813a <_ZdlPvj>
   d669c:	4620      	mov	r0, r4
   d669e:	bd10      	pop	{r4, pc}

000d66a0 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   d66a0:	b510      	push	{r4, lr}
   d66a2:	2104      	movs	r1, #4
   d66a4:	4604      	mov	r4, r0
   d66a6:	f001 fd48 	bl	d813a <_ZdlPvj>
   d66aa:	4620      	mov	r0, r4
   d66ac:	bd10      	pop	{r4, pc}

000d66ae <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:

    virtual Print* createStream(const char *type, const JSONValue &params) = 0;
    virtual void destroyStream(Print *stream);
};

class DefaultOutputStreamFactory: public OutputStreamFactory {
   d66ae:	b510      	push	{r4, lr}
   d66b0:	2104      	movs	r1, #4
   d66b2:	4604      	mov	r4, r0
   d66b4:	f001 fd41 	bl	d813a <_ZdlPvj>
   d66b8:	4620      	mov	r0, r4
   d66ba:	bd10      	pop	{r4, pc}

000d66bc <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   d66bc:	b538      	push	{r3, r4, r5, lr}
   d66be:	460c      	mov	r4, r1
   d66c0:	4605      	mov	r5, r0
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   d66c2:	f001 fc01 	bl	d7ec8 <_Z16_fetch_usbserialv>
   d66c6:	4284      	cmp	r4, r0
   d66c8:	d00d      	beq.n	d66e6 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2a>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   d66ca:	f001 fb6f 	bl	d7dac <_Z22__fetch_global_Serial1v>
   d66ce:	4284      	cmp	r4, r0
   d66d0:	d105      	bne.n	d66de <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x22>
        Serial1.end();
   d66d2:	f001 fb6b 	bl	d7dac <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   d66d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
        Serial1.end();
   d66da:	f001 bb60 	b.w	d7d9e <_ZN11USARTSerial3endEv>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
   d66de:	4621      	mov	r1, r4
   d66e0:	4628      	mov	r0, r5
   d66e2:	f7ff ffbb 	bl	d665c <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print>
   d66e6:	bd38      	pop	{r3, r4, r5, pc}

000d66e8 <_ZNK5spark10JSONStringeqEPKc.isra.7>:

inline bool spark::JSONString::isEmpty() const {
    return !n_;
}

inline bool spark::JSONString::operator==(const char *str) const {
   d66e8:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   d66ea:	f002 fb89 	bl	d8e00 <strcmp>
}
   d66ee:	fab0 f080 	clz	r0, r0
   d66f2:	0940      	lsrs	r0, r0, #5
   d66f4:	bd08      	pop	{r3, pc}

000d66f6 <_ZN5spark10JSONWriter5valueEPKc>:

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d66f6:	b538      	push	{r3, r4, r5, lr}
   d66f8:	4605      	mov	r5, r0
    return value(val, strlen(val));
   d66fa:	4608      	mov	r0, r1

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d66fc:	460c      	mov	r4, r1
    return value(val, strlen(val));
   d66fe:	f002 fb89 	bl	d8e14 <strlen>
   d6702:	4621      	mov	r1, r4
   d6704:	4602      	mov	r2, r0
   d6706:	4628      	mov	r0, r5
}
   d6708:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
    return value(val, strlen(val));
   d670c:	f7ff bf39 	b.w	d6582 <_ZN5spark10JSONWriter5valueEPKcj>

000d6710 <_ZN14RecursiveMutex4lockEv>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d6710:	6800      	ldr	r0, [r0, #0]
   d6712:	f7fe b9eb 	b.w	d4aec <os_mutex_recursive_lock>

000d6716 <_ZN5spark16StreamLogHandler5writeEPKc>:

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
   d6716:	b570      	push	{r4, r5, r6, lr}
   d6718:	4604      	mov	r4, r0
    write(str, strlen(str));
   d671a:	4608      	mov	r0, r1

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
   d671c:	460d      	mov	r5, r1
    write(str, strlen(str));
   d671e:	f002 fb79 	bl	d8e14 <strlen>
   d6722:	6823      	ldr	r3, [r4, #0]
   d6724:	4602      	mov	r2, r0
   d6726:	4629      	mov	r1, r5
   d6728:	4620      	mov	r0, r4
   d672a:	68db      	ldr	r3, [r3, #12]
}
   d672c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
    write(str, strlen(str));
   d6730:	4718      	bx	r3

000d6732 <_ZN5spark16StreamLogHandler5writeEc>:
}

inline void spark::StreamLogHandler::write(char c) {
   d6732:	b513      	push	{r0, r1, r4, lr}
   d6734:	ab02      	add	r3, sp, #8
    write(&c, 1);
   d6736:	6802      	ldr	r2, [r0, #0]

inline void spark::StreamLogHandler::write(const char *str) {
    write(str, strlen(str));
}

inline void spark::StreamLogHandler::write(char c) {
   d6738:	f803 1d01 	strb.w	r1, [r3, #-1]!
    write(&c, 1);
   d673c:	68d4      	ldr	r4, [r2, #12]
   d673e:	4619      	mov	r1, r3
   d6740:	2201      	movs	r2, #1
   d6742:	47a0      	blx	r4
}
   d6744:	b002      	add	sp, #8
   d6746:	bd10      	pop	{r4, pc}

000d6748 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
        }
    }
    return level;
}

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d6748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d674c:	6845      	ldr	r5, [r0, #4]
   d674e:	6807      	ldr	r7, [r0, #0]
   d6750:	b085      	sub	sp, #20
   d6752:	4691      	mov	r9, r2
   d6754:	2214      	movs	r2, #20
   d6756:	4355      	muls	r5, r2
   d6758:	9301      	str	r3, [sp, #4]
   d675a:	10ab      	asrs	r3, r5, #2
   d675c:	4d19      	ldr	r5, [pc, #100]	; (d67c4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x7c>)
              random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      __i += __n;
   d675e:	9202      	str	r2, [sp, #8]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d6760:	435d      	muls	r5, r3
   d6762:	468b      	mov	fp, r1
   d6764:	463c      	mov	r4, r7
    return std::distance(nodes.begin(), std::lower_bound(nodes.begin(), nodes.end(), std::make_pair(name, size),
            [&found](const Node &node, const std::pair<const char*, size_t> &value) {
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
                if (cmp == 0) {
                    if (node.size == value.second) { // Lengths are equal
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d6766:	2301      	movs	r3, #1
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   d6768:	2d00      	cmp	r5, #0
   d676a:	9303      	str	r3, [sp, #12]
   d676c:	dd23      	ble.n	d67b6 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x6e>
              random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      __i += __n;
   d676e:	9b02      	ldr	r3, [sp, #8]
	{
	  _DistanceType __half = __len >> 1;
   d6770:	106e      	asrs	r6, r5, #1
   d6772:	fb03 f006 	mul.w	r0, r3, r6
   d6776:	eb04 0800 	add.w	r8, r4, r0

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
    // Using binary search to find existent node or suitable position for new node
    return std::distance(nodes.begin(), std::lower_bound(nodes.begin(), nodes.end(), std::make_pair(name, size),
            [&found](const Node &node, const std::pair<const char*, size_t> &value) {
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   d677a:	464a      	mov	r2, r9
   d677c:	f8b8 a004 	ldrh.w	sl, [r8, #4]
   d6780:	5820      	ldr	r0, [r4, r0]
   d6782:	45d1      	cmp	r9, sl
   d6784:	bf28      	it	cs
   d6786:	4652      	movcs	r2, sl
   d6788:	4659      	mov	r1, fp
   d678a:	f002 fb4b 	bl	d8e24 <strncmp>
                if (cmp == 0) {
   d678e:	9b03      	ldr	r3, [sp, #12]
   d6790:	b948      	cbnz	r0, d67a6 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x5e>
                    if (node.size == value.second) { // Lengths are equal
   d6792:	45d1      	cmp	r9, sl
   d6794:	d103      	bne.n	d679e <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d6796:	9a01      	ldr	r2, [sp, #4]
   d6798:	7013      	strb	r3, [r2, #0]
        }
    }
    return level;
}

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d679a:	4635      	mov	r5, r6
   d679c:	e7e4      	b.n	d6768 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x20>
                if (cmp == 0) {
                    if (node.size == value.second) { // Lengths are equal
                        found = true; // Allows caller code to avoid extra call to strncmp()
                        return false;
                    }
                    return node.size < value.second;
   d679e:	bf8c      	ite	hi
   d67a0:	2001      	movhi	r0, #1
   d67a2:	2000      	movls	r0, #0
   d67a4:	e000      	b.n	d67a8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                }
                return cmp < 0;
   d67a6:	0fc0      	lsrs	r0, r0, #31
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   d67a8:	2800      	cmp	r0, #0
   d67aa:	d0f6      	beq.n	d679a <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x52>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   d67ac:	1bae      	subs	r6, r5, r6
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
	    {
	      __first = __middle;
	      ++__first;
   d67ae:	f108 0414 	add.w	r4, r8, #20
	      __len = __len - __half - 1;
   d67b2:	3e01      	subs	r6, #1
   d67b4:	e7f1      	b.n	d679a <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x52>
            }));
   d67b6:	1be4      	subs	r4, r4, r7
}
   d67b8:	4802      	ldr	r0, [pc, #8]	; (d67c4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x7c>)
                        return false;
                    }
                    return node.size < value.second;
                }
                return cmp < 0;
            }));
   d67ba:	10a4      	asrs	r4, r4, #2
}
   d67bc:	4360      	muls	r0, r4
   d67be:	b005      	add	sp, #20
   d67c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d67c4:	cccccccd 	.word	0xcccccccd

000d67c8 <_ZNK5spark6detail9LogFilter5levelEPKc>:
}

spark::detail::LogFilter::~LogFilter() {
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
   d67c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d67ca:	b085      	sub	sp, #20
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
   d67cc:	6903      	ldr	r3, [r0, #16]
}

spark::detail::LogFilter::~LogFilter() {
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
   d67ce:	9101      	str	r1, [sp, #4]
    LogLevel level = level_; // Default level
   d67d0:	7e06      	ldrb	r6, [r0, #24]
    if (!nodes_.isEmpty() && category) {
   d67d2:	b313      	cbz	r3, d681a <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
   d67d4:	b309      	cbz	r1, d681a <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d67d6:	af04      	add	r7, sp, #16
   d67d8:	2300      	movs	r3, #0
   d67da:	f847 3d04 	str.w	r3, [r7, #-4]!
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   d67de:	f100 040c 	add.w	r4, r0, #12
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d67e2:	461d      	mov	r5, r3
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d67e4:	4639      	mov	r1, r7
   d67e6:	a801      	add	r0, sp, #4
   d67e8:	f7ff ff41 	bl	d666e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d67ec:	4601      	mov	r1, r0
   d67ee:	b1a0      	cbz	r0, d681a <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
            bool found = false;
   d67f0:	ab04      	add	r3, sp, #16
            const int index = nodeIndex(*pNodes, name, size, found);
   d67f2:	9a03      	ldr	r2, [sp, #12]
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d67f4:	f803 5d05 	strb.w	r5, [r3, #-5]!
            const int index = nodeIndex(*pNodes, name, size, found);
   d67f8:	4620      	mov	r0, r4
   d67fa:	f7ff ffa5 	bl	d6748 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   d67fe:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d6802:	b153      	cbz	r3, d681a <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
    return data_[i];
}

template<typename T, typename AllocatorT>
inline const T& spark::Vector<T, AllocatorT>::at(int i) const {
    return data_[i];
   d6804:	6823      	ldr	r3, [r4, #0]
   d6806:	2414      	movs	r4, #20
   d6808:	fb04 3400 	mla	r4, r4, r0, r3
            }
            const Node &node = pNodes->at(index);
            if (node.level >= 0) {
                level = (LogLevel)node.level;
            }
            pNodes = &node.nodes;
   d680c:	3408      	adds	r4, #8
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found) {
                break;
            }
            const Node &node = pNodes->at(index);
            if (node.level >= 0) {
   d680e:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   d6812:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   d6814:	bfa8      	it	ge
   d6816:	b2de      	uxtbge	r6, r3
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d6818:	e7e4      	b.n	d67e4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x1c>
            }
            pNodes = &node.nodes;
        }
    }
    return level;
}
   d681a:	4630      	mov	r0, r6
   d681c:	b005      	add	sp, #20
   d681e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6820 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   d6820:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   d6822:	4c09      	ldr	r4, [pc, #36]	; (d6848 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   d6824:	6823      	ldr	r3, [r4, #0]
   d6826:	07db      	lsls	r3, r3, #31
   d6828:	d40b      	bmi.n	d6842 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d682a:	4620      	mov	r0, r4
   d682c:	f7fd fc46 	bl	d40bc <__cxa_guard_acquire>
   d6830:	b138      	cbz	r0, d6842 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d6832:	4620      	mov	r0, r4
   d6834:	f7fd fc47 	bl	d40c6 <__cxa_guard_release>
   d6838:	4a04      	ldr	r2, [pc, #16]	; (d684c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   d683a:	4905      	ldr	r1, [pc, #20]	; (d6850 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   d683c:	4805      	ldr	r0, [pc, #20]	; (d6854 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
   d683e:	f001 fc77 	bl	d8130 <__aeabi_atexit>
    return &factory;
}
   d6842:	4804      	ldr	r0, [pc, #16]	; (d6854 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
   d6844:	bd10      	pop	{r4, pc}
   d6846:	bf00      	nop
   d6848:	2003e39c 	.word	0x2003e39c
   d684c:	2003e294 	.word	0x2003e294
   d6850:	000d666b 	.word	0x000d666b
   d6854:	2003e224 	.word	0x2003e224

000d6858 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   d6858:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   d685a:	4c09      	ldr	r4, [pc, #36]	; (d6880 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   d685c:	6823      	ldr	r3, [r4, #0]
   d685e:	07db      	lsls	r3, r3, #31
   d6860:	d40b      	bmi.n	d687a <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d6862:	4620      	mov	r0, r4
   d6864:	f7fd fc2a 	bl	d40bc <__cxa_guard_acquire>
   d6868:	b138      	cbz	r0, d687a <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d686a:	4620      	mov	r0, r4
   d686c:	f7fd fc2b 	bl	d40c6 <__cxa_guard_release>
   d6870:	4a04      	ldr	r2, [pc, #16]	; (d6884 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   d6872:	4905      	ldr	r1, [pc, #20]	; (d6888 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   d6874:	4805      	ldr	r0, [pc, #20]	; (d688c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
   d6876:	f001 fc5b 	bl	d8130 <__aeabi_atexit>
    return &factory;
}
   d687a:	4804      	ldr	r0, [pc, #16]	; (d688c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
   d687c:	bd10      	pop	{r4, pc}
   d687e:	bf00      	nop
   d6880:	2003e3cc 	.word	0x2003e3cc
   d6884:	2003e294 	.word	0x2003e294
   d6888:	000d6669 	.word	0x000d6669
   d688c:	2003e220 	.word	0x2003e220

000d6890 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   d6890:	b538      	push	{r3, r4, r5, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6892:	2500      	movs	r5, #0
   d6894:	4604      	mov	r4, r0
   d6896:	6005      	str	r5, [r0, #0]
   d6898:	6045      	str	r5, [r0, #4]
   d689a:	6085      	str	r5, [r0, #8]
   d689c:	6105      	str	r5, [r0, #16]
   d689e:	6145      	str	r5, [r0, #20]
   d68a0:	6185      	str	r5, [r0, #24]
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d68a2:	f840 5f24 	str.w	r5, [r0, #36]!
    {
        os_mutex_recursive_create(&handle_);
   d68a6:	f7fe f919 	bl	d4adc <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   d68aa:	f7ff ffb9 	bl	d6820 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   d68ae:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d68b0:	f7ff ffd2 	bl	d6858 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   d68b4:	7325      	strb	r5, [r4, #12]
#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d68b6:	6220      	str	r0, [r4, #32]
#endif
    outputActive_ = false;
}
   d68b8:	4620      	mov	r0, r4
   d68ba:	bd38      	pop	{r3, r4, r5, pc}

000d68bc <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   d68bc:	b510      	push	{r4, lr}
    static LogManager mgr;
   d68be:	4c0a      	ldr	r4, [pc, #40]	; (d68e8 <_ZN5spark10LogManager8instanceEv+0x2c>)
   d68c0:	6823      	ldr	r3, [r4, #0]
   d68c2:	07db      	lsls	r3, r3, #31
   d68c4:	d40e      	bmi.n	d68e4 <_ZN5spark10LogManager8instanceEv+0x28>
   d68c6:	4620      	mov	r0, r4
   d68c8:	f7fd fbf8 	bl	d40bc <__cxa_guard_acquire>
   d68cc:	b150      	cbz	r0, d68e4 <_ZN5spark10LogManager8instanceEv+0x28>
   d68ce:	4807      	ldr	r0, [pc, #28]	; (d68ec <_ZN5spark10LogManager8instanceEv+0x30>)
   d68d0:	f7ff ffde 	bl	d6890 <_ZN5spark10LogManagerC1Ev>
   d68d4:	4620      	mov	r0, r4
   d68d6:	f7fd fbf6 	bl	d40c6 <__cxa_guard_release>
   d68da:	4a05      	ldr	r2, [pc, #20]	; (d68f0 <_ZN5spark10LogManager8instanceEv+0x34>)
   d68dc:	4905      	ldr	r1, [pc, #20]	; (d68f4 <_ZN5spark10LogManager8instanceEv+0x38>)
   d68de:	4803      	ldr	r0, [pc, #12]	; (d68ec <_ZN5spark10LogManager8instanceEv+0x30>)
   d68e0:	f001 fc26 	bl	d8130 <__aeabi_atexit>
    return &mgr;
}
   d68e4:	4801      	ldr	r0, [pc, #4]	; (d68ec <_ZN5spark10LogManager8instanceEv+0x30>)
   d68e6:	bd10      	pop	{r4, pc}
   d68e8:	2003e3a0 	.word	0x2003e3a0
   d68ec:	2003e3a4 	.word	0x2003e3a4
   d68f0:	2003e294 	.word	0x2003e294
   d68f4:	000d6d27 	.word	0x000d6d27

000d68f8 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   d68f8:	2300      	movs	r3, #0
   d68fa:	4a02      	ldr	r2, [pc, #8]	; (d6904 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   d68fc:	4902      	ldr	r1, [pc, #8]	; (d6908 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   d68fe:	4803      	ldr	r0, [pc, #12]	; (d690c <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   d6900:	f7fe ba94 	b.w	d4e2c <log_set_callbacks>
   d6904:	000d6c09 	.word	0x000d6c09
   d6908:	000d6b99 	.word	0x000d6b99
   d690c:	000d6b21 	.word	0x000d6b21

000d6910 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   d6910:	2300      	movs	r3, #0
   d6912:	461a      	mov	r2, r3
   d6914:	4619      	mov	r1, r3
   d6916:	4618      	mov	r0, r3
   d6918:	f7fe ba88 	b.w	d4e2c <log_set_callbacks>

000d691c <_ZNK5spark18JSONObjectIterator5valueEv>:

inline spark::JSONString spark::JSONObjectIterator::name() const {
    return JSONString(k_, d_);
}

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d691c:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d691e:	ac02      	add	r4, sp, #8
    return JSONValue(v_, d_);
   d6920:	690e      	ldr	r6, [r1, #16]
   d6922:	f851 3b04 	ldr.w	r3, [r1], #4
   d6926:	f844 3d08 	str.w	r3, [r4, #-8]!

inline spark::JSONString spark::JSONObjectIterator::name() const {
    return JSONString(k_, d_);
}

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d692a:	4605      	mov	r5, r0
   d692c:	a801      	add	r0, sp, #4
   d692e:	f7fe fed8 	bl	d56e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONValue(v_, d_);
   d6932:	4622      	mov	r2, r4
   d6934:	4631      	mov	r1, r6
   d6936:	4628      	mov	r0, r5
   d6938:	f7ff fe75 	bl	d6626 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d693c:	a801      	add	r0, sp, #4
   d693e:	f7fe feef 	bl	d5720 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d6942:	4628      	mov	r0, r5
   d6944:	b002      	add	sp, #8
   d6946:	bd70      	pop	{r4, r5, r6, pc}

000d6948 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d6948:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d694a:	ac02      	add	r4, sp, #8
        JSONObjectIterator(value.t_, value.d_) {
   d694c:	688e      	ldr	r6, [r1, #8]
   d694e:	f851 3b04 	ldr.w	r3, [r1], #4
   d6952:	f844 3d08 	str.w	r3, [r4, #-8]!
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d6956:	4605      	mov	r5, r0
   d6958:	a801      	add	r0, sp, #4
   d695a:	f7fe fec2 	bl	d56e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        JSONObjectIterator(value.t_, value.d_) {
   d695e:	4622      	mov	r2, r4
   d6960:	4631      	mov	r1, r6
   d6962:	4628      	mov	r0, r5
   d6964:	f7ff fe44 	bl	d65f0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6968:	a801      	add	r0, sp, #4
   d696a:	f7fe fed9 	bl	d5720 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d696e:	4628      	mov	r0, r5
   d6970:	b002      	add	sp, #8
   d6972:	bd70      	pop	{r4, r5, r6, pc}

000d6974 <_ZNK5spark18JSONObjectIterator4nameEv>:

inline spark::JSONString spark::JSONObjectIterator::name() const {
   d6974:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6976:	ac02      	add	r4, sp, #8
    return JSONString(k_, d_);
   d6978:	68ce      	ldr	r6, [r1, #12]
   d697a:	f851 3b04 	ldr.w	r3, [r1], #4
   d697e:	f844 3d08 	str.w	r3, [r4, #-8]!

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
        JSONObjectIterator(value.t_, value.d_) {
}

inline spark::JSONString spark::JSONObjectIterator::name() const {
   d6982:	4605      	mov	r5, r0
   d6984:	a801      	add	r0, sp, #4
   d6986:	f7fe feac 	bl	d56e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONString(k_, d_);
   d698a:	4622      	mov	r2, r4
   d698c:	4631      	mov	r1, r6
   d698e:	4628      	mov	r0, r5
   d6990:	f7ff fe06 	bl	d65a0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6994:	a801      	add	r0, sp, #4
   d6996:	f7fe fec3 	bl	d5720 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d699a:	4628      	mov	r0, r5
   d699c:	b002      	add	sp, #8
   d699e:	bd70      	pop	{r4, r5, r6, pc}

000d69a0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
    static DefaultOutputStreamFactory factory;
    return &factory;
}

void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   d69a0:	b530      	push	{r4, r5, lr}
   d69a2:	b08b      	sub	sp, #44	; 0x2c
   d69a4:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   d69a6:	4601      	mov	r1, r0
   d69a8:	a804      	add	r0, sp, #16
   d69aa:	f7ff ffcd 	bl	d6948 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
    while (it.next()) {
   d69ae:	a804      	add	r0, sp, #16
   d69b0:	f7ff fd29 	bl	d6406 <_ZN5spark18JSONObjectIterator4nextEv>
   d69b4:	b1e8      	cbz	r0, d69f2 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x52>
        if (it.name() == "baud" && baudRate) {
   d69b6:	a904      	add	r1, sp, #16
   d69b8:	4668      	mov	r0, sp
   d69ba:	f7ff ffdb 	bl	d6974 <_ZNK5spark18JSONObjectIterator4nameEv>
   d69be:	490f      	ldr	r1, [pc, #60]	; (d69fc <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x5c>)
   d69c0:	9802      	ldr	r0, [sp, #8]
   d69c2:	f7ff fe91 	bl	d66e8 <_ZNK5spark10JSONStringeqEPKc.isra.7>
   d69c6:	4604      	mov	r4, r0
   d69c8:	b110      	cbz	r0, d69d0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x30>
   d69ca:	1c2c      	adds	r4, r5, #0
   d69cc:	bf18      	it	ne
   d69ce:	2401      	movne	r4, #1
   d69d0:	a801      	add	r0, sp, #4
   d69d2:	f7fe fea5 	bl	d5720 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d69d6:	2c00      	cmp	r4, #0
   d69d8:	d0e9      	beq.n	d69ae <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0xe>
            *baudRate = it.value().toInt();
   d69da:	a904      	add	r1, sp, #16
   d69dc:	4668      	mov	r0, sp
   d69de:	f7ff ff9d 	bl	d691c <_ZNK5spark18JSONObjectIterator5valueEv>
   d69e2:	4668      	mov	r0, sp
   d69e4:	f7ff fcef 	bl	d63c6 <_ZNK5spark9JSONValue5toIntEv>
   d69e8:	6028      	str	r0, [r5, #0]
   d69ea:	a801      	add	r0, sp, #4
   d69ec:	f7fe fe98 	bl	d5720 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d69f0:	e7dd      	b.n	d69ae <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0xe>
   d69f2:	a805      	add	r0, sp, #20
   d69f4:	f7fe fe94 	bl	d5720 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
    }
}
   d69f8:	b00b      	add	sp, #44	; 0x2c
   d69fa:	bd30      	pop	{r4, r5, pc}
   d69fc:	000d9474 	.word	0x000d9474

000d6a00 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
    static DefaultLogHandlerFactory factory;
    return &factory;
}

// spark::DefaultOutputStreamFactory
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d6a00:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6a02:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (strcmp(type, "Serial") == 0) {
   d6a04:	4620      	mov	r0, r4
   d6a06:	4913      	ldr	r1, [pc, #76]	; (d6a54 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
    static DefaultLogHandlerFactory factory;
    return &factory;
}

// spark::DefaultOutputStreamFactory
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d6a08:	4615      	mov	r5, r2
#if PLATFORM_ID != 3
    if (strcmp(type, "Serial") == 0) {
   d6a0a:	f002 f9f9 	bl	d8e00 <strcmp>
   d6a0e:	b940      	cbnz	r0, d6a22 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x22>
        Serial.begin();
   d6a10:	f001 fa5a 	bl	d7ec8 <_Z16_fetch_usbserialv>
   d6a14:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d6a18:	f001 fa44 	bl	d7ea4 <_ZN9USBSerial5beginEl>
        return &Serial;
   d6a1c:	f001 fa54 	bl	d7ec8 <_Z16_fetch_usbserialv>
   d6a20:	e015      	b.n	d6a4e <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4e>
    if (strcmp(type, "USBSerial1") == 0) {
        USBSerial1.begin();
        return &USBSerial1;
    }
#endif
    if (strcmp(type, "Serial1") == 0) {
   d6a22:	490d      	ldr	r1, [pc, #52]	; (d6a58 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   d6a24:	4620      	mov	r0, r4
   d6a26:	f002 f9eb 	bl	d8e00 <strcmp>
   d6a2a:	b978      	cbnz	r0, d6a4c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
        int baud = 9600;
   d6a2c:	a902      	add	r1, sp, #8
   d6a2e:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   d6a32:	f841 3d04 	str.w	r3, [r1, #-4]!
        getParams(params, &baud);
   d6a36:	4628      	mov	r0, r5
   d6a38:	f7ff ffb2 	bl	d69a0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   d6a3c:	f001 f9b6 	bl	d7dac <_Z22__fetch_global_Serial1v>
   d6a40:	9901      	ldr	r1, [sp, #4]
   d6a42:	f001 f9a9 	bl	d7d98 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   d6a46:	f001 f9b1 	bl	d7dac <_Z22__fetch_global_Serial1v>
   d6a4a:	e000      	b.n	d6a4e <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4e>
    }
#endif // PLATFORM_ID != 3
    return nullptr;
   d6a4c:	2000      	movs	r0, #0
}
   d6a4e:	b003      	add	sp, #12
   d6a50:	bd30      	pop	{r4, r5, pc}
   d6a52:	bf00      	nop
   d6a54:	000d9479 	.word	0x000d9479
   d6a58:	000d9480 	.word	0x000d9480

000d6a5c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6a5c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d6a5e:	6804      	ldr	r4, [r0, #0]
   d6a60:	6843      	ldr	r3, [r0, #4]
   d6a62:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6a64:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d6a66:	fb06 4603 	mla	r6, r6, r3, r4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d6a6a:	42a6      	cmp	r6, r4
   d6a6c:	d005      	beq.n	d6a7a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d6a6e:	f104 0008 	add.w	r0, r4, #8
   d6a72:	f7ff fff3 	bl	d6a5c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d6a76:	3414      	adds	r4, #20
   d6a78:	e7f7      	b.n	d6a6a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d6a7a:	6828      	ldr	r0, [r5, #0]
   d6a7c:	f7fe fa6a 	bl	d4f54 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d6a80:	4628      	mov	r0, r5
   d6a82:	bd70      	pop	{r4, r5, r6, pc}

000d6a84 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6a84:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d6a86:	6804      	ldr	r4, [r0, #0]
   d6a88:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6a8a:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d6a8c:	eb04 1603 	add.w	r6, r4, r3, lsl #4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d6a90:	42a6      	cmp	r6, r4
   d6a92:	d004      	beq.n	d6a9e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   d6a94:	4620      	mov	r0, r4
   d6a96:	f001 f888 	bl	d7baa <_ZN6StringD1Ev>
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d6a9a:	3410      	adds	r4, #16
   d6a9c:	e7f8      	b.n	d6a90 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d6a9e:	6828      	ldr	r0, [r5, #0]
   d6aa0:	f7fe fa58 	bl	d4f54 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d6aa4:	4628      	mov	r0, r5
   d6aa6:	bd70      	pop	{r4, r5, r6, pc}

000d6aa8 <_ZN5spark6detail9LogFilterD1Ev>:
    swap(cats_, cats);
    swap(nodes_, nodes);
    level_ = level;
}

spark::detail::LogFilter::~LogFilter() {
   d6aa8:	b510      	push	{r4, lr}
   d6aaa:	4604      	mov	r4, r0
   d6aac:	300c      	adds	r0, #12
   d6aae:	f7ff ffd5 	bl	d6a5c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d6ab2:	4620      	mov	r0, r4
   d6ab4:	f7ff ffe6 	bl	d6a84 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d6ab8:	4620      	mov	r0, r4
   d6aba:	bd10      	pop	{r4, pc}

000d6abc <_ZN5spark16StreamLogHandlerD1Ev>:
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d6abc:	b510      	push	{r4, lr}
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d6abe:	4b04      	ldr	r3, [pc, #16]	; (d6ad0 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d6ac0:	4604      	mov	r4, r0
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d6ac2:	f840 3b04 	str.w	r3, [r0], #4
   d6ac6:	f7ff ffef 	bl	d6aa8 <_ZN5spark6detail9LogFilterD1Ev>
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d6aca:	4620      	mov	r0, r4
   d6acc:	bd10      	pop	{r4, pc}
   d6ace:	bf00      	nop
   d6ad0:	000d8fc8 	.word	0x000d8fc8

000d6ad4 <_ZN5spark16StreamLogHandlerD0Ev>:
   d6ad4:	b510      	push	{r4, lr}
   d6ad6:	4604      	mov	r4, r0
   d6ad8:	f7ff fff0 	bl	d6abc <_ZN5spark16StreamLogHandlerD1Ev>
   d6adc:	4620      	mov	r0, r4
   d6ade:	2124      	movs	r1, #36	; 0x24
   d6ae0:	f001 fb2b 	bl	d813a <_ZdlPvj>
   d6ae4:	4620      	mov	r0, r4
   d6ae6:	bd10      	pop	{r4, pc}

000d6ae8 <_ZN5spark20JSONStreamLogHandlerD1Ev>:

private:
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
   d6ae8:	b510      	push	{r4, lr}
   d6aea:	4b03      	ldr	r3, [pc, #12]	; (d6af8 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   d6aec:	6003      	str	r3, [r0, #0]
   d6aee:	4604      	mov	r4, r0
   d6af0:	f7ff ffe4 	bl	d6abc <_ZN5spark16StreamLogHandlerD1Ev>
   d6af4:	4620      	mov	r0, r4
   d6af6:	bd10      	pop	{r4, pc}
   d6af8:	000d944c 	.word	0x000d944c

000d6afc <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   d6afc:	b510      	push	{r4, lr}
   d6afe:	4604      	mov	r4, r0
   d6b00:	f7ff fff2 	bl	d6ae8 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   d6b04:	4620      	mov	r0, r4
   d6b06:	2124      	movs	r1, #36	; 0x24
   d6b08:	f001 fb17 	bl	d813a <_ZdlPvj>
   d6b0c:	4620      	mov	r0, r4
   d6b0e:	bd10      	pop	{r4, pc}

000d6b10 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d6b10:	b510      	push	{r4, lr}
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d6b12:	6803      	ldr	r3, [r0, #0]
   d6b14:	4604      	mov	r4, r0
   d6b16:	6818      	ldr	r0, [r3, #0]
   d6b18:	f7fd fff0 	bl	d4afc <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   d6b1c:	4620      	mov	r0, r4
   d6b1e:	bd10      	pop	{r4, pc}

000d6b20 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d6b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6b24:	469b      	mov	fp, r3
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   d6b26:	4b1b      	ldr	r3, [pc, #108]	; (d6b94 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>)
   d6b28:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d6b2a:	f3c3 0308 	ubfx	r3, r3, #0, #9

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d6b2e:	b085      	sub	sp, #20
   d6b30:	4682      	mov	sl, r0
   d6b32:	460e      	mov	r6, r1
   d6b34:	4690      	mov	r8, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d6b36:	bb53      	cbnz	r3, d6b8e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x6e>
        return;
    }
#endif
    LogManager *that = instance();
   d6b38:	f7ff fec0 	bl	d68bc <_ZN5spark10LogManager8instanceEv>
   d6b3c:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d6b3e:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6b40:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
   d6b42:	f7ff fde5 	bl	d6710 <_ZN14RecursiveMutex4lockEv>
        // prevent re-entry
        if (that->isActive()) {
   d6b46:	7b23      	ldrb	r3, [r4, #12]
   d6b48:	b9f3      	cbnz	r3, d6b88 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x68>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d6b4a:	2301      	movs	r3, #1
   d6b4c:	7323      	strb	r3, [r4, #12]
   d6b4e:	6825      	ldr	r5, [r4, #0]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d6b50:	6863      	ldr	r3, [r4, #4]
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
   d6b52:	b2f6      	uxtb	r6, r6
   d6b54:	eb05 0983 	add.w	r9, r5, r3, lsl #2
        // prevent re-entry
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
   d6b58:	454d      	cmp	r5, r9
   d6b5a:	d013      	beq.n	d6b84 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x64>
   d6b5c:	f855 7b04 	ldr.w	r7, [r5], #4
inline const char* spark::LogHandler::levelName(LogLevel level) {
    return log_level_name(level, nullptr);
}

inline void spark::LogHandler::message(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
    if (level >= filter_.level(category)) {
   d6b60:	4641      	mov	r1, r8
   d6b62:	1d38      	adds	r0, r7, #4
   d6b64:	f7ff fe30 	bl	d67c8 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d6b68:	4286      	cmp	r6, r0
   d6b6a:	d3f5      	bcc.n	d6b58 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x38>
        logMessage(msg, level, category, attr);
   d6b6c:	683b      	ldr	r3, [r7, #0]
   d6b6e:	f8cd b000 	str.w	fp, [sp]
   d6b72:	689b      	ldr	r3, [r3, #8]
   d6b74:	469e      	mov	lr, r3
   d6b76:	4638      	mov	r0, r7
   d6b78:	4643      	mov	r3, r8
   d6b7a:	4632      	mov	r2, r6
   d6b7c:	4651      	mov	r1, sl
   d6b7e:	4677      	mov	r7, lr
   d6b80:	47b8      	blx	r7
   d6b82:	e7e9      	b.n	d6b58 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x38>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d6b84:	2300      	movs	r3, #0
   d6b86:	7323      	strb	r3, [r4, #12]
#endif
    LogManager *that = instance();
    LOG_WITH_LOCK(that->mutex_) {
        // prevent re-entry
        if (that->isActive()) {
            return;
   d6b88:	a803      	add	r0, sp, #12
   d6b8a:	f7ff ffc1 	bl	d6b10 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   d6b8e:	b005      	add	sp, #20
   d6b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6b94:	e000ed00 	.word	0xe000ed00

000d6b98 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:

void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d6b98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6b9c:	4699      	mov	r9, r3
   d6b9e:	4b19      	ldr	r3, [pc, #100]	; (d6c04 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x6c>)
   d6ba0:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d6ba2:	f3c3 0308 	ubfx	r3, r3, #0, #9
        }
        that->setActive(false);
    }
}

void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d6ba6:	4607      	mov	r7, r0
   d6ba8:	4688      	mov	r8, r1
   d6baa:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d6bac:	bb33      	cbnz	r3, d6bfc <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x64>
        return;
    }
#endif
    LogManager *that = instance();
   d6bae:	f7ff fe85 	bl	d68bc <_ZN5spark10LogManager8instanceEv>
   d6bb2:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d6bb4:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6bb6:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d6bb8:	f7ff fdaa 	bl	d6710 <_ZN14RecursiveMutex4lockEv>
        // prevent re-entry
        if (that->isActive()) {
   d6bbc:	7b23      	ldrb	r3, [r4, #12]
   d6bbe:	b9d3      	cbnz	r3, d6bf6 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x5e>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d6bc0:	2301      	movs	r3, #1
   d6bc2:	7323      	strb	r3, [r4, #12]
   d6bc4:	6825      	ldr	r5, [r4, #0]
   d6bc6:	6863      	ldr	r3, [r4, #4]
    }
}

inline void spark::LogHandler::write(const char *data, size_t size, LogLevel level, const char *category) {
    if (level >= filter_.level(category)) {
   d6bc8:	fa5f fb86 	uxtb.w	fp, r6
   d6bcc:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        // prevent re-entry
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
   d6bd0:	4555      	cmp	r5, sl
   d6bd2:	d00e      	beq.n	d6bf2 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x5a>
   d6bd4:	f855 6b04 	ldr.w	r6, [r5], #4
   d6bd8:	4649      	mov	r1, r9
   d6bda:	1d30      	adds	r0, r6, #4
   d6bdc:	f7ff fdf4 	bl	d67c8 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d6be0:	4583      	cmp	fp, r0
   d6be2:	d3f5      	bcc.n	d6bd0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
        write(data, size);
   d6be4:	6833      	ldr	r3, [r6, #0]
   d6be6:	4642      	mov	r2, r8
   d6be8:	68db      	ldr	r3, [r3, #12]
   d6bea:	4639      	mov	r1, r7
   d6bec:	4630      	mov	r0, r6
   d6bee:	4798      	blx	r3
   d6bf0:	e7ee      	b.n	d6bd0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d6bf2:	2300      	movs	r3, #0
   d6bf4:	7323      	strb	r3, [r4, #12]
#endif
    LogManager *that = instance();
    LOG_WITH_LOCK(that->mutex_) {
        // prevent re-entry
        if (that->isActive()) {
            return;
   d6bf6:	a801      	add	r0, sp, #4
   d6bf8:	f7ff ff8a 	bl	d6b10 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->write(data, size, (LogLevel)level, category);
        }
        that->setActive(false);
    }
}
   d6bfc:	b003      	add	sp, #12
   d6bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6c02:	bf00      	nop
   d6c04:	e000ed00 	.word	0xe000ed00

000d6c08 <_ZN5spark10LogManager10logEnabledEiPKcPv>:

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d6c08:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d6c0c:	4b15      	ldr	r3, [pc, #84]	; (d6c64 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5c>)
   d6c0e:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d6c10:	f3c3 0308 	ubfx	r3, r3, #0, #9
        }
        that->setActive(false);
    }
}

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d6c14:	4604      	mov	r4, r0
   d6c16:	4688      	mov	r8, r1
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d6c18:	b9fb      	cbnz	r3, d6c5a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x52>
        return 0;
    }
#endif
    LogManager *that = instance();
   d6c1a:	f7ff fe4f 	bl	d68bc <_ZN5spark10LogManager8instanceEv>
   d6c1e:	4606      	mov	r6, r0
    int minLevel = LOG_LEVEL_NONE;
    LOG_WITH_LOCK(that->mutex_) {
   d6c20:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6c22:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d6c24:	f7ff fd74 	bl	d6710 <_ZN14RecursiveMutex4lockEv>
   d6c28:	e896 00a0 	ldmia.w	r6, {r5, r7}
   d6c2c:	2646      	movs	r6, #70	; 0x46
   d6c2e:	eb05 0787 	add.w	r7, r5, r7, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d6c32:	42af      	cmp	r7, r5
   d6c34:	d107      	bne.n	d6c46 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x3e>
        return 0;
    }
#endif
    LogManager *that = instance();
    int minLevel = LOG_LEVEL_NONE;
    LOG_WITH_LOCK(that->mutex_) {
   d6c36:	a801      	add	r0, sp, #4
   d6c38:	f7ff ff6a 	bl	d6b10 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            if (level < minLevel) {
                minLevel = level;
            }
        }
    }
    return (level >= minLevel);
   d6c3c:	42b4      	cmp	r4, r6
   d6c3e:	bfb4      	ite	lt
   d6c40:	2000      	movlt	r0, #0
   d6c42:	2001      	movge	r0, #1
   d6c44:	e00a      	b.n	d6c5c <_ZN5spark10LogManager10logEnabledEiPKcPv+0x54>
inline LogLevel spark::LogHandler::level() const {
    return filter_.level();
}

inline LogLevel spark::LogHandler::level(const char *category) const {
    return filter_.level(category);
   d6c46:	f855 0b04 	ldr.w	r0, [r5], #4
   d6c4a:	4641      	mov	r1, r8
   d6c4c:	3004      	adds	r0, #4
   d6c4e:	f7ff fdbb 	bl	d67c8 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d6c52:	4286      	cmp	r6, r0
   d6c54:	bfa8      	it	ge
   d6c56:	4606      	movge	r6, r0
   d6c58:	e7eb      	b.n	d6c32 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2a>
}

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
        return 0;
   d6c5a:	2000      	movs	r0, #0
                minLevel = level;
            }
        }
    }
    return (level >= minLevel);
}
   d6c5c:	b002      	add	sp, #8
   d6c5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6c62:	bf00      	nop
   d6c64:	e000ed00 	.word	0xe000ed00

000d6c68 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d6c68:	b570      	push	{r4, r5, r6, lr}
    T* const p = find(data_, data_ + size_, value);
   d6c6a:	6803      	ldr	r3, [r0, #0]
   d6c6c:	6842      	ldr	r2, [r0, #4]
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d6c6e:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   d6c70:	eb03 0282 	add.w	r2, r3, r2, lsl #2
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d6c74:	429a      	cmp	r2, r3
   d6c76:	4618      	mov	r0, r3
   d6c78:	d00e      	beq.n	d6c98 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x30>
            if (*p == value) {
   d6c7a:	6806      	ldr	r6, [r0, #0]
   d6c7c:	680d      	ldr	r5, [r1, #0]
   d6c7e:	42ae      	cmp	r6, r5
   d6c80:	f103 0304 	add.w	r3, r3, #4
   d6c84:	d1f6      	bne.n	d6c74 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xc>
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
   d6c86:	1d01      	adds	r1, r0, #4
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d6c88:	1a52      	subs	r2, r2, r1
   d6c8a:	f002 f81b 	bl	d8cc4 <memmove>
    if (!p) {
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
   d6c8e:	6863      	ldr	r3, [r4, #4]
   d6c90:	3b01      	subs	r3, #1
   d6c92:	6063      	str	r3, [r4, #4]
    return true;
   d6c94:	2001      	movs	r0, #1
}
   d6c96:	bd70      	pop	{r4, r5, r6, pc}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
   d6c98:	2000      	movs	r0, #0
   d6c9a:	bd70      	pop	{r4, r5, r6, pc}

000d6c9c <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
        }
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
   d6c9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d6c9e:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
   d6ca0:	3024      	adds	r0, #36	; 0x24
        }
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
   d6ca2:	9101      	str	r1, [sp, #4]
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6ca4:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
   d6ca6:	f7ff fd33 	bl	d6710 <_ZN14RecursiveMutex4lockEv>
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d6caa:	a901      	add	r1, sp, #4
   d6cac:	4620      	mov	r0, r4
   d6cae:	f7ff ffdb 	bl	d6c68 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   d6cb2:	b920      	cbnz	r0, d6cbe <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x22>
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
   d6cb4:	a803      	add	r0, sp, #12
   d6cb6:	f7ff ff2b 	bl	d6b10 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
            resetSystemCallbacks();
        }
    }
}
   d6cba:	b004      	add	sp, #16
   d6cbc:	bd10      	pop	{r4, pc}
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d6cbe:	6863      	ldr	r3, [r4, #4]
   d6cc0:	2b00      	cmp	r3, #0
   d6cc2:	d1f7      	bne.n	d6cb4 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x18>
            resetSystemCallbacks();
   d6cc4:	f7ff fe24 	bl	d6910 <_ZN5spark10LogManager20resetSystemCallbacksEv>
   d6cc8:	e7f4      	b.n	d6cb4 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x18>

000d6cca <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
            break;
        }
    }
}

void spark::LogManager::destroyFactoryHandlers() {
   d6cca:	b570      	push	{r4, r5, r6, lr}
   d6ccc:	6905      	ldr	r5, [r0, #16]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d6cce:	6943      	ldr	r3, [r0, #20]
   d6cd0:	2618      	movs	r6, #24
   d6cd2:	4604      	mov	r4, r0
   d6cd4:	fb06 5603 	mla	r6, r6, r3, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   d6cd8:	42ae      	cmp	r6, r5
   d6cda:	d015      	beq.n	d6d08 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   d6cdc:	f105 0110 	add.w	r1, r5, #16
   d6ce0:	4620      	mov	r0, r4
   d6ce2:	f7ff ffc1 	bl	d6c68 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   d6ce6:	6863      	ldr	r3, [r4, #4]
   d6ce8:	b90b      	cbnz	r3, d6cee <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   d6cea:	f7ff fe11 	bl	d6910 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        }
        handlerFactory_->destroyHandler(h.handler);
   d6cee:	69e0      	ldr	r0, [r4, #28]
   d6cf0:	6929      	ldr	r1, [r5, #16]
   d6cf2:	6803      	ldr	r3, [r0, #0]
   d6cf4:	68db      	ldr	r3, [r3, #12]
   d6cf6:	4798      	blx	r3
        if (h.stream) {
   d6cf8:	6969      	ldr	r1, [r5, #20]
   d6cfa:	b119      	cbz	r1, d6d04 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   d6cfc:	6a20      	ldr	r0, [r4, #32]
   d6cfe:	6803      	ldr	r3, [r0, #0]
   d6d00:	68db      	ldr	r3, [r3, #12]
   d6d02:	4798      	blx	r3
   d6d04:	3518      	adds	r5, #24
        }
    }
}

void spark::LogManager::destroyFactoryHandlers() {
    for (const FactoryHandler &h: factoryHandlers_) {
   d6d06:	e7e7      	b.n	d6cd8 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d6d08:	6925      	ldr	r5, [r4, #16]
   d6d0a:	6963      	ldr	r3, [r4, #20]
   d6d0c:	2618      	movs	r6, #24
   d6d0e:	fb06 5603 	mla	r6, r6, r3, r5
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d6d12:	42b5      	cmp	r5, r6
   d6d14:	d004      	beq.n	d6d20 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
        }
    }
}

// spark::LogManager
struct spark::LogManager::FactoryHandler {
   d6d16:	4628      	mov	r0, r5
   d6d18:	f000 ff47 	bl	d7baa <_ZN6StringD1Ev>
   d6d1c:	3518      	adds	r5, #24
   d6d1e:	e7f8      	b.n	d6d12 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d6d20:	2300      	movs	r3, #0
   d6d22:	6163      	str	r3, [r4, #20]
   d6d24:	bd70      	pop	{r4, r5, r6, pc}

000d6d26 <_ZN5spark10LogManagerD1Ev>:
    streamFactory_ = DefaultOutputStreamFactory::instance();
#endif
    outputActive_ = false;
}

spark::LogManager::~LogManager() {
   d6d26:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d6d28:	4604      	mov	r4, r0
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6d2a:	ad02      	add	r5, sp, #8
    resetSystemCallbacks();
   d6d2c:	f7ff fdf0 	bl	d6910 <_ZN5spark10LogManager20resetSystemCallbacksEv>
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
   d6d30:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d6d34:	f845 0d04 	str.w	r0, [r5, #-4]!
      { _M_device.lock(); }
   d6d38:	f7ff fcea 	bl	d6710 <_ZN14RecursiveMutex4lockEv>
         destroyFactoryHandlers();
   d6d3c:	4620      	mov	r0, r4
   d6d3e:	f7ff ffc4 	bl	d6cca <_ZN5spark10LogManager22destroyFactoryHandlersEv>
}

spark::LogManager::~LogManager() {
    resetSystemCallbacks();
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
   d6d42:	4628      	mov	r0, r5
   d6d44:	f7ff fee4 	bl	d6b10 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
   d6d48:	6925      	ldr	r5, [r4, #16]
   d6d4a:	6963      	ldr	r3, [r4, #20]
   d6d4c:	2618      	movs	r6, #24
   d6d4e:	fb06 5603 	mla	r6, r6, r3, r5
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d6d52:	42b5      	cmp	r5, r6
   d6d54:	d004      	beq.n	d6d60 <_ZN5spark10LogManagerD1Ev+0x3a>
        }
    }
}

// spark::LogManager
struct spark::LogManager::FactoryHandler {
   d6d56:	4628      	mov	r0, r5
   d6d58:	f000 ff27 	bl	d7baa <_ZN6StringD1Ev>
   d6d5c:	3518      	adds	r5, #24
   d6d5e:	e7f8      	b.n	d6d52 <_ZN5spark10LogManagerD1Ev+0x2c>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d6d60:	6920      	ldr	r0, [r4, #16]
   d6d62:	f7fe f8f7 	bl	d4f54 <free>
   d6d66:	6820      	ldr	r0, [r4, #0]
   d6d68:	f7fe f8f4 	bl	d4f54 <free>
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
         destroyFactoryHandlers();
    }
#endif
}
   d6d6c:	4620      	mov	r0, r4
   d6d6e:	b002      	add	sp, #8
   d6d70:	bd70      	pop	{r4, r5, r6, pc}

000d6d72 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>:
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6d72:	6803      	ldr	r3, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6d74:	680a      	ldr	r2, [r1, #0]
   d6d76:	6002      	str	r2, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d6d78:	600b      	str	r3, [r1, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6d7a:	6843      	ldr	r3, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   d6d7c:	684a      	ldr	r2, [r1, #4]
   d6d7e:	6042      	str	r2, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d6d80:	604b      	str	r3, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6d82:	6883      	ldr	r3, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   d6d84:	688a      	ldr	r2, [r1, #8]
   d6d86:	6082      	str	r2, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6d88:	608b      	str	r3, [r1, #8]
   d6d8a:	4770      	bx	lr

000d6d8c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        size_ = vector.size_;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d6d8c:	b510      	push	{r4, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6d8e:	2300      	movs	r3, #0
        size_ = vector.size_;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d6d90:	4604      	mov	r4, r0
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6d92:	6003      	str	r3, [r0, #0]
   d6d94:	6043      	str	r3, [r0, #4]
   d6d96:	6083      	str	r3, [r0, #8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d6d98:	f7ff ffeb 	bl	d6d72 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
}
   d6d9c:	4620      	mov	r0, r4
   d6d9e:	bd10      	pop	{r4, pc}

000d6da0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d6da0:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d6da2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6da4:	4604      	mov	r4, r0
   d6da6:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d6da8:	d925      	bls.n	d6df6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
   d6daa:	4290      	cmp	r0, r2
   d6dac:	d224      	bcs.n	d6df8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x58>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
   d6dae:	1a55      	subs	r5, r2, r1
   d6db0:	3d14      	subs	r5, #20
   d6db2:	442c      	add	r4, r5
   d6db4:	f1a1 0714 	sub.w	r7, r1, #20
   d6db8:	f1a2 050c 	sub.w	r5, r2, #12
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6dbc:	2600      	movs	r6, #0
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d6dbe:	f1a5 0308 	sub.w	r3, r5, #8
   d6dc2:	429f      	cmp	r7, r3
   d6dc4:	d037      	beq.n	d6e36 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
                new(dest) T(std::move(*end));
   d6dc6:	b184      	cbz	r4, d6dea <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4a>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d6dc8:	f855 3c08 	ldr.w	r3, [r5, #-8]
   d6dcc:	6023      	str	r3, [r4, #0]
   d6dce:	f835 3c04 	ldrh.w	r3, [r5, #-4]
   d6dd2:	80a3      	strh	r3, [r4, #4]
   d6dd4:	f935 3c02 	ldrsh.w	r3, [r5, #-2]
   d6dd8:	80e3      	strh	r3, [r4, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6dda:	60a6      	str	r6, [r4, #8]
   d6ddc:	60e6      	str	r6, [r4, #12]
   d6dde:	6126      	str	r6, [r4, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d6de0:	4629      	mov	r1, r5
   d6de2:	f104 0008 	add.w	r0, r4, #8
   d6de6:	f7ff ffc4 	bl	d6d72 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
   d6dea:	4628      	mov	r0, r5
   d6dec:	f7ff fe36 	bl	d6a5c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d6df0:	3c14      	subs	r4, #20
   d6df2:	3d14      	subs	r5, #20
   d6df4:	e7e3      	b.n	d6dbe <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d6df6:	d01e      	beq.n	d6e36 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
   d6df8:	f101 0508 	add.w	r5, r1, #8
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6dfc:	2700      	movs	r7, #0
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d6dfe:	f1a5 0308 	sub.w	r3, r5, #8
   d6e02:	429e      	cmp	r6, r3
   d6e04:	d017      	beq.n	d6e36 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
                new(dest) T(std::move(*p));
   d6e06:	b184      	cbz	r4, d6e2a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x8a>
   d6e08:	f855 3c08 	ldr.w	r3, [r5, #-8]
   d6e0c:	6023      	str	r3, [r4, #0]
   d6e0e:	f835 3c04 	ldrh.w	r3, [r5, #-4]
   d6e12:	80a3      	strh	r3, [r4, #4]
   d6e14:	f935 3c02 	ldrsh.w	r3, [r5, #-2]
   d6e18:	80e3      	strh	r3, [r4, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6e1a:	60a7      	str	r7, [r4, #8]
   d6e1c:	60e7      	str	r7, [r4, #12]
   d6e1e:	6127      	str	r7, [r4, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d6e20:	4629      	mov	r1, r5
   d6e22:	f104 0008 	add.w	r0, r4, #8
   d6e26:	f7ff ffa4 	bl	d6d72 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
   d6e2a:	4628      	mov	r0, r5
   d6e2c:	f7ff fe16 	bl	d6a5c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d6e30:	3414      	adds	r4, #20
   d6e32:	3514      	adds	r5, #20
   d6e34:	e7e3      	b.n	d6dfe <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
   d6e36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6e38 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::prepend(const Vector<T, AllocatorT> &vector) {
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d6e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6e3a:	6845      	ldr	r5, [r0, #4]
   d6e3c:	6883      	ldr	r3, [r0, #8]
   d6e3e:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::prepend(const Vector<T, AllocatorT> &vector) {
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d6e40:	4604      	mov	r4, r0
   d6e42:	460e      	mov	r6, r1
   d6e44:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6e46:	db0e      	blt.n	d6e66 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2e>
   d6e48:	3501      	adds	r5, #1
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d6e4a:	2d00      	cmp	r5, #0
   d6e4c:	dd05      	ble.n	d6e5a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
}

inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
   d6e4e:	00a9      	lsls	r1, r5, #2
   d6e50:	6800      	ldr	r0, [r0, #0]
   d6e52:	f7fe f887 	bl	d4f64 <realloc>
    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
            if (!d) {
   d6e56:	b920      	cbnz	r0, d6e62 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2a>
   d6e58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d6e5a:	6800      	ldr	r0, [r0, #0]
   d6e5c:	f7fe f87a 	bl	d4f54 <free>
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d6e60:	2000      	movs	r0, #0
                return false;
            }
        } else {
            AllocatorT::free(data_);
        }
        data_ = d;
   d6e62:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d6e64:	60a5      	str	r5, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d6e66:	6825      	ldr	r5, [r4, #0]
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d6e68:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d6e6a:	eb05 0186 	add.w	r1, r5, r6, lsl #2
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d6e6e:	eb05 0282 	add.w	r2, r5, r2, lsl #2
   d6e72:	1a52      	subs	r2, r2, r1
   d6e74:	1d08      	adds	r0, r1, #4
   d6e76:	f001 ff25 	bl	d8cc4 <memmove>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
   d6e7a:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
   d6e7e:	6863      	ldr	r3, [r4, #4]
   d6e80:	3301      	adds	r3, #1
   d6e82:	6063      	str	r3, [r4, #4]
   d6e84:	2001      	movs	r0, #1
    return true;
}
   d6e86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6e88 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
         destroyFactoryHandlers();
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
   d6e88:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6e8a:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
   d6e8c:	3024      	adds	r0, #36	; 0x24
         destroyFactoryHandlers();
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
   d6e8e:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6e90:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d6e92:	f7ff fc3d 	bl	d6710 <_ZN14RecursiveMutex4lockEv>
    return p - data_;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::contains(const T &value) const {
    return find(data_, data_ + size_, value);
   d6e96:	6823      	ldr	r3, [r4, #0]
   d6e98:	6861      	ldr	r1, [r4, #4]
   d6e9a:	eb03 0081 	add.w	r0, r3, r1, lsl #2
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d6e9e:	4283      	cmp	r3, r0
   d6ea0:	461a      	mov	r2, r3
   d6ea2:	d009      	beq.n	d6eb8 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>
            if (*p == value) {
   d6ea4:	6812      	ldr	r2, [r2, #0]
   d6ea6:	42aa      	cmp	r2, r5
   d6ea8:	f103 0304 	add.w	r3, r3, #4
   d6eac:	d1f7      	bne.n	d6e9e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x16>
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
            return false;
   d6eae:	a801      	add	r0, sp, #4
   d6eb0:	f7ff fe2e 	bl	d6b10 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   d6eb4:	2500      	movs	r5, #0
   d6eb6:	e00e      	b.n	d6ed6 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d6eb8:	462a      	mov	r2, r5
   d6eba:	4620      	mov	r0, r4
   d6ebc:	f7ff ffbc 	bl	d6e38 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   d6ec0:	4605      	mov	r5, r0
   d6ec2:	2800      	cmp	r0, #0
   d6ec4:	d0f3      	beq.n	d6eae <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x26>
            return false;
        }
        if (activeHandlers_.size() == 1) {
   d6ec6:	6863      	ldr	r3, [r4, #4]
   d6ec8:	2b01      	cmp	r3, #1
   d6eca:	d101      	bne.n	d6ed0 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x48>
            setSystemCallbacks();
   d6ecc:	f7ff fd14 	bl	d68f8 <_ZN5spark10LogManager18setSystemCallbacksEv>
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
   d6ed0:	a801      	add	r0, sp, #4
   d6ed2:	f7ff fe1d 	bl	d6b10 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (activeHandlers_.size() == 1) {
            setSystemCallbacks();
        }
    }
    return true;
}
   d6ed6:	4628      	mov	r0, r5
   d6ed8:	b003      	add	sp, #12
   d6eda:	bd30      	pop	{r4, r5, pc}

000d6edc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d6edc:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d6ede:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6ee0:	4606      	mov	r6, r0
   d6ee2:	460c      	mov	r4, r1
   d6ee4:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d6ee6:	d914      	bls.n	d6f12 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   d6ee8:	4290      	cmp	r0, r2
   d6eea:	d213      	bcs.n	d6f14 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d6eec:	f1a2 0510 	sub.w	r5, r2, #16
            dest += end - p - 1;
   d6ef0:	1a6c      	subs	r4, r5, r1
   d6ef2:	f1a1 0710 	sub.w	r7, r1, #16
   d6ef6:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d6ef8:	42af      	cmp	r7, r5
   d6efa:	d018      	beq.n	d6f2e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   d6efc:	b11c      	cbz	r4, d6f06 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   d6efe:	4629      	mov	r1, r5
   d6f00:	4620      	mov	r0, r4
   d6f02:	f000 fe42 	bl	d7b8a <_ZN6StringC1EOS_>
                end->~T();
   d6f06:	4628      	mov	r0, r5
   d6f08:	f000 fe4f 	bl	d7baa <_ZN6StringD1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d6f0c:	3d10      	subs	r5, #16
   d6f0e:	3c10      	subs	r4, #16
   d6f10:	e7f2      	b.n	d6ef8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d6f12:	d00c      	beq.n	d6f2e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   d6f14:	42ac      	cmp	r4, r5
   d6f16:	d00a      	beq.n	d6f2e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   d6f18:	b11e      	cbz	r6, d6f22 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   d6f1a:	4621      	mov	r1, r4
   d6f1c:	4630      	mov	r0, r6
   d6f1e:	f000 fe34 	bl	d7b8a <_ZN6StringC1EOS_>
                p->~T();
   d6f22:	4620      	mov	r0, r4
   d6f24:	f000 fe41 	bl	d7baa <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d6f28:	3410      	adds	r4, #16
   d6f2a:	3610      	adds	r6, #16
   d6f2c:	e7f2      	b.n	d6f14 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
   d6f2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6f30 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d6f30:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d6f32:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d6f34:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d6f36:	dd0b      	ble.n	d6f50 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d6f38:	0130      	lsls	r0, r6, #4
   d6f3a:	f7fe f803 	bl	d4f44 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d6f3e:	4604      	mov	r4, r0
   d6f40:	b170      	cbz	r0, d6f60 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d6f42:	e895 0006 	ldmia.w	r5, {r1, r2}
   d6f46:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   d6f4a:	f7ff ffc7 	bl	d6edc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
   d6f4e:	e000      	b.n	d6f52 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d6f50:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d6f52:	6828      	ldr	r0, [r5, #0]
   d6f54:	f7fd fffe 	bl	d4f54 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d6f58:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d6f5a:	60ae      	str	r6, [r5, #8]
        return true;
   d6f5c:	2001      	movs	r0, #1
   d6f5e:	bd70      	pop	{r4, r5, r6, pc}
    }
   d6f60:	bd70      	pop	{r4, r5, r6, pc}

000d6f62 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:

spark::detail::LogFilter::LogFilter(LogLevel level) :
        level_(level) {
}

spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d6f62:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6f66:	2300      	movs	r3, #0
   d6f68:	b095      	sub	sp, #84	; 0x54
   d6f6a:	4692      	mov	sl, r2
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d6f6c:	2246      	movs	r2, #70	; 0x46
   d6f6e:	6003      	str	r3, [r0, #0]
   d6f70:	6043      	str	r3, [r0, #4]
   d6f72:	6083      	str	r3, [r0, #8]
   d6f74:	60c3      	str	r3, [r0, #12]
   d6f76:	6103      	str	r3, [r0, #16]
   d6f78:	6143      	str	r3, [r0, #20]
   d6f7a:	7602      	strb	r2, [r0, #24]

spark::detail::LogFilter::LogFilter(LogLevel level) :
        level_(level) {
}

spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d6f7c:	9102      	str	r1, [sp, #8]
   d6f7e:	f8da 1004 	ldr.w	r1, [sl, #4]
   d6f82:	9308      	str	r3, [sp, #32]
    return size_ == 0;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
    if (n > capacity_ && !realloc(n)) {
   d6f84:	4299      	cmp	r1, r3
   d6f86:	4605      	mov	r5, r0
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6f88:	9309      	str	r3, [sp, #36]	; 0x24
   d6f8a:	930a      	str	r3, [sp, #40]	; 0x28
    return size_ == 0;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
    if (n > capacity_ && !realloc(n)) {
   d6f8c:	f340 809d 	ble.w	d70ca <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x168>
   d6f90:	a808      	add	r0, sp, #32
   d6f92:	f7ff ffcd 	bl	d6f30 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d6f96:	2800      	cmp	r0, #0
   d6f98:	f040 8097 	bne.w	d70ca <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x168>
   d6f9c:	e08e      	b.n	d70bc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15a>
    Vector<String> cats;
    if (!cats.reserve(filters.size())) {
        return;
    }
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
   d6f9e:	4621      	mov	r1, r4
   d6fa0:	a80b      	add	r0, sp, #44	; 0x2c
   d6fa2:	f000 fdf2 	bl	d7b8a <_ZN6StringC1EOS_>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d6fa6:	a90b      	add	r1, sp, #44	; 0x2c
   d6fa8:	a80f      	add	r0, sp, #60	; 0x3c
   d6faa:	9e09      	ldr	r6, [sp, #36]	; 0x24
   d6fac:	f000 fded 	bl	d7b8a <_ZN6StringC1EOS_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6fb0:	9909      	ldr	r1, [sp, #36]	; 0x24
   d6fb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6fb4:	4299      	cmp	r1, r3
   d6fb6:	f2c0 80ce 	blt.w	d7156 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
   d6fba:	3101      	adds	r1, #1
   d6fbc:	a808      	add	r0, sp, #32
   d6fbe:	f7ff ffb7 	bl	d6f30 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d6fc2:	2800      	cmp	r0, #0
   d6fc4:	f040 80c7 	bne.w	d7156 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d6fc8:	a80f      	add	r0, sp, #60	; 0x3c
   d6fca:	f000 fdee 	bl	d7baa <_ZN6StringD1Ev>
   d6fce:	a80b      	add	r0, sp, #44	; 0x2c
   d6fd0:	f000 fdeb 	bl	d7baa <_ZN6StringD1Ev>
   d6fd4:	3414      	adds	r4, #20
    // Store category names
    Vector<String> cats;
    if (!cats.reserve(filters.size())) {
        return;
    }
    for (LogCategoryFilter &filter: filters) {
   d6fd6:	42a7      	cmp	r7, r4
   d6fd8:	d1e1      	bne.n	d6f9e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x3c>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6fda:	2600      	movs	r6, #0
   d6fdc:	960b      	str	r6, [sp, #44]	; 0x2c
   d6fde:	960c      	str	r6, [sp, #48]	; 0x30
   d6fe0:	960d      	str	r6, [sp, #52]	; 0x34
        if (!category) {
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d6fe2:	46b1      	mov	r9, r6
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
    for (int i = 0; i < cats.size(); ++i) {
   d6fe4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d6fe6:	429e      	cmp	r6, r3
   d6fe8:	f280 80a8 	bge.w	d713c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
   d6fec:	0133      	lsls	r3, r6, #4
   d6fee:	9a08      	ldr	r2, [sp, #32]
   d6ff0:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   d6ff2:	9306      	str	r3, [sp, #24]
        if (!category) {
   d6ff4:	2b00      	cmp	r3, #0
   d6ff6:	f000 809f 	beq.w	d7138 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d6>
   d6ffa:	2314      	movs	r3, #20
   d6ffc:	4373      	muls	r3, r6
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d6ffe:	f8cd 901c 	str.w	r9, [sp, #28]
   d7002:	9301      	str	r3, [sp, #4]
    for (int i = 0; i < cats.size(); ++i) {
        const char *category = cats.at(i).c_str();
        if (!category) {
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
   d7004:	ac0b      	add	r4, sp, #44	; 0x2c
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d7006:	a907      	add	r1, sp, #28
   d7008:	a806      	add	r0, sp, #24
   d700a:	f7ff fb30 	bl	d666e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d700e:	4607      	mov	r7, r0
   d7010:	2800      	cmp	r0, #0
   d7012:	f000 8091 	beq.w	d7138 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d6>
            bool found = false;
   d7016:	ab14      	add	r3, sp, #80	; 0x50
            const int index = nodeIndex(*pNodes, name, size, found);
   d7018:	4601      	mov	r1, r0
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d701a:	f803 9d39 	strb.w	r9, [r3, #-57]!
            const int index = nodeIndex(*pNodes, name, size, found);
   d701e:	9a07      	ldr	r2, [sp, #28]
   d7020:	4620      	mov	r0, r4
   d7022:	f7ff fb91 	bl	d6748 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d7026:	f89d 8017 	ldrb.w	r8, [sp, #23]
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
   d702a:	9000      	str	r0, [sp, #0]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d702c:	f1b8 0f00 	cmp.w	r8, #0
   d7030:	d153      	bne.n	d70da <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x178>
   d7032:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    Vector<Node> nodes; // Children nodes

    Node(const char *name, uint16_t size) :
            name(name),
            size(size),
            level(-1) {
   d7036:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
   d703a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d703e:	970f      	str	r7, [sp, #60]	; 0x3c
   d7040:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   d7044:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
   d7048:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
   d704c:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7050:	6867      	ldr	r7, [r4, #4]
   d7052:	68a3      	ldr	r3, [r4, #8]
   d7054:	429f      	cmp	r7, r3
   d7056:	da4f      	bge.n	d70f8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x196>
        return false;
    }
    T* const p = data_ + i;
   d7058:	9b00      	ldr	r3, [sp, #0]
   d705a:	f8d4 b000 	ldr.w	fp, [r4]
    move(p + 1, p, data_ + size_);
   d705e:	6861      	ldr	r1, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d7060:	2214      	movs	r2, #20
   d7062:	4353      	muls	r3, r2
   d7064:	eb0b 0703 	add.w	r7, fp, r3
    move(p + 1, p, data_ + size_);
   d7068:	fb02 b201 	mla	r2, r2, r1, fp
   d706c:	f107 0014 	add.w	r0, r7, #20
   d7070:	4639      	mov	r1, r7
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d7072:	9303      	str	r3, [sp, #12]
    move(p + 1, p, data_ + size_);
   d7074:	f7ff fe94 	bl	d6da0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   d7078:	b1a7      	cbz	r7, d70a4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x142>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d707a:	9b03      	ldr	r3, [sp, #12]
   d707c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   d707e:	f84b 2003 	str.w	r2, [fp, r3]
   d7082:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   d7086:	80bb      	strh	r3, [r7, #4]
   d7088:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
   d708c:	80fb      	strh	r3, [r7, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d708e:	f8c7 9008 	str.w	r9, [r7, #8]
   d7092:	f8c7 900c 	str.w	r9, [r7, #12]
   d7096:	f8c7 9010 	str.w	r9, [r7, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d709a:	a911      	add	r1, sp, #68	; 0x44
   d709c:	f107 0008 	add.w	r0, r7, #8
   d70a0:	f7ff fe67 	bl	d6d72 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
    ++size_;
   d70a4:	6863      	ldr	r3, [r4, #4]
   d70a6:	3301      	adds	r3, #1
   d70a8:	6063      	str	r3, [r4, #4]
   d70aa:	a811      	add	r0, sp, #68	; 0x44
   d70ac:	f7ff fcd6 	bl	d6a5c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d70b0:	f1b8 0f00 	cmp.w	r8, #0
   d70b4:	d011      	beq.n	d70da <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x178>
    }
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
   d70b6:	a80b      	add	r0, sp, #44	; 0x2c
   d70b8:	f7ff fcd0 	bl	d6a5c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d70bc:	a808      	add	r0, sp, #32
   d70be:	f7ff fce1 	bl	d6a84 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    }
    using std::swap;
    swap(cats_, cats);
    swap(nodes_, nodes);
    level_ = level;
}
   d70c2:	4628      	mov	r0, r5
   d70c4:	b015      	add	sp, #84	; 0x54
   d70c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d70ca:	f8da 4000 	ldr.w	r4, [sl]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d70ce:	f8da 3004 	ldr.w	r3, [sl, #4]
   d70d2:	2714      	movs	r7, #20
   d70d4:	fb07 4703 	mla	r7, r7, r3, r4
   d70d8:	e77d      	b.n	d6fd6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_[size_ - 1];
}

template<typename T, typename AllocatorT>
inline T& spark::Vector<T, AllocatorT>::at(int i) {
    return data_[i];
   d70da:	6823      	ldr	r3, [r4, #0]
   d70dc:	9a00      	ldr	r2, [sp, #0]
   d70de:	2414      	movs	r4, #20
   d70e0:	fb04 3402 	mla	r4, r4, r2, r3
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
                return;
            }
            Node &node = pNodes->at(index);
            if (!*category) { // Check if it's last subcategory
   d70e4:	9b06      	ldr	r3, [sp, #24]
   d70e6:	781b      	ldrb	r3, [r3, #0]
   d70e8:	bb23      	cbnz	r3, d7134 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d2>
                node.level = filters.at(i).level_;
   d70ea:	f8da 3000 	ldr.w	r3, [sl]
   d70ee:	9a01      	ldr	r2, [sp, #4]
   d70f0:	4413      	add	r3, r2
   d70f2:	7c1b      	ldrb	r3, [r3, #16]
   d70f4:	80e3      	strh	r3, [r4, #6]
   d70f6:	e01d      	b.n	d7134 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d2>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d70f8:	3701      	adds	r7, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d70fa:	2f00      	cmp	r7, #0
   d70fc:	dd0f      	ble.n	d711e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d70fe:	2314      	movs	r3, #20
   d7100:	fb03 f007 	mul.w	r0, r3, r7
   d7104:	9303      	str	r3, [sp, #12]
   d7106:	f7fd ff1d 	bl	d4f44 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d710a:	4683      	mov	fp, r0
   d710c:	b178      	cbz	r0, d712e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1cc>
                return false;
            }
            move(d, data_, data_ + size_);
   d710e:	e894 0006 	ldmia.w	r4, {r1, r2}
   d7112:	9b03      	ldr	r3, [sp, #12]
   d7114:	fb03 1202 	mla	r2, r3, r2, r1
   d7118:	f7ff fe42 	bl	d6da0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
   d711c:	e000      	b.n	d7120 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1be>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d711e:	46c3      	mov	fp, r8
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d7120:	6820      	ldr	r0, [r4, #0]
   d7122:	f7fd ff17 	bl	d4f54 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d7126:	f8c4 b000 	str.w	fp, [r4]
        capacity_ = n;
   d712a:	60a7      	str	r7, [r4, #8]
   d712c:	e794      	b.n	d7058 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xf6>
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d712e:	f04f 0801 	mov.w	r8, #1
   d7132:	e7ba      	b.n	d70aa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x148>
            }
            Node &node = pNodes->at(index);
            if (!*category) { // Check if it's last subcategory
                node.level = filters.at(i).level_;
            }
            pNodes = &node.nodes;
   d7134:	3408      	adds	r4, #8
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d7136:	e766      	b.n	d7006 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa4>
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
    for (int i = 0; i < cats.size(); ++i) {
   d7138:	3601      	adds	r6, #1
   d713a:	e753      	b.n	d6fe4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x82>
            }
            pNodes = &node.nodes;
        }
    }
    using std::swap;
    swap(cats_, cats);
   d713c:	a908      	add	r1, sp, #32
   d713e:	4628      	mov	r0, r5
   d7140:	f7ff fe17 	bl	d6d72 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
    swap(nodes_, nodes);
   d7144:	a90b      	add	r1, sp, #44	; 0x2c
   d7146:	f105 000c 	add.w	r0, r5, #12
   d714a:	f7ff fe12 	bl	d6d72 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
    level_ = level;
   d714e:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d7152:	762b      	strb	r3, [r5, #24]
   d7154:	e7af      	b.n	d70b6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x154>
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d7156:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   d7158:	9a09      	ldr	r2, [sp, #36]	; 0x24
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d715a:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   d715e:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   d7162:	4631      	mov	r1, r6
   d7164:	f106 0010 	add.w	r0, r6, #16
   d7168:	f7ff feb8 	bl	d6edc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   d716c:	b11e      	cbz	r6, d7176 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x214>
   d716e:	a90f      	add	r1, sp, #60	; 0x3c
   d7170:	4630      	mov	r0, r6
   d7172:	f000 fd0a 	bl	d7b8a <_ZN6StringC1EOS_>
    ++size_;
   d7176:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d7178:	3301      	adds	r3, #1
   d717a:	9309      	str	r3, [sp, #36]	; 0x24
   d717c:	e724      	b.n	d6fc8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x66>
	...

000d7180 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
// spark::LogHandler
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d7180:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
   d7182:	4604      	mov	r4, r0
   d7184:	4b09      	ldr	r3, [pc, #36]	; (d71ac <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
   d7186:	f844 3b04 	str.w	r3, [r4], #4
// spark::LogHandler
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d718a:	4605      	mov	r5, r0
   d718c:	460e      	mov	r6, r1
        filter_(level, filters) {
   d718e:	a801      	add	r0, sp, #4
   d7190:	4611      	mov	r1, r2
   d7192:	f7fd fa4f 	bl	d4634 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d7196:	aa01      	add	r2, sp, #4
   d7198:	4631      	mov	r1, r6
   d719a:	4620      	mov	r0, r4
   d719c:	f7ff fee1 	bl	d6f62 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d71a0:	a801      	add	r0, sp, #4
   d71a2:	f7fd f8e3 	bl	d436c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   d71a6:	4628      	mov	r0, r5
   d71a8:	b004      	add	sp, #16
   d71aa:	bd70      	pop	{r4, r5, r6, pc}
   d71ac:	000d8fc8 	.word	0x000d8fc8

000d71b0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d71b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d71b2:	460f      	mov	r7, r1
   d71b4:	b08b      	sub	sp, #44	; 0x2c
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d71b6:	492b      	ldr	r1, [pc, #172]	; (d7264 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb4>)

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d71b8:	9c10      	ldr	r4, [sp, #64]	; 0x40
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d71ba:	4638      	mov	r0, r7

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d71bc:	4616      	mov	r6, r2
   d71be:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d71c0:	f001 fe1e 	bl	d8e00 <strcmp>
   d71c4:	bb28      	cbnz	r0, d7212 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x62>
        if (!stream) {
   d71c6:	2c00      	cmp	r4, #0
   d71c8:	d049      	beq.n	d725e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xae>
            return nullptr; // Output stream is not specified
        }
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   d71ca:	4629      	mov	r1, r5
   d71cc:	a801      	add	r0, sp, #4
   d71ce:	f7ff fddd 	bl	d6d8c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d71d2:	4925      	ldr	r1, [pc, #148]	; (d7268 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb8>)
   d71d4:	2024      	movs	r0, #36	; 0x24
   d71d6:	f000 ffbb 	bl	d8150 <_ZnwjRKSt9nothrow_t>
   d71da:	4605      	mov	r5, r0
   d71dc:	b1b8      	cbz	r0, d720e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x5e>
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
public:
    using StreamLogHandler::StreamLogHandler;
   d71de:	a901      	add	r1, sp, #4
   d71e0:	a804      	add	r0, sp, #16
   d71e2:	f7ff fdd3 	bl	d6d8c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d71e6:	a904      	add	r1, sp, #16
   d71e8:	a807      	add	r0, sp, #28
   d71ea:	f7fd fa23 	bl	d4634 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d71ee:	aa07      	add	r2, sp, #28
   d71f0:	4631      	mov	r1, r6
   d71f2:	4628      	mov	r0, r5
   d71f4:	f7ff ffc4 	bl	d7180 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d71f8:	a807      	add	r0, sp, #28
   d71fa:	f7fd f8b7 	bl	d436c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d71fe:	4b1b      	ldr	r3, [pc, #108]	; (d726c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xbc>)
   d7200:	602b      	str	r3, [r5, #0]
   d7202:	622c      	str	r4, [r5, #32]
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
public:
    using StreamLogHandler::StreamLogHandler;
   d7204:	a804      	add	r0, sp, #16
   d7206:	f7fd f8b1 	bl	d436c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d720a:	4b19      	ldr	r3, [pc, #100]	; (d7270 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xc0>)
   d720c:	602b      	str	r3, [r5, #0]
   d720e:	a801      	add	r0, sp, #4
   d7210:	e01f      	b.n	d7252 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa2>
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   d7212:	4918      	ldr	r1, [pc, #96]	; (d7274 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xc4>)
   d7214:	4638      	mov	r0, r7
   d7216:	f001 fdf3 	bl	d8e00 <strcmp>
   d721a:	b9f0      	cbnz	r0, d725a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xaa>
        if (!stream) {
   d721c:	b1fc      	cbz	r4, d725e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xae>
            return nullptr;
        }
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d721e:	4629      	mov	r1, r5
   d7220:	a804      	add	r0, sp, #16
   d7222:	f7ff fdb3 	bl	d6d8c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d7226:	4910      	ldr	r1, [pc, #64]	; (d7268 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb8>)
   d7228:	2024      	movs	r0, #36	; 0x24
   d722a:	f000 ff91 	bl	d8150 <_ZnwjRKSt9nothrow_t>
   d722e:	4605      	mov	r5, r0
   d7230:	b170      	cbz	r0, d7250 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d7232:	a904      	add	r1, sp, #16
   d7234:	a807      	add	r0, sp, #28
   d7236:	f7fd f9fd 	bl	d4634 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d723a:	aa07      	add	r2, sp, #28
   d723c:	4631      	mov	r1, r6
   d723e:	4628      	mov	r0, r5
   d7240:	f7ff ff9e 	bl	d7180 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d7244:	a807      	add	r0, sp, #28
   d7246:	f7fd f891 	bl	d436c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d724a:	4b08      	ldr	r3, [pc, #32]	; (d726c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xbc>)
   d724c:	602b      	str	r3, [r5, #0]
   d724e:	622c      	str	r4, [r5, #32]
   d7250:	a804      	add	r0, sp, #16
   d7252:	f7fd f88b 	bl	d436c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d7256:	4628      	mov	r0, r5
   d7258:	e002      	b.n	d7260 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>
// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
        if (!stream) {
            return nullptr; // Output stream is not specified
   d725a:	2000      	movs	r0, #0
   d725c:	e000      	b.n	d7260 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>
   d725e:	4620      	mov	r0, r4
            return nullptr;
        }
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
    }
    return nullptr; // Unknown handler type
}
   d7260:	b00b      	add	sp, #44	; 0x2c
   d7262:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7264:	000d94d2 	.word	0x000d94d2
   d7268:	000d96bc 	.word	0x000d96bc
   d726c:	000d955c 	.word	0x000d955c
   d7270:	000d944c 	.word	0x000d944c
   d7274:	000d94d6 	.word	0x000d94d6

000d7278 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d7278:	4b01      	ldr	r3, [pc, #4]	; (d7280 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d727a:	4a02      	ldr	r2, [pc, #8]	; (d7284 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d727c:	601a      	str	r2, [r3, #0]
   d727e:	4770      	bx	lr
   d7280:	2003e3d0 	.word	0x2003e3d0
   d7284:	000d94e7 	.word	0x000d94e7

000d7288 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d7288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d728c:	9d08      	ldr	r5, [sp, #32]
    // TODO: Move this check to a base class (see also JSONStreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (stream_ == &Serial && Network.listening()) {
   d728e:	f8d0 9020 	ldr.w	r9, [r0, #32]
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d7292:	4604      	mov	r4, r0
   d7294:	460e      	mov	r6, r1
   d7296:	4617      	mov	r7, r2
   d7298:	4698      	mov	r8, r3
    // TODO: Move this check to a base class (see also JSONStreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (stream_ == &Serial && Network.listening()) {
   d729a:	f000 fe15 	bl	d7ec8 <_Z16_fetch_usbserialv>
   d729e:	4581      	cmp	r9, r0
   d72a0:	d105      	bne.n	d72ae <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x26>
   d72a2:	485a      	ldr	r0, [pc, #360]	; (d740c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   d72a4:	f000 fa67 	bl	d7776 <_ZN5spark12NetworkClass9listeningEv>
   d72a8:	2800      	cmp	r0, #0
   d72aa:	f040 80ac 	bne.w	d7406 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17e>
        return; // Do not mix logging and serial console output
    }
#endif
    const char *s = nullptr;
    // Timestamp
    if (attr.has_time) {
   d72ae:	792b      	ldrb	r3, [r5, #4]
   d72b0:	071b      	lsls	r3, r3, #28
   d72b2:	d505      	bpl.n	d72c0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x38>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d72b4:	696b      	ldr	r3, [r5, #20]
   d72b6:	4a56      	ldr	r2, [pc, #344]	; (d7410 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   d72b8:	6a20      	ldr	r0, [r4, #32]
   d72ba:	2100      	movs	r1, #0
   d72bc:	f000 fb34 	bl	d7928 <_ZN5Print11printf_implEbPKcz>
        printf("%010u ", (unsigned)attr.time);
    }
    // Category
    if (category) {
   d72c0:	f1b8 0f00 	cmp.w	r8, #0
   d72c4:	d00d      	beq.n	d72e2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x5a>
        write('[');
   d72c6:	215b      	movs	r1, #91	; 0x5b
   d72c8:	4620      	mov	r0, r4
   d72ca:	f7ff fa32 	bl	d6732 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   d72ce:	4641      	mov	r1, r8
   d72d0:	4620      	mov	r0, r4
   d72d2:	f7ff fa20 	bl	d6716 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   d72d6:	6823      	ldr	r3, [r4, #0]
   d72d8:	494e      	ldr	r1, [pc, #312]	; (d7414 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   d72da:	68db      	ldr	r3, [r3, #12]
   d72dc:	2202      	movs	r2, #2
   d72de:	4620      	mov	r0, r4
   d72e0:	4798      	blx	r3
    }
    // Source file
    if (attr.has_file) {
   d72e2:	792b      	ldrb	r3, [r5, #4]
   d72e4:	07d9      	lsls	r1, r3, #31
   d72e6:	d525      	bpl.n	d7334 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xac>
        s = extractFileName(attr.file); // Strip directory path
   d72e8:	f8d5 8008 	ldr.w	r8, [r5, #8]
    }
    return nullptr;
}

const char* extractFileName(const char *s) {
    const char *s1 = strrchr(s, '/');
   d72ec:	212f      	movs	r1, #47	; 0x2f
   d72ee:	4640      	mov	r0, r8
   d72f0:	f001 fdb9 	bl	d8e66 <strrchr>
    if (s1) {
   d72f4:	b108      	cbz	r0, d72fa <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x72>
        return s1 + 1;
   d72f6:	f100 0801 	add.w	r8, r0, #1
        write("] ", 2);
    }
    // Source file
    if (attr.has_file) {
        s = extractFileName(attr.file); // Strip directory path
        write(s); // File name
   d72fa:	4641      	mov	r1, r8
   d72fc:	4620      	mov	r0, r4
   d72fe:	f7ff fa0a 	bl	d6716 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   d7302:	792b      	ldrb	r3, [r5, #4]
   d7304:	079a      	lsls	r2, r3, #30
   d7306:	d509      	bpl.n	d731c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x94>
            write(':');
   d7308:	213a      	movs	r1, #58	; 0x3a
   d730a:	4620      	mov	r0, r4
   d730c:	f7ff fa11 	bl	d6732 <_ZN5spark16StreamLogHandler5writeEc>
   d7310:	68eb      	ldr	r3, [r5, #12]
   d7312:	4a41      	ldr	r2, [pc, #260]	; (d7418 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   d7314:	6a20      	ldr	r0, [r4, #32]
   d7316:	2100      	movs	r1, #0
   d7318:	f000 fb06 	bl	d7928 <_ZN5Print11printf_implEbPKcz>
            printf("%d", (int)attr.line); // Line number
        }
        if (attr.has_function) {
   d731c:	792b      	ldrb	r3, [r5, #4]
   d731e:	f013 0f04 	tst.w	r3, #4
   d7322:	6823      	ldr	r3, [r4, #0]
            write(", ", 2);
   d7324:	bf18      	it	ne
   d7326:	493d      	ldrne	r1, [pc, #244]	; (d741c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   d7328:	68db      	ldr	r3, [r3, #12]
        } else {
            write(": ", 2);
   d732a:	bf08      	it	eq
   d732c:	493c      	ldreq	r1, [pc, #240]	; (d7420 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
        if (attr.has_line) {
            write(':');
            printf("%d", (int)attr.line); // Line number
        }
        if (attr.has_function) {
            write(", ", 2);
   d732e:	2202      	movs	r2, #2
        } else {
            write(": ", 2);
   d7330:	4620      	mov	r0, r4
   d7332:	4798      	blx	r3
        }
    }
    // Function name
    if (attr.has_function) {
   d7334:	792b      	ldrb	r3, [r5, #4]
   d7336:	075b      	lsls	r3, r3, #29
   d7338:	d518      	bpl.n	d736c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe4>
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d733a:	6929      	ldr	r1, [r5, #16]
   d733c:	460a      	mov	r2, r1
    return s;
}

const char* extractFuncName(const char *s, size_t *size) {
    const char *s1 = s;
    for (; *s; ++s) {
   d733e:	4613      	mov	r3, r2
   d7340:	f813 0b01 	ldrb.w	r0, [r3], #1
   d7344:	b138      	cbz	r0, d7356 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xce>
        if (*s == ' ') {
   d7346:	2820      	cmp	r0, #32
   d7348:	d101      	bne.n	d734e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
            s1 = s + 1; // Skip return type
   d734a:	4619      	mov	r1, r3
   d734c:	e001      	b.n	d7352 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xca>
        } else if (*s == '(') {
   d734e:	2828      	cmp	r0, #40	; 0x28
   d7350:	d001      	beq.n	d7356 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xce>
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d7352:	461a      	mov	r2, r3
   d7354:	e7f3      	b.n	d733e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    }
    // Function name
    if (attr.has_function) {
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
        write(s, n);
   d7356:	6823      	ldr	r3, [r4, #0]
   d7358:	1a52      	subs	r2, r2, r1
   d735a:	68db      	ldr	r3, [r3, #12]
   d735c:	4620      	mov	r0, r4
   d735e:	4798      	blx	r3
        write("(): ", 4);
   d7360:	6823      	ldr	r3, [r4, #0]
   d7362:	4930      	ldr	r1, [pc, #192]	; (d7424 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   d7364:	68db      	ldr	r3, [r3, #12]
   d7366:	2204      	movs	r2, #4
   d7368:	4620      	mov	r0, r4
   d736a:	4798      	blx	r3
inline LogLevel spark::LogHandler::level(const char *category) const {
    return filter_.level(category);
}

inline const char* spark::LogHandler::levelName(LogLevel level) {
    return log_level_name(level, nullptr);
   d736c:	2100      	movs	r1, #0
   d736e:	4638      	mov	r0, r7
   d7370:	f7fd fd54 	bl	d4e1c <log_level_name>
    }
    // Level
    s = levelName(level);
    write(s);
   d7374:	4601      	mov	r1, r0
   d7376:	4620      	mov	r0, r4
   d7378:	f7ff f9cd 	bl	d6716 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   d737c:	6823      	ldr	r3, [r4, #0]
   d737e:	4928      	ldr	r1, [pc, #160]	; (d7420 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   d7380:	68db      	ldr	r3, [r3, #12]
   d7382:	2202      	movs	r2, #2
   d7384:	4620      	mov	r0, r4
   d7386:	4798      	blx	r3
    // Message
    if (msg) {
   d7388:	b11e      	cbz	r6, d7392 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x10a>
        write(msg);
   d738a:	4631      	mov	r1, r6
   d738c:	4620      	mov	r0, r4
   d738e:	f7ff f9c2 	bl	d6716 <_ZN5spark16StreamLogHandler5writeEPKc>
    }
    // Additional attributes
    if (attr.has_code || attr.has_details) {
   d7392:	792b      	ldrb	r3, [r5, #4]
   d7394:	f013 0f30 	tst.w	r3, #48	; 0x30
   d7398:	d02d      	beq.n	d73f6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16e>
        write(" [", 2);
   d739a:	6823      	ldr	r3, [r4, #0]
   d739c:	4922      	ldr	r1, [pc, #136]	; (d7428 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   d739e:	68db      	ldr	r3, [r3, #12]
   d73a0:	4620      	mov	r0, r4
   d73a2:	2202      	movs	r2, #2
   d73a4:	4798      	blx	r3
        // Code
        if (attr.has_code) {
   d73a6:	792b      	ldrb	r3, [r5, #4]
   d73a8:	06d8      	lsls	r0, r3, #27
   d73aa:	d50b      	bpl.n	d73c4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
            write("code = ", 7);
   d73ac:	6823      	ldr	r3, [r4, #0]
   d73ae:	491f      	ldr	r1, [pc, #124]	; (d742c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
   d73b0:	68db      	ldr	r3, [r3, #12]
   d73b2:	2207      	movs	r2, #7
   d73b4:	4620      	mov	r0, r4
   d73b6:	4798      	blx	r3
   d73b8:	69ab      	ldr	r3, [r5, #24]
   d73ba:	4a1d      	ldr	r2, [pc, #116]	; (d7430 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a8>)
   d73bc:	6a20      	ldr	r0, [r4, #32]
   d73be:	2100      	movs	r1, #0
   d73c0:	f000 fab2 	bl	d7928 <_ZN5Print11printf_implEbPKcz>
            printf("%" PRIiPTR, (intptr_t)attr.code);
        }
        // Details
        if (attr.has_details) {
   d73c4:	792b      	ldrb	r3, [r5, #4]
   d73c6:	0699      	lsls	r1, r3, #26
   d73c8:	d511      	bpl.n	d73ee <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
            if (attr.has_code) {
   d73ca:	06da      	lsls	r2, r3, #27
   d73cc:	d505      	bpl.n	d73da <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x152>
                write(", ", 2);
   d73ce:	6823      	ldr	r3, [r4, #0]
   d73d0:	4912      	ldr	r1, [pc, #72]	; (d741c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   d73d2:	68db      	ldr	r3, [r3, #12]
   d73d4:	2202      	movs	r2, #2
   d73d6:	4620      	mov	r0, r4
   d73d8:	4798      	blx	r3
            }
            write("details = ", 10);
   d73da:	6823      	ldr	r3, [r4, #0]
   d73dc:	4915      	ldr	r1, [pc, #84]	; (d7434 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1ac>)
   d73de:	68db      	ldr	r3, [r3, #12]
   d73e0:	4620      	mov	r0, r4
   d73e2:	220a      	movs	r2, #10
   d73e4:	4798      	blx	r3
            write(attr.details);
   d73e6:	69e9      	ldr	r1, [r5, #28]
   d73e8:	4620      	mov	r0, r4
   d73ea:	f7ff f994 	bl	d6716 <_ZN5spark16StreamLogHandler5writeEPKc>
        }
        write(']');
   d73ee:	215d      	movs	r1, #93	; 0x5d
   d73f0:	4620      	mov	r0, r4
   d73f2:	f7ff f99e 	bl	d6732 <_ZN5spark16StreamLogHandler5writeEc>
    }
    write("\r\n", 2);
   d73f6:	6823      	ldr	r3, [r4, #0]
   d73f8:	490f      	ldr	r1, [pc, #60]	; (d7438 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1b0>)
   d73fa:	68db      	ldr	r3, [r3, #12]
   d73fc:	4620      	mov	r0, r4
   d73fe:	2202      	movs	r2, #2
}
   d7400:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            write("details = ", 10);
            write(attr.details);
        }
        write(']');
    }
    write("\r\n", 2);
   d7404:	4718      	bx	r3
   d7406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d740a:	bf00      	nop
   d740c:	2003e5a8 	.word	0x2003e5a8
   d7410:	000d94eb 	.word	0x000d94eb
   d7414:	000d94f2 	.word	0x000d94f2
   d7418:	000d941b 	.word	0x000d941b
   d741c:	000d94f5 	.word	0x000d94f5
   d7420:	000d94fa 	.word	0x000d94fa
   d7424:	000d94f8 	.word	0x000d94f8
   d7428:	000d94fd 	.word	0x000d94fd
   d742c:	000d9500 	.word	0x000d9500
   d7430:	000d9508 	.word	0x000d9508
   d7434:	000d950b 	.word	0x000d950b
   d7438:	000d9516 	.word	0x000d9516

000d743c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
}

// spark::JSONStreamLogHandler
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d743c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7440:	b085      	sub	sp, #20
   d7442:	f8d0 8020 	ldr.w	r8, [r0, #32]
   d7446:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   d7448:	4606      	mov	r6, r0
   d744a:	460f      	mov	r7, r1
   d744c:	4691      	mov	r9, r2
   d744e:	461d      	mov	r5, r3
    // TODO: Move this check to a base class (see also StreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (this->stream() == &Serial && Network.listening()) {
   d7450:	f000 fd3a 	bl	d7ec8 <_Z16_fetch_usbserialv>
   d7454:	4580      	cmp	r8, r0
   d7456:	d105      	bne.n	d7464 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   d7458:	484a      	ldr	r0, [pc, #296]	; (d7584 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   d745a:	f000 f98c 	bl	d7776 <_ZN5spark12NetworkClass9listeningEv>
   d745e:	2800      	cmp	r0, #0
   d7460:	f040 808c 	bne.w	d757c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x140>
   d7464:	6a33      	ldr	r3, [r6, #32]
    write(&c, 1);
}

// spark::JSONStreamWriter
inline spark::JSONStreamWriter::JSONStreamWriter(Print &stream) :
        strm_(stream) {
   d7466:	4a48      	ldr	r2, [pc, #288]	; (d7588 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   d7468:	9201      	str	r2, [sp, #4]
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
   d746a:	f04f 0800 	mov.w	r8, #0
        return; // Do not mix logging and serial console output
    }
#endif
    JSONStreamWriter json(*this->stream());
    json.beginObject();
   d746e:	a801      	add	r0, sp, #4
    write(&c, 1);
}

// spark::JSONStreamWriter
inline spark::JSONStreamWriter::JSONStreamWriter(Print &stream) :
        strm_(stream) {
   d7470:	9303      	str	r3, [sp, #12]
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
   d7472:	f88d 8008 	strb.w	r8, [sp, #8]
   d7476:	f7fe fff0 	bl	d645a <_ZN5spark10JSONWriter11beginObjectEv>
   d747a:	4641      	mov	r1, r8
   d747c:	4648      	mov	r0, r9
   d747e:	f7fd fccd 	bl	d4e1c <log_level_name>
    // Level
    const char *s = levelName(level);
    json.name("l", 1).value(s);
   d7482:	4942      	ldr	r1, [pc, #264]	; (d758c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   d7484:	4680      	mov	r8, r0
   d7486:	2201      	movs	r2, #1
   d7488:	a801      	add	r0, sp, #4
   d748a:	f7ff f86b 	bl	d6564 <_ZN5spark10JSONWriter4nameEPKcj>
   d748e:	4641      	mov	r1, r8
   d7490:	f7ff f931 	bl	d66f6 <_ZN5spark10JSONWriter5valueEPKc>
    // Message
    if (msg) {
   d7494:	b13f      	cbz	r7, d74a6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   d7496:	493e      	ldr	r1, [pc, #248]	; (d7590 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   d7498:	2201      	movs	r2, #1
   d749a:	a801      	add	r0, sp, #4
   d749c:	f7ff f862 	bl	d6564 <_ZN5spark10JSONWriter4nameEPKcj>
   d74a0:	4639      	mov	r1, r7
   d74a2:	f7ff f928 	bl	d66f6 <_ZN5spark10JSONWriter5valueEPKc>
    }
    // Category
    if (category) {
   d74a6:	b13d      	cbz	r5, d74b8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   d74a8:	493a      	ldr	r1, [pc, #232]	; (d7594 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   d74aa:	2201      	movs	r2, #1
   d74ac:	a801      	add	r0, sp, #4
   d74ae:	f7ff f859 	bl	d6564 <_ZN5spark10JSONWriter4nameEPKcj>
   d74b2:	4629      	mov	r1, r5
   d74b4:	f7ff f91f 	bl	d66f6 <_ZN5spark10JSONWriter5valueEPKc>
    }
    // File name
    if (attr.has_file) {
   d74b8:	7923      	ldrb	r3, [r4, #4]
   d74ba:	07df      	lsls	r7, r3, #31
   d74bc:	d50e      	bpl.n	d74dc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   d74be:	68a5      	ldr	r5, [r4, #8]
    }
    return nullptr;
}

const char* extractFileName(const char *s) {
    const char *s1 = strrchr(s, '/');
   d74c0:	212f      	movs	r1, #47	; 0x2f
   d74c2:	4628      	mov	r0, r5
   d74c4:	f001 fccf 	bl	d8e66 <strrchr>
    if (s1) {
   d74c8:	b100      	cbz	r0, d74cc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   d74ca:	1c45      	adds	r5, r0, #1
        json.name("c", 1).value(category);
    }
    // File name
    if (attr.has_file) {
        s = extractFileName(attr.file); // Strip directory path
        json.name("f", 1).value(s);
   d74cc:	4932      	ldr	r1, [pc, #200]	; (d7598 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   d74ce:	2201      	movs	r2, #1
   d74d0:	a801      	add	r0, sp, #4
   d74d2:	f7ff f847 	bl	d6564 <_ZN5spark10JSONWriter4nameEPKcj>
   d74d6:	4629      	mov	r1, r5
   d74d8:	f7ff f90d 	bl	d66f6 <_ZN5spark10JSONWriter5valueEPKc>
    }
    // Line number
    if (attr.has_line) {
   d74dc:	7923      	ldrb	r3, [r4, #4]
   d74de:	079d      	lsls	r5, r3, #30
   d74e0:	d507      	bpl.n	d74f2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   d74e2:	492e      	ldr	r1, [pc, #184]	; (d759c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   d74e4:	2202      	movs	r2, #2
   d74e6:	a801      	add	r0, sp, #4
   d74e8:	f7ff f83c 	bl	d6564 <_ZN5spark10JSONWriter4nameEPKcj>
   d74ec:	68e1      	ldr	r1, [r4, #12]
   d74ee:	f7fe ffc1 	bl	d6474 <_ZN5spark10JSONWriter5valueEi>
    }
    // Function name
    if (attr.has_function) {
   d74f2:	7923      	ldrb	r3, [r4, #4]
   d74f4:	0758      	lsls	r0, r3, #29
   d74f6:	d516      	bpl.n	d7526 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xea>
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d74f8:	6925      	ldr	r5, [r4, #16]
   d74fa:	462f      	mov	r7, r5
    return s;
}

const char* extractFuncName(const char *s, size_t *size) {
    const char *s1 = s;
    for (; *s; ++s) {
   d74fc:	463b      	mov	r3, r7
   d74fe:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7502:	b13a      	cbz	r2, d7514 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd8>
        if (*s == ' ') {
   d7504:	2a20      	cmp	r2, #32
   d7506:	d101      	bne.n	d750c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   d7508:	461d      	mov	r5, r3
   d750a:	e001      	b.n	d7510 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        } else if (*s == '(') {
   d750c:	2a28      	cmp	r2, #40	; 0x28
   d750e:	d001      	beq.n	d7514 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd8>
    }
    write("\r\n", 2);
}

// spark::JSONStreamLogHandler
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d7510:	461f      	mov	r7, r3
   d7512:	e7f3      	b.n	d74fc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
    }
    // Function name
    if (attr.has_function) {
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
        json.name("fn", 2).value(s, n);
   d7514:	2202      	movs	r2, #2
   d7516:	4922      	ldr	r1, [pc, #136]	; (d75a0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   d7518:	a801      	add	r0, sp, #4
   d751a:	f7ff f823 	bl	d6564 <_ZN5spark10JSONWriter4nameEPKcj>
   d751e:	1b7a      	subs	r2, r7, r5
   d7520:	4629      	mov	r1, r5
   d7522:	f7ff f82e 	bl	d6582 <_ZN5spark10JSONWriter5valueEPKcj>
    }
    // Timestamp
    if (attr.has_time) {
   d7526:	7923      	ldrb	r3, [r4, #4]
   d7528:	0719      	lsls	r1, r3, #28
   d752a:	d507      	bpl.n	d753c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x100>
        json.name("t", 1).value((unsigned)attr.time);
   d752c:	491d      	ldr	r1, [pc, #116]	; (d75a4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   d752e:	2201      	movs	r2, #1
   d7530:	a801      	add	r0, sp, #4
   d7532:	f7ff f817 	bl	d6564 <_ZN5spark10JSONWriter4nameEPKcj>
   d7536:	6961      	ldr	r1, [r4, #20]
   d7538:	f7fe ffae 	bl	d6498 <_ZN5spark10JSONWriter5valueEj>
    }
    // Code (additional attribute)
    if (attr.has_code) {
   d753c:	7923      	ldrb	r3, [r4, #4]
   d753e:	06da      	lsls	r2, r3, #27
   d7540:	d508      	bpl.n	d7554 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x118>
        json.name("code", 4).value((int)attr.code);
   d7542:	2204      	movs	r2, #4
   d7544:	4918      	ldr	r1, [pc, #96]	; (d75a8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   d7546:	eb0d 0002 	add.w	r0, sp, r2
   d754a:	f7ff f80b 	bl	d6564 <_ZN5spark10JSONWriter4nameEPKcj>
   d754e:	69a1      	ldr	r1, [r4, #24]
   d7550:	f7fe ff90 	bl	d6474 <_ZN5spark10JSONWriter5valueEi>
    }
    // Details (additional attribute)
    if (attr.has_details) {
   d7554:	7923      	ldrb	r3, [r4, #4]
   d7556:	069b      	lsls	r3, r3, #26
   d7558:	d507      	bpl.n	d756a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12e>
        json.name("detail", 6).value(attr.details);
   d755a:	4914      	ldr	r1, [pc, #80]	; (d75ac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   d755c:	2206      	movs	r2, #6
   d755e:	a801      	add	r0, sp, #4
   d7560:	f7ff f800 	bl	d6564 <_ZN5spark10JSONWriter4nameEPKcj>
   d7564:	69e1      	ldr	r1, [r4, #28]
   d7566:	f7ff f8c6 	bl	d66f6 <_ZN5spark10JSONWriter5valueEPKc>
    }
    json.endObject();
   d756a:	a801      	add	r0, sp, #4
   d756c:	f7fe ff5f 	bl	d642e <_ZN5spark10JSONWriter9endObjectEv>
   d7570:	6a30      	ldr	r0, [r6, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   d7572:	490f      	ldr	r1, [pc, #60]	; (d75b0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   d7574:	6803      	ldr	r3, [r0, #0]
   d7576:	2202      	movs	r2, #2
   d7578:	68db      	ldr	r3, [r3, #12]
   d757a:	4798      	blx	r3
}
   d757c:	b005      	add	sp, #20
   d757e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d7582:	bf00      	nop
   d7584:	2003e5a8 	.word	0x2003e5a8
   d7588:	000d9434 	.word	0x000d9434
   d758c:	000d947e 	.word	0x000d947e
   d7590:	000d9491 	.word	0x000d9491
   d7594:	000d9090 	.word	0x000d9090
   d7598:	000d9519 	.word	0x000d9519
   d759c:	000d951b 	.word	0x000d951b
   d75a0:	000d951e 	.word	0x000d951e
   d75a4:	000d9073 	.word	0x000d9073
   d75a8:	000d9521 	.word	0x000d9521
   d75ac:	000d9526 	.word	0x000d9526
   d75b0:	000d9516 	.word	0x000d9516

000d75b4 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d75b4:	2200      	movs	r2, #0
   d75b6:	4611      	mov	r1, r2
   d75b8:	6840      	ldr	r0, [r0, #4]
   d75ba:	f7fd bcab 	b.w	d4f14 <network_listening>

000d75be <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d75be:	2200      	movs	r2, #0
   d75c0:	4611      	mov	r1, r2
   d75c2:	6840      	ldr	r0, [r0, #4]
   d75c4:	f7fd bcb6 	b.w	d4f34 <network_get_listen_timeout>

000d75c8 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d75c8:	2200      	movs	r2, #0
   d75ca:	6840      	ldr	r0, [r0, #4]
   d75cc:	f7fd bcaa 	b.w	d4f24 <network_set_listen_timeout>

000d75d0 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d75d0:	2200      	movs	r2, #0
   d75d2:	f081 0101 	eor.w	r1, r1, #1
   d75d6:	6840      	ldr	r0, [r0, #4]
   d75d8:	f7fd bc94 	b.w	d4f04 <network_listen>

000d75dc <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d75dc:	2300      	movs	r3, #0
   d75de:	461a      	mov	r2, r3
   d75e0:	2101      	movs	r1, #1
   d75e2:	6840      	ldr	r0, [r0, #4]
   d75e4:	f7fd bc86 	b.w	d4ef4 <network_off>

000d75e8 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d75e8:	2300      	movs	r3, #0
   d75ea:	461a      	mov	r2, r3
   d75ec:	4619      	mov	r1, r3
   d75ee:	6840      	ldr	r0, [r0, #4]
   d75f0:	f7fd bc78 	b.w	d4ee4 <network_on>

000d75f4 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d75f4:	2200      	movs	r2, #0
   d75f6:	4611      	mov	r1, r2
   d75f8:	6840      	ldr	r0, [r0, #4]
   d75fa:	f7fd bc6b 	b.w	d4ed4 <network_ready>

000d75fe <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d75fe:	2200      	movs	r2, #0
   d7600:	4611      	mov	r1, r2
   d7602:	6840      	ldr	r0, [r0, #4]
   d7604:	f7fd bc56 	b.w	d4eb4 <network_connecting>

000d7608 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7608:	2200      	movs	r2, #0
   d760a:	2102      	movs	r1, #2
   d760c:	6840      	ldr	r0, [r0, #4]
   d760e:	f7fd bc59 	b.w	d4ec4 <network_disconnect>

000d7612 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d7612:	2300      	movs	r3, #0
   d7614:	461a      	mov	r2, r3
   d7616:	6840      	ldr	r0, [r0, #4]
   d7618:	f7fd bc44 	b.w	d4ea4 <network_connect>

000d761c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d761c:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d761e:	4605      	mov	r5, r0
   d7620:	b188      	cbz	r0, d7646 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7622:	6804      	ldr	r4, [r0, #0]
   d7624:	b14c      	cbz	r4, d763a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d7626:	68a3      	ldr	r3, [r4, #8]
   d7628:	b11b      	cbz	r3, d7632 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d762a:	2203      	movs	r2, #3
   d762c:	4621      	mov	r1, r4
   d762e:	4620      	mov	r0, r4
   d7630:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7632:	2110      	movs	r1, #16
   d7634:	4620      	mov	r0, r4
   d7636:	f000 fd80 	bl	d813a <_ZdlPvj>
   d763a:	4628      	mov	r0, r5
   d763c:	2114      	movs	r1, #20
      }
   d763e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7642:	f000 bd7a 	b.w	d813a <_ZdlPvj>
   d7646:	bd38      	pop	{r3, r4, r5, pc}

000d7648 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d7648:	b110      	cbz	r0, d7650 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d764a:	6803      	ldr	r3, [r0, #0]
   d764c:	685b      	ldr	r3, [r3, #4]
   d764e:	4718      	bx	r3
   d7650:	4770      	bx	lr

000d7652 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d7652:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d7654:	6803      	ldr	r3, [r0, #0]
   d7656:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d7658:	b1bb      	cbz	r3, d768a <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d765a:	6858      	ldr	r0, [r3, #4]
   d765c:	f7fd fa1e 	bl	d4a9c <os_thread_is_current>
   d7660:	b978      	cbnz	r0, d7682 <_ZN6ThreadD1Ev+0x30>
   d7662:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d7664:	7c5a      	ldrb	r2, [r3, #17]
   d7666:	b912      	cbnz	r2, d766e <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d7668:	6858      	ldr	r0, [r3, #4]
   d766a:	f7fd fa1f 	bl	d4aac <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d766e:	6823      	ldr	r3, [r4, #0]
   d7670:	6858      	ldr	r0, [r3, #4]
   d7672:	f7fd fa23 	bl	d4abc <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7676:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d7678:	2300      	movs	r3, #0
   d767a:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d767c:	b128      	cbz	r0, d768a <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d767e:	f7ff ffcd 	bl	d761c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7682:	6820      	ldr	r0, [r4, #0]
   d7684:	b108      	cbz	r0, d768a <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d7686:	f7ff ffc9 	bl	d761c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d768a:	4620      	mov	r0, r4
   d768c:	bd10      	pop	{r4, pc}
	...

000d7690 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d7690:	b538      	push	{r3, r4, r5, lr}
   d7692:	4b0c      	ldr	r3, [pc, #48]	; (d76c4 <_ZN5spark9MeshClassD1Ev+0x34>)
   d7694:	6003      	str	r3, [r0, #0]
   d7696:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7698:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d769c:	b108      	cbz	r0, d76a2 <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d769e:	f7fc fd00 	bl	d40a2 <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d76a2:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d76a6:	b135      	cbz	r5, d76b6 <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d76a8:	4628      	mov	r0, r5
   d76aa:	f7ff ffd2 	bl	d7652 <_ZN6ThreadD1Ev>
   d76ae:	2104      	movs	r1, #4
   d76b0:	4628      	mov	r0, r5
   d76b2:	f000 fd42 	bl	d813a <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d76b6:	68a0      	ldr	r0, [r4, #8]
   d76b8:	b108      	cbz	r0, d76be <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d76ba:	f7ff ffc5 	bl	d7648 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d76be:	4620      	mov	r0, r4
   d76c0:	bd38      	pop	{r3, r4, r5, pc}
   d76c2:	bf00      	nop
   d76c4:	000d958c 	.word	0x000d958c

000d76c8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d76c8:	b538      	push	{r3, r4, r5, lr}
   d76ca:	4c0e      	ldr	r4, [pc, #56]	; (d7704 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d76cc:	4b0e      	ldr	r3, [pc, #56]	; (d7708 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d76ce:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d76d0:	2500      	movs	r5, #0
   d76d2:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d76d4:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d76d8:	6063      	str	r3, [r4, #4]
   d76da:	60a5      	str	r5, [r4, #8]
   d76dc:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d76e0:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d76e4:	f7fd f9fa 	bl	d4adc <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d76e8:	4b08      	ldr	r3, [pc, #32]	; (d770c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d76ea:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d76ee:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d76f2:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d76f4:	4620      	mov	r0, r4
   d76f6:	4a06      	ldr	r2, [pc, #24]	; (d7710 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d76f8:	4906      	ldr	r1, [pc, #24]	; (d7714 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d76fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d76fe:	f000 bd17 	b.w	d8130 <__aeabi_atexit>
   d7702:	bf00      	nop
   d7704:	2003e3d4 	.word	0x2003e3d4
   d7708:	000d95c0 	.word	0x000d95c0
   d770c:	000d958c 	.word	0x000d958c
   d7710:	2003e294 	.word	0x2003e294
   d7714:	000d7691 	.word	0x000d7691

000d7718 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d7718:	2300      	movs	r3, #0
   d771a:	461a      	mov	r2, r3
   d771c:	6840      	ldr	r0, [r0, #4]
   d771e:	f7fd bbc1 	b.w	d4ea4 <network_connect>

000d7722 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d7722:	2200      	movs	r2, #0
   d7724:	2102      	movs	r1, #2
   d7726:	6840      	ldr	r0, [r0, #4]
   d7728:	f7fd bbcc 	b.w	d4ec4 <network_disconnect>

000d772c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d772c:	2200      	movs	r2, #0
   d772e:	4611      	mov	r1, r2
   d7730:	6840      	ldr	r0, [r0, #4]
   d7732:	f7fd bbbf 	b.w	d4eb4 <network_connecting>

000d7736 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d7736:	2200      	movs	r2, #0
   d7738:	4611      	mov	r1, r2
   d773a:	6840      	ldr	r0, [r0, #4]
   d773c:	f7fd bbca 	b.w	d4ed4 <network_ready>

000d7740 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d7740:	2300      	movs	r3, #0
   d7742:	461a      	mov	r2, r3
   d7744:	4619      	mov	r1, r3
   d7746:	6840      	ldr	r0, [r0, #4]
   d7748:	f7fd bbcc 	b.w	d4ee4 <network_on>

000d774c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d774c:	2300      	movs	r3, #0
   d774e:	461a      	mov	r2, r3
   d7750:	4619      	mov	r1, r3
   d7752:	6840      	ldr	r0, [r0, #4]
   d7754:	f7fd bbce 	b.w	d4ef4 <network_off>

000d7758 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d7758:	2200      	movs	r2, #0
   d775a:	f081 0101 	eor.w	r1, r1, #1
   d775e:	6840      	ldr	r0, [r0, #4]
   d7760:	f7fd bbd0 	b.w	d4f04 <network_listen>

000d7764 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d7764:	2200      	movs	r2, #0
   d7766:	6840      	ldr	r0, [r0, #4]
   d7768:	f7fd bbdc 	b.w	d4f24 <network_set_listen_timeout>

000d776c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d776c:	2200      	movs	r2, #0
   d776e:	4611      	mov	r1, r2
   d7770:	6840      	ldr	r0, [r0, #4]
   d7772:	f7fd bbdf 	b.w	d4f34 <network_get_listen_timeout>

000d7776 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d7776:	2200      	movs	r2, #0
   d7778:	4611      	mov	r1, r2
   d777a:	6840      	ldr	r0, [r0, #4]
   d777c:	f7fd bbca 	b.w	d4f14 <network_listening>

000d7780 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d7780:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7784:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d7786:	b095      	sub	sp, #84	; 0x54
   d7788:	4616      	mov	r6, r2
   d778a:	460d      	mov	r5, r1
   d778c:	4607      	mov	r7, r0
    IPAddress addr;
   d778e:	f7fe fd5d 	bl	d624c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d7792:	4621      	mov	r1, r4
   d7794:	2220      	movs	r2, #32
   d7796:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7798:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d779a:	f001 faae 	bl	d8cfa <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d779e:	2340      	movs	r3, #64	; 0x40
   d77a0:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d77a2:	4621      	mov	r1, r4
   d77a4:	466b      	mov	r3, sp
   d77a6:	aa0c      	add	r2, sp, #48	; 0x30
   d77a8:	4630      	mov	r0, r6
   d77aa:	f7fd fa27 	bl	d4bfc <netdb_getaddrinfo>
    if (!r) {
   d77ae:	4604      	mov	r4, r0
   d77b0:	2800      	cmp	r0, #0
   d77b2:	d144      	bne.n	d783e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d77b4:	4602      	mov	r2, r0
   d77b6:	2101      	movs	r1, #1
   d77b8:	6868      	ldr	r0, [r5, #4]
   d77ba:	f7fd fb8b 	bl	d4ed4 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d77be:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d77c0:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d77c2:	4622      	mov	r2, r4
   d77c4:	6868      	ldr	r0, [r5, #4]
   d77c6:	f7fd fb85 	bl	d4ed4 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d77ca:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d77cc:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d77ce:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d77d0:	2e00      	cmp	r6, #0
   d77d2:	d034      	beq.n	d783e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d77d4:	2900      	cmp	r1, #0
   d77d6:	d132      	bne.n	d783e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d77d8:	6873      	ldr	r3, [r6, #4]
   d77da:	2b02      	cmp	r3, #2
   d77dc:	d002      	beq.n	d77e4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d77de:	2b0a      	cmp	r3, #10
   d77e0:	d009      	beq.n	d77f6 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d77e2:	e02a      	b.n	d783a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d77e4:	f1b8 0f00 	cmp.w	r8, #0
   d77e8:	d027      	beq.n	d783a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d77ea:	6971      	ldr	r1, [r6, #20]
   d77ec:	4638      	mov	r0, r7
   d77ee:	3104      	adds	r1, #4
   d77f0:	f7fe fd59 	bl	d62a6 <_ZN9IPAddressaSEPKh>
   d77f4:	e020      	b.n	d7838 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d77f6:	f1b9 0f00 	cmp.w	r9, #0
   d77fa:	d01e      	beq.n	d783a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d77fc:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d77fe:	2211      	movs	r2, #17
   d7800:	a801      	add	r0, sp, #4
   d7802:	f001 fa7a 	bl	d8cfa <memset>
                    a.v = 6;
   d7806:	2306      	movs	r3, #6
   d7808:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d780c:	ad01      	add	r5, sp, #4
   d780e:	f104 0308 	add.w	r3, r4, #8
   d7812:	3418      	adds	r4, #24
   d7814:	6818      	ldr	r0, [r3, #0]
   d7816:	6859      	ldr	r1, [r3, #4]
   d7818:	462a      	mov	r2, r5
   d781a:	c203      	stmia	r2!, {r0, r1}
   d781c:	3308      	adds	r3, #8
   d781e:	42a3      	cmp	r3, r4
   d7820:	4615      	mov	r5, r2
   d7822:	d1f7      	bne.n	d7814 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d7824:	a901      	add	r1, sp, #4
   d7826:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d7828:	ad07      	add	r5, sp, #28
   d782a:	f7fe fd1d 	bl	d6268 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d782e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7830:	1d3c      	adds	r4, r7, #4
   d7832:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7834:	682b      	ldr	r3, [r5, #0]
   d7836:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d7838:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d783a:	69f6      	ldr	r6, [r6, #28]
   d783c:	e7c8      	b.n	d77d0 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d783e:	9800      	ldr	r0, [sp, #0]
   d7840:	f7fd f9d4 	bl	d4bec <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d7844:	4638      	mov	r0, r7
   d7846:	b015      	add	sp, #84	; 0x54
   d7848:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d784c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d784c:	4b02      	ldr	r3, [pc, #8]	; (d7858 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d784e:	4a03      	ldr	r2, [pc, #12]	; (d785c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d7850:	601a      	str	r2, [r3, #0]
   d7852:	2200      	movs	r2, #0
   d7854:	605a      	str	r2, [r3, #4]
   d7856:	4770      	bx	lr
   d7858:	2003e5a8 	.word	0x2003e5a8
   d785c:	000d95c0 	.word	0x000d95c0

000d7860 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d7860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7862:	4606      	mov	r6, r0
   d7864:	460d      	mov	r5, r1
   d7866:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d7868:	2400      	movs	r4, #0
  while (size--) {
   d786a:	42bd      	cmp	r5, r7
   d786c:	d00c      	beq.n	d7888 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d786e:	6833      	ldr	r3, [r6, #0]
   d7870:	f815 1b01 	ldrb.w	r1, [r5], #1
   d7874:	689b      	ldr	r3, [r3, #8]
   d7876:	4630      	mov	r0, r6
   d7878:	4798      	blx	r3
     if (chunk>=0)
   d787a:	2800      	cmp	r0, #0
   d787c:	db01      	blt.n	d7882 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d787e:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d7880:	e7f3      	b.n	d786a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d7882:	2c00      	cmp	r4, #0
   d7884:	bf08      	it	eq
   d7886:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d7888:	4620      	mov	r0, r4
   d788a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d788c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d788c:	b570      	push	{r4, r5, r6, lr}
   d788e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d7890:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d7892:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d7894:	b149      	cbz	r1, d78aa <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d7896:	f001 fabd 	bl	d8e14 <strlen>
   d789a:	682b      	ldr	r3, [r5, #0]
   d789c:	4602      	mov	r2, r0
   d789e:	4621      	mov	r1, r4
   d78a0:	4628      	mov	r0, r5
   d78a2:	68db      	ldr	r3, [r3, #12]
    }
   d78a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d78a8:	4718      	bx	r3
    }
   d78aa:	bd70      	pop	{r4, r5, r6, pc}

000d78ac <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d78ac:	6803      	ldr	r3, [r0, #0]
   d78ae:	689b      	ldr	r3, [r3, #8]
   d78b0:	4718      	bx	r3

000d78b2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d78b2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d78b4:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d78b6:	4605      	mov	r5, r0
  size_t n = print('\r');
   d78b8:	f7ff fff8 	bl	d78ac <_ZN5Print5printEc>
  n += print('\n');
   d78bc:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d78be:	4604      	mov	r4, r0
  n += print('\n');
   d78c0:	4628      	mov	r0, r5
   d78c2:	f7ff fff3 	bl	d78ac <_ZN5Print5printEc>
  return n;
}
   d78c6:	4420      	add	r0, r4
   d78c8:	bd38      	pop	{r3, r4, r5, pc}

000d78ca <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d78ca:	b530      	push	{r4, r5, lr}
   d78cc:	b08b      	sub	sp, #44	; 0x2c
   d78ce:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d78d0:	2100      	movs	r1, #0
   d78d2:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d78d6:	2a01      	cmp	r2, #1
   d78d8:	bf98      	it	ls
   d78da:	220a      	movls	r2, #10
   d78dc:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d78e0:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d78e4:	fb05 3312 	mls	r3, r5, r2, r3
   d78e8:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d78ec:	2b09      	cmp	r3, #9
   d78ee:	bf94      	ite	ls
   d78f0:	3330      	addls	r3, #48	; 0x30
   d78f2:	3337      	addhi	r3, #55	; 0x37
   d78f4:	b2db      	uxtb	r3, r3
   d78f6:	4621      	mov	r1, r4
   d78f8:	f804 3901 	strb.w	r3, [r4], #-1
   d78fc:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d78fe:	2d00      	cmp	r5, #0
   d7900:	d1ee      	bne.n	d78e0 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d7902:	f7ff ffc3 	bl	d788c <_ZN5Print5writeEPKc>
}
   d7906:	b00b      	add	sp, #44	; 0x2c
   d7908:	bd30      	pop	{r4, r5, pc}

000d790a <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d790a:	b410      	push	{r4}
  if (base == 0) return write(n);
   d790c:	b92a      	cbnz	r2, d791a <_ZN5Print5printEmi+0x10>
   d790e:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d7910:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d7914:	689b      	ldr	r3, [r3, #8]
   d7916:	b2c9      	uxtb	r1, r1
   d7918:	4718      	bx	r3
  else return printNumber(n, base);
   d791a:	b2d2      	uxtb	r2, r2
}
   d791c:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d7920:	f7ff bfd3 	b.w	d78ca <_ZN5Print11printNumberEmh>

000d7924 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d7924:	f7ff bff1 	b.w	d790a <_ZN5Print5printEmi>

000d7928 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d7928:	b40c      	push	{r2, r3}
   d792a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d792e:	b087      	sub	sp, #28
   d7930:	af00      	add	r7, sp, #0
   d7932:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d7936:	4605      	mov	r5, r0
   d7938:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d793c:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d793e:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d7940:	4623      	mov	r3, r4
   d7942:	464a      	mov	r2, r9
   d7944:	2114      	movs	r1, #20
   d7946:	1d38      	adds	r0, r7, #4
   d7948:	f7fd fb14 	bl	d4f74 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d794c:	2813      	cmp	r0, #19
   d794e:	d805      	bhi.n	d795c <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d7950:	1d39      	adds	r1, r7, #4
   d7952:	4628      	mov	r0, r5
   d7954:	f7ff ff9a 	bl	d788c <_ZN5Print5writeEPKc>
   d7958:	4604      	mov	r4, r0
   d795a:	e013      	b.n	d7984 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d795c:	f100 0308 	add.w	r3, r0, #8
   d7960:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d7964:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d7966:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d796a:	1c41      	adds	r1, r0, #1
   d796c:	4623      	mov	r3, r4
   d796e:	464a      	mov	r2, r9
   d7970:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d7972:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d7974:	f7fd fafe 	bl	d4f74 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d7978:	4669      	mov	r1, sp
   d797a:	4628      	mov	r0, r5
   d797c:	f7ff ff86 	bl	d788c <_ZN5Print5writeEPKc>
   d7980:	4604      	mov	r4, r0
   d7982:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d7984:	b11e      	cbz	r6, d798e <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d7986:	4628      	mov	r0, r5
   d7988:	f7ff ff93 	bl	d78b2 <_ZN5Print7printlnEv>
   d798c:	4404      	add	r4, r0
    return n;
}
   d798e:	4620      	mov	r0, r4
   d7990:	371c      	adds	r7, #28
   d7992:	46bd      	mov	sp, r7
   d7994:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7998:	b002      	add	sp, #8
   d799a:	4770      	bx	lr

000d799c <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d799c:	b510      	push	{r4, lr}
   d799e:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d79a0:	f7fe fb90 	bl	d60c4 <_ZNSt14_Function_baseD1Ev>
   d79a4:	4620      	mov	r0, r4
   d79a6:	bd10      	pop	{r4, pc}

000d79a8 <_ZN8RGBClass7controlEb>:
{
    return LED_RGB_IsOverRidden();
}

void RGBClass::control(bool override)
{
   d79a8:	b510      	push	{r4, lr}
   d79aa:	4604      	mov	r4, r0

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
   d79ac:	f7fd fa0e 	bl	d4dcc <LED_RGB_IsOverRidden>
}

void RGBClass::control(bool override)
{
    if (override == controlled()) {
   d79b0:	4284      	cmp	r4, r0
   d79b2:	d008      	beq.n	d79c6 <_ZN8RGBClass7controlEb+0x1e>
        return;
    } else if (override) {
   d79b4:	b11c      	cbz	r4, d79be <_ZN8RGBClass7controlEb+0x16>
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
    }
}
   d79b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void RGBClass::control(bool override)
{
    if (override == controlled()) {
        return;
    } else if (override) {
        LED_Signaling_Start();
   d79ba:	f7fd b9f7 	b.w	d4dac <LED_Signaling_Start>
    } else {
        LED_Signaling_Stop();
    }
}
   d79be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (override == controlled()) {
        return;
    } else if (override) {
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
   d79c2:	f7fd b9fb 	b.w	d4dbc <LED_Signaling_Stop>
   d79c6:	bd10      	pop	{r4, pc}

000d79c8 <_ZN8RGBClass5colorEiii>:
void RGBClass::color(uint32_t rgb) {
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
   d79c8:	b570      	push	{r4, r5, r6, lr}
   d79ca:	4605      	mov	r5, r0
   d79cc:	460e      	mov	r6, r1
   d79ce:	4614      	mov	r4, r2

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
   d79d0:	f7fd f9fc 	bl	d4dcc <LED_RGB_IsOverRidden>
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
    if (!controlled()) {
   d79d4:	b150      	cbz	r0, d79ec <_ZN8RGBClass5colorEiii+0x24>
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
   d79d6:	ea44 2006 	orr.w	r0, r4, r6, lsl #8
   d79da:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
   d79de:	f7fd f9dd 	bl	d4d9c <LED_SetSignalingColor>
    LED_On(LED_RGB);
   d79e2:	20e7      	movs	r0, #231	; 0xe7
}
   d79e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
{
    if (!controlled()) {
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
    LED_On(LED_RGB);
   d79e8:	f7fd b9f8 	b.w	d4ddc <LED_On>
   d79ec:	bd70      	pop	{r4, r5, r6, pc}
	...

000d79f0 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d79f0:	4803      	ldr	r0, [pc, #12]	; (d7a00 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d79f2:	4a04      	ldr	r2, [pc, #16]	; (d7a04 <_GLOBAL__sub_I_RGB+0x14>)
   d79f4:	4904      	ldr	r1, [pc, #16]	; (d7a08 <_GLOBAL__sub_I_RGB+0x18>)
   d79f6:	2300      	movs	r3, #0
   d79f8:	6083      	str	r3, [r0, #8]
   d79fa:	f000 bb99 	b.w	d8130 <__aeabi_atexit>
   d79fe:	bf00      	nop
   d7a00:	2003e5b0 	.word	0x2003e5b0
   d7a04:	2003e294 	.word	0x2003e294
   d7a08:	000d799d 	.word	0x000d799d

000d7a0c <_ZN5Servo17writeMicrosecondsEt>:
  // write(179).
  return a == this->minAngle || a == this->maxAngle ? a : a + 1;
}

void Servo::writeMicroseconds(uint16_t pulseWidth)
{
   d7a0c:	f9b0 2000 	ldrsh.w	r2, [r0]

  if (!this->attached())
   d7a10:	1c53      	adds	r3, r2, #1
   d7a12:	d00b      	beq.n	d7a2c <_ZN5Servo17writeMicrosecondsEt+0x20>
  {
    return;
  }

  pulseWidth = constrain(pulseWidth, this->minPW, this->maxPW);
   d7a14:	8843      	ldrh	r3, [r0, #2]
   d7a16:	8880      	ldrh	r0, [r0, #4]
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
   d7a18:	428b      	cmp	r3, r1
   d7a1a:	d803      	bhi.n	d7a24 <_ZN5Servo17writeMicrosecondsEt+0x18>
   d7a1c:	4288      	cmp	r0, r1
   d7a1e:	4603      	mov	r3, r0
   d7a20:	bf28      	it	cs
   d7a22:	460b      	movcs	r3, r1

  HAL_Servo_Write_Pulse_Width(this->pin, pulseWidth);
   d7a24:	4619      	mov	r1, r3
   d7a26:	b290      	uxth	r0, r2
   d7a28:	f7fd b900 	b.w	d4c2c <HAL_Servo_Write_Pulse_Width>
   d7a2c:	4770      	bx	lr

000d7a2e <_ZN5Servo5writeEi>:

  return true;
}

void Servo::write(int degrees)
{
   d7a2e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7a30:	4604      	mov	r4, r0
   d7a32:	4608      	mov	r0, r1
   d7a34:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
  degrees = constrain(degrees, this->minAngle, this->maxAngle);
   d7a38:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
   d7a3c:	4281      	cmp	r1, r0
   d7a3e:	dc03      	bgt.n	d7a48 <_ZN5Servo5writeEi+0x1a>
   d7a40:	4290      	cmp	r0, r2
   d7a42:	bfa8      	it	ge
   d7a44:	4610      	movge	r0, r2
   d7a46:	e000      	b.n	d7a4a <_ZN5Servo5writeEi+0x1c>
   d7a48:	4608      	mov	r0, r1
  this->writeMicroseconds(ANGLE_TO_US(degrees)+trim);
   d7a4a:	88a5      	ldrh	r5, [r4, #4]
   d7a4c:	8863      	ldrh	r3, [r4, #2]
   d7a4e:	9500      	str	r5, [sp, #0]
   d7a50:	f7fd fa98 	bl	d4f84 <_Z3mapiiiii>
   d7a54:	68e1      	ldr	r1, [r4, #12]
   d7a56:	4401      	add	r1, r0
   d7a58:	b289      	uxth	r1, r1
   d7a5a:	4620      	mov	r0, r4
}
   d7a5c:	b003      	add	sp, #12
   d7a5e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
}

void Servo::write(int degrees)
{
  degrees = constrain(degrees, this->minAngle, this->maxAngle);
  this->writeMicroseconds(ANGLE_TO_US(degrees)+trim);
   d7a62:	f7ff bfd3 	b.w	d7a0c <_ZN5Servo17writeMicrosecondsEt>

000d7a66 <_ZNK5Servo16readMicrosecondsEv>:

  HAL_Servo_Write_Pulse_Width(this->pin, pulseWidth);
}

uint16_t Servo::readMicroseconds() const
{
   d7a66:	f9b0 0000 	ldrsh.w	r0, [r0]
  if (!this->attached())
   d7a6a:	1c43      	adds	r3, r0, #1
   d7a6c:	d002      	beq.n	d7a74 <_ZNK5Servo16readMicrosecondsEv+0xe>
  {
    return 0;
  }

  return HAL_Servo_Read_Pulse_Width(this->pin);
   d7a6e:	b280      	uxth	r0, r0
   d7a70:	f7fd b8e4 	b.w	d4c3c <HAL_Servo_Read_Pulse_Width>
}
   d7a74:	2000      	movs	r0, #0
   d7a76:	4770      	bx	lr

000d7a78 <_ZNK5Servo4readEv>:
  degrees = constrain(degrees, this->minAngle, this->maxAngle);
  this->writeMicroseconds(ANGLE_TO_US(degrees)+trim);
}

int Servo::read() const
{
   d7a78:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d7a7a:	4604      	mov	r4, r0
  int a = US_TO_ANGLE(this->readMicroseconds()-trim);
   d7a7c:	f7ff fff3 	bl	d7a66 <_ZNK5Servo16readMicrosecondsEv>
   d7a80:	68e5      	ldr	r5, [r4, #12]
   d7a82:	f9b4 6008 	ldrsh.w	r6, [r4, #8]
   d7a86:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   d7a8a:	88a2      	ldrh	r2, [r4, #4]
   d7a8c:	8861      	ldrh	r1, [r4, #2]
   d7a8e:	9600      	str	r6, [sp, #0]
   d7a90:	1b40      	subs	r0, r0, r5
   d7a92:	f7fd fa77 	bl	d4f84 <_Z3mapiiiii>
   d7a96:	b203      	sxth	r3, r0
  // map() round-trips in a weird way we mostly correct for here;
  // the round-trip is still sometimes off-by-one for write(1) and
  // write(179).
  return a == this->minAngle || a == this->maxAngle ? a : a + 1;
   d7a98:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
   d7a9c:	4283      	cmp	r3, r0
   d7a9e:	d004      	beq.n	d7aaa <_ZNK5Servo4readEv+0x32>
   d7aa0:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
   d7aa4:	4283      	cmp	r3, r0
   d7aa6:	bf18      	it	ne
   d7aa8:	1c58      	addne	r0, r3, #1
}
   d7aaa:	b002      	add	sp, #8
   d7aac:	bd70      	pop	{r4, r5, r6, pc}

000d7aae <_ZN5Servo11resetFieldsEv>:

void Servo::resetFields(void)
{
  this->pin = NOT_ATTACHED;
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
   d7aae:	22b4      	movs	r2, #180	; 0xb4
  return HAL_Servo_Read_Pulse_Width(this->pin);
}

void Servo::resetFields(void)
{
  this->pin = NOT_ATTACHED;
   d7ab0:	f64f 73ff 	movw	r3, #65535	; 0xffff
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
   d7ab4:	8102      	strh	r2, [r0, #8]
  this->minPW = SERVO_DEFAULT_MIN_PW;
   d7ab6:	f44f 7208 	mov.w	r2, #544	; 0x220
  return HAL_Servo_Read_Pulse_Width(this->pin);
}

void Servo::resetFields(void)
{
  this->pin = NOT_ATTACHED;
   d7aba:	8003      	strh	r3, [r0, #0]
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
  this->minPW = SERVO_DEFAULT_MIN_PW;
   d7abc:	8042      	strh	r2, [r0, #2]
}

void Servo::resetFields(void)
{
  this->pin = NOT_ATTACHED;
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
   d7abe:	2300      	movs	r3, #0
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
  this->minPW = SERVO_DEFAULT_MIN_PW;
  this->maxPW = SERVO_DEFAULT_MAX_PW;
   d7ac0:	f44f 6216 	mov.w	r2, #2400	; 0x960
}

void Servo::resetFields(void)
{
  this->pin = NOT_ATTACHED;
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
   d7ac4:	80c3      	strh	r3, [r0, #6]
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
  this->minPW = SERVO_DEFAULT_MIN_PW;
  this->maxPW = SERVO_DEFAULT_MAX_PW;
   d7ac6:	8082      	strh	r2, [r0, #4]
  this->trim = 0;
   d7ac8:	60c3      	str	r3, [r0, #12]
   d7aca:	4770      	bx	lr

000d7acc <_ZN5ServoC1Ev>:
#define ANGLE_TO_US(a)    ((uint16_t)(map((a), this->minAngle, this->maxAngle, \
                                        this->minPW, this->maxPW)))
#define US_TO_ANGLE(us)   ((int16_t)(map((us), this->minPW, this->maxPW,  \
                                       this->minAngle, this->maxAngle)))

Servo::Servo()
   d7acc:	b508      	push	{r3, lr}
{
  this->resetFields();
   d7ace:	f7ff ffee 	bl	d7aae <_ZN5Servo11resetFieldsEv>
}
   d7ad2:	bd08      	pop	{r3, pc}

000d7ad4 <_ZN5Servo6detachEv>:

  return true;
}

bool Servo::detach()
{
   d7ad4:	b510      	push	{r4, lr}
   d7ad6:	4604      	mov	r4, r0
   d7ad8:	f9b0 0000 	ldrsh.w	r0, [r0]
  if (!this->attached())
   d7adc:	1c43      	adds	r3, r0, #1
   d7ade:	d007      	beq.n	d7af0 <_ZN5Servo6detachEv+0x1c>
  {
    return false;
  }

  HAL_Servo_Detach(this->pin);
   d7ae0:	b280      	uxth	r0, r0
   d7ae2:	f7fd f89b 	bl	d4c1c <HAL_Servo_Detach>

  this->resetFields();
   d7ae6:	4620      	mov	r0, r4
   d7ae8:	f7ff ffe1 	bl	d7aae <_ZN5Servo11resetFieldsEv>

  return true;
   d7aec:	2001      	movs	r0, #1
   d7aee:	bd10      	pop	{r4, pc}

bool Servo::detach()
{
  if (!this->attached())
  {
    return false;
   d7af0:	2000      	movs	r0, #0
  HAL_Servo_Detach(this->pin);

  this->resetFields();

  return true;
}
   d7af2:	bd10      	pop	{r4, pc}

000d7af4 <_ZN5Servo6attachEtttss>:
bool Servo::attach(uint16_t pin,
    uint16_t minPW,
    uint16_t maxPW,
    int16_t minAngle,
    int16_t maxAngle)
{
   d7af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7af8:	460d      	mov	r5, r1
   d7afa:	4604      	mov	r4, r0

  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
   d7afc:	2102      	movs	r1, #2
   d7afe:	4628      	mov	r0, r5
bool Servo::attach(uint16_t pin,
    uint16_t minPW,
    uint16_t maxPW,
    int16_t minAngle,
    int16_t maxAngle)
{
   d7b00:	4690      	mov	r8, r2
   d7b02:	461f      	mov	r7, r3

  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
   d7b04:	f7fd f82a 	bl	d4b5c <HAL_Validate_Pin_Function>
   d7b08:	2802      	cmp	r0, #2
   d7b0a:	d001      	beq.n	d7b10 <_ZN5Servo6attachEtttss+0x1c>
  {
    return false;
   d7b0c:	2600      	movs	r6, #0
   d7b0e:	e019      	b.n	d7b44 <_ZN5Servo6attachEtttss+0x50>
  }

  // Safety check
  if (!pinAvailable(pin))
   d7b10:	4628      	mov	r0, r5
   d7b12:	f000 faa7 	bl	d8064 <pinAvailable>
   d7b16:	4606      	mov	r6, r0
   d7b18:	2800      	cmp	r0, #0
   d7b1a:	d0f7      	beq.n	d7b0c <_ZN5Servo6attachEtttss+0x18>
  {
    return false;
  }

  if (this->attached())
   d7b1c:	f9b4 3000 	ldrsh.w	r3, [r4]
   d7b20:	3301      	adds	r3, #1
   d7b22:	d002      	beq.n	d7b2a <_ZN5Servo6attachEtttss+0x36>
  {
    this->detach();
   d7b24:	4620      	mov	r0, r4
   d7b26:	f7ff ffd5 	bl	d7ad4 <_ZN5Servo6detachEv>
  }

  this->pin = pin;
  this->minPW = minPW;
  this->maxPW = maxPW;
  this->minAngle = minAngle;
   d7b2a:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
   d7b2e:	80e3      	strh	r3, [r4, #6]
  this->maxAngle = maxAngle;
   d7b30:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
  if (this->attached())
  {
    this->detach();
  }

  this->pin = pin;
   d7b34:	8025      	strh	r5, [r4, #0]
  this->minPW = minPW;
   d7b36:	f8a4 8002 	strh.w	r8, [r4, #2]
  this->maxPW = maxPW;
   d7b3a:	80a7      	strh	r7, [r4, #4]
  this->minAngle = minAngle;
  this->maxAngle = maxAngle;
   d7b3c:	8123      	strh	r3, [r4, #8]

  HAL_Servo_Attach(this->pin);
   d7b3e:	4628      	mov	r0, r5
   d7b40:	f7fd f864 	bl	d4c0c <HAL_Servo_Attach>

  return true;
}
   d7b44:	4630      	mov	r0, r6
   d7b46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7b4a <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d7b4a:	4770      	bx	lr

000d7b4c <_ZN8SPIClassD0Ev>:
   d7b4c:	b510      	push	{r4, lr}
   d7b4e:	2110      	movs	r1, #16
   d7b50:	4604      	mov	r4, r0
   d7b52:	f000 faf2 	bl	d813a <_ZdlPvj>
   d7b56:	4620      	mov	r0, r4
   d7b58:	bd10      	pop	{r4, pc}
	...

000d7b5c <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d7b5c:	b570      	push	{r4, r5, r6, lr}
   d7b5e:	4b08      	ldr	r3, [pc, #32]	; (d7b80 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d7b60:	6003      	str	r3, [r0, #0]
   d7b62:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d7b64:	2500      	movs	r5, #0
   d7b66:	460e      	mov	r6, r1
   d7b68:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d7b6c:	f7fc ffae 	bl	d4acc <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d7b70:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d7b72:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d7b74:	f7fd f86a 	bl	d4c4c <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d7b78:	60a5      	str	r5, [r4, #8]
}
   d7b7a:	4620      	mov	r0, r4
   d7b7c:	bd70      	pop	{r4, r5, r6, pc}
   d7b7e:	bf00      	nop
   d7b80:	000d95f4 	.word	0x000d95f4

000d7b84 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d7b84:	7900      	ldrb	r0, [r0, #4]
   d7b86:	f7fd b869 	b.w	d4c5c <HAL_SPI_Is_Enabled>

000d7b8a <_ZN6StringC1EOS_>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d7b8a:	2300      	movs	r3, #0
   d7b8c:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d7b8e:	6043      	str	r3, [r0, #4]
	len = 0;
   d7b90:	6083      	str	r3, [r0, #8]
	flags = 0;
   d7b92:	7303      	strb	r3, [r0, #12]
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
   d7b94:	b510      	push	{r4, lr}
			return;
		} else {
			free(buffer);
		}
	}
	buffer = rhs.buffer;
   d7b96:	680c      	ldr	r4, [r1, #0]
   d7b98:	6004      	str	r4, [r0, #0]
	capacity = rhs.capacity;
   d7b9a:	684c      	ldr	r4, [r1, #4]
   d7b9c:	6044      	str	r4, [r0, #4]
	len = rhs.len;
   d7b9e:	688c      	ldr	r4, [r1, #8]
   d7ba0:	6084      	str	r4, [r0, #8]
	rhs.buffer = NULL;
   d7ba2:	600b      	str	r3, [r1, #0]
	rhs.capacity = 0;
   d7ba4:	604b      	str	r3, [r1, #4]
	rhs.len = 0;
   d7ba6:	608b      	str	r3, [r1, #8]
#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
{
	init();
	move(rval);
}
   d7ba8:	bd10      	pop	{r4, pc}

000d7baa <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d7baa:	b510      	push	{r4, lr}
   d7bac:	4604      	mov	r4, r0
{
	free(buffer);
   d7bae:	6800      	ldr	r0, [r0, #0]
   d7bb0:	f7fd f9d0 	bl	d4f54 <free>
}
   d7bb4:	4620      	mov	r0, r4
   d7bb6:	bd10      	pop	{r4, pc}

000d7bb8 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d7bb8:	b510      	push	{r4, lr}
   d7bba:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d7bbc:	6800      	ldr	r0, [r0, #0]
   d7bbe:	b108      	cbz	r0, d7bc4 <_ZN6String10invalidateEv+0xc>
   d7bc0:	f7fd f9c8 	bl	d4f54 <free>
	buffer = NULL;
   d7bc4:	2300      	movs	r3, #0
   d7bc6:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d7bc8:	60a3      	str	r3, [r4, #8]
   d7bca:	6063      	str	r3, [r4, #4]
   d7bcc:	bd10      	pop	{r4, pc}

000d7bce <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d7bce:	b538      	push	{r3, r4, r5, lr}
   d7bd0:	4604      	mov	r4, r0
   d7bd2:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d7bd4:	6800      	ldr	r0, [r0, #0]
   d7bd6:	3101      	adds	r1, #1
   d7bd8:	f7fd f9c4 	bl	d4f64 <realloc>
	if (newbuffer) {
   d7bdc:	b110      	cbz	r0, d7be4 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d7bde:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d7be2:	2001      	movs	r0, #1
	}
	return 0;
}
   d7be4:	bd38      	pop	{r3, r4, r5, pc}

000d7be6 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d7be6:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d7be8:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d7bea:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d7bec:	b113      	cbz	r3, d7bf4 <_ZN6String7reserveEj+0xe>
   d7bee:	6843      	ldr	r3, [r0, #4]
   d7bf0:	428b      	cmp	r3, r1
   d7bf2:	d207      	bcs.n	d7c04 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d7bf4:	4620      	mov	r0, r4
   d7bf6:	f7ff ffea 	bl	d7bce <_ZN6String12changeBufferEj>
   d7bfa:	b120      	cbz	r0, d7c06 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d7bfc:	68a3      	ldr	r3, [r4, #8]
   d7bfe:	b90b      	cbnz	r3, d7c04 <_ZN6String7reserveEj+0x1e>
   d7c00:	6822      	ldr	r2, [r4, #0]
   d7c02:	7013      	strb	r3, [r2, #0]
   d7c04:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d7c06:	bd10      	pop	{r4, pc}

000d7c08 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d7c08:	b570      	push	{r4, r5, r6, lr}
   d7c0a:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d7c0c:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d7c0e:	4604      	mov	r4, r0
   d7c10:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d7c12:	f7ff ffe8 	bl	d7be6 <_ZN6String7reserveEj>
   d7c16:	b918      	cbnz	r0, d7c20 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d7c18:	4620      	mov	r0, r4
   d7c1a:	f7ff ffcd 	bl	d7bb8 <_ZN6String10invalidateEv>
		return *this;
   d7c1e:	e009      	b.n	d7c34 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d7c20:	462a      	mov	r2, r5
   d7c22:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d7c24:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d7c26:	6820      	ldr	r0, [r4, #0]
   d7c28:	f001 f841 	bl	d8cae <memcpy>
	buffer[len] = 0;
   d7c2c:	6822      	ldr	r2, [r4, #0]
   d7c2e:	68a3      	ldr	r3, [r4, #8]
   d7c30:	2100      	movs	r1, #0
   d7c32:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d7c34:	4620      	mov	r0, r4
   d7c36:	bd70      	pop	{r4, r5, r6, pc}

000d7c38 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d7c38:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d7c3a:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d7c3c:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d7c3e:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d7c40:	6043      	str	r3, [r0, #4]
	len = 0;
   d7c42:	6083      	str	r3, [r0, #8]
	flags = 0;
   d7c44:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d7c46:	460d      	mov	r5, r1
   d7c48:	b139      	cbz	r1, d7c5a <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d7c4a:	4608      	mov	r0, r1
   d7c4c:	f001 f8e2 	bl	d8e14 <strlen>
   d7c50:	4629      	mov	r1, r5
   d7c52:	4602      	mov	r2, r0
   d7c54:	4620      	mov	r0, r4
   d7c56:	f7ff ffd7 	bl	d7c08 <_ZN6String4copyEPKcj>
}
   d7c5a:	4620      	mov	r0, r4
   d7c5c:	bd38      	pop	{r3, r4, r5, pc}

000d7c5e <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d7c5e:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d7c60:	b510      	push	{r4, lr}
   d7c62:	460b      	mov	r3, r1
   d7c64:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d7c66:	d007      	beq.n	d7c78 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d7c68:	6809      	ldr	r1, [r1, #0]
   d7c6a:	b119      	cbz	r1, d7c74 <_ZN6StringaSERKS_+0x16>
   d7c6c:	689a      	ldr	r2, [r3, #8]
   d7c6e:	f7ff ffcb 	bl	d7c08 <_ZN6String4copyEPKcj>
   d7c72:	e001      	b.n	d7c78 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d7c74:	f7ff ffa0 	bl	d7bb8 <_ZN6String10invalidateEv>

	return *this;
}
   d7c78:	4620      	mov	r0, r4
   d7c7a:	bd10      	pop	{r4, pc}

000d7c7c <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d7c7c:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d7c7e:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d7c80:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d7c82:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d7c84:	6043      	str	r3, [r0, #4]
	len = 0;
   d7c86:	6083      	str	r3, [r0, #8]
	flags = 0;
   d7c88:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d7c8a:	f7ff ffe8 	bl	d7c5e <_ZN6StringaSERKS_>
}
   d7c8e:	4620      	mov	r0, r4
   d7c90:	bd10      	pop	{r4, pc}

000d7c92 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d7c92:	b538      	push	{r3, r4, r5, lr}
   d7c94:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d7c96:	460c      	mov	r4, r1
   d7c98:	b141      	cbz	r1, d7cac <_ZN6StringaSEPKc+0x1a>
   d7c9a:	4608      	mov	r0, r1
   d7c9c:	f001 f8ba 	bl	d8e14 <strlen>
   d7ca0:	4621      	mov	r1, r4
   d7ca2:	4602      	mov	r2, r0
   d7ca4:	4628      	mov	r0, r5
   d7ca6:	f7ff ffaf 	bl	d7c08 <_ZN6String4copyEPKcj>
   d7caa:	e001      	b.n	d7cb0 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d7cac:	f7ff ff84 	bl	d7bb8 <_ZN6String10invalidateEv>

	return *this;
}
   d7cb0:	4628      	mov	r0, r5
   d7cb2:	bd38      	pop	{r3, r4, r5, pc}

000d7cb4 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d7cb4:	4b04      	ldr	r3, [pc, #16]	; (d7cc8 <_GLOBAL__sub_I_System+0x14>)
   d7cb6:	2000      	movs	r0, #0
   d7cb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d7cbc:	7018      	strb	r0, [r3, #0]
   d7cbe:	8058      	strh	r0, [r3, #2]
   d7cc0:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d7cc2:	f7fd b8bb 	b.w	d4e3c <set_system_mode>
   d7cc6:	bf00      	nop
   d7cc8:	2003e5c0 	.word	0x2003e5c0

000d7ccc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d7ccc:	4b02      	ldr	r3, [pc, #8]	; (d7cd8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d7cce:	681a      	ldr	r2, [r3, #0]
   d7cd0:	4b02      	ldr	r3, [pc, #8]	; (d7cdc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d7cd2:	601a      	str	r2, [r3, #0]
   d7cd4:	4770      	bx	lr
   d7cd6:	bf00      	nop
   d7cd8:	2003e228 	.word	0x2003e228
   d7cdc:	2003e5c8 	.word	0x2003e5c8

000d7ce0 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d7ce0:	4770      	bx	lr

000d7ce2 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7ce2:	7441      	strb	r1, [r0, #17]
   d7ce4:	4770      	bx	lr

000d7ce6 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d7ce6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d7ce8:	7c00      	ldrb	r0, [r0, #16]
   d7cea:	f7fc ffff 	bl	d4cec <HAL_USART_Available_Data_For_Write>
}
   d7cee:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7cf2:	bd08      	pop	{r3, pc}

000d7cf4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d7cf4:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d7cf6:	7c00      	ldrb	r0, [r0, #16]
   d7cf8:	f7fc ffd0 	bl	d4c9c <HAL_USART_Available_Data>
}
   d7cfc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7d00:	bd08      	pop	{r3, pc}

000d7d02 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d7d02:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d7d04:	7c00      	ldrb	r0, [r0, #16]
   d7d06:	f7fc ffd9 	bl	d4cbc <HAL_USART_Peek_Data>
}
   d7d0a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7d0e:	bf28      	it	cs
   d7d10:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d7d14:	bd08      	pop	{r3, pc}

000d7d16 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d7d16:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d7d18:	7c00      	ldrb	r0, [r0, #16]
   d7d1a:	f7fc ffc7 	bl	d4cac <HAL_USART_Read_Data>
}
   d7d1e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7d22:	bf28      	it	cs
   d7d24:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d7d28:	bd08      	pop	{r3, pc}

000d7d2a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d7d2a:	7c00      	ldrb	r0, [r0, #16]
   d7d2c:	f7fc bfce 	b.w	d4ccc <HAL_USART_Flush_Data>

000d7d30 <_ZN11USARTSerialD0Ev>:
   d7d30:	b510      	push	{r4, lr}
   d7d32:	2114      	movs	r1, #20
   d7d34:	4604      	mov	r4, r0
   d7d36:	f000 fa00 	bl	d813a <_ZdlPvj>
   d7d3a:	4620      	mov	r0, r4
   d7d3c:	bd10      	pop	{r4, pc}

000d7d3e <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d7d3e:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d7d40:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d7d42:	4604      	mov	r4, r0
   d7d44:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d7d46:	b925      	cbnz	r5, d7d52 <_ZN11USARTSerial5writeEh+0x14>
   d7d48:	7c00      	ldrb	r0, [r0, #16]
   d7d4a:	f7fc ffcf 	bl	d4cec <HAL_USART_Available_Data_For_Write>
   d7d4e:	2800      	cmp	r0, #0
   d7d50:	dd05      	ble.n	d7d5e <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d7d52:	4631      	mov	r1, r6
   d7d54:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d7d56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d7d5a:	f7fc bf97 	b.w	d4c8c <HAL_USART_Write_Data>
  }
  return 0;
}
   d7d5e:	4628      	mov	r0, r5
   d7d60:	bd70      	pop	{r4, r5, r6, pc}
	...

000d7d64 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d7d64:	b510      	push	{r4, lr}
   d7d66:	4604      	mov	r4, r0
   d7d68:	4608      	mov	r0, r1
   d7d6a:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d7d6c:	2200      	movs	r2, #0
   d7d6e:	6062      	str	r2, [r4, #4]
   d7d70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7d74:	60a2      	str	r2, [r4, #8]
   d7d76:	4a05      	ldr	r2, [pc, #20]	; (d7d8c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d7d78:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d7d7a:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d7d7c:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d7d7e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d7d80:	461a      	mov	r2, r3
   d7d82:	f7fc ff73 	bl	d4c6c <HAL_USART_Init>
}
   d7d86:	4620      	mov	r0, r4
   d7d88:	bd10      	pop	{r4, pc}
   d7d8a:	bf00      	nop
   d7d8c:	000d9630 	.word	0x000d9630

000d7d90 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
   d7d90:	2300      	movs	r3, #0
   d7d92:	7c00      	ldrb	r0, [r0, #16]
   d7d94:	f7fc bfb2 	b.w	d4cfc <HAL_USART_BeginConfig>

000d7d98 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
   d7d98:	2200      	movs	r2, #0
   d7d9a:	f7ff bff9 	b.w	d7d90 <_ZN11USARTSerial5beginEmm>

000d7d9e <_ZN11USARTSerial3endEv>:
  HAL_USART_BeginConfig(_serial, baud, config, 0);
}

void USARTSerial::end()
{
  HAL_USART_End(_serial);
   d7d9e:	7c00      	ldrb	r0, [r0, #16]
   d7da0:	f7fc bf6c 	b.w	d4c7c <HAL_USART_End>

000d7da4 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d7da4:	7c00      	ldrb	r0, [r0, #16]
   d7da6:	f7fc bf99 	b.w	d4cdc <HAL_USART_Is_Enabled>
	...

000d7dac <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d7dac:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d7dae:	4d0c      	ldr	r5, [pc, #48]	; (d7de0 <_Z22__fetch_global_Serial1v+0x34>)
   d7db0:	6829      	ldr	r1, [r5, #0]
   d7db2:	f011 0401 	ands.w	r4, r1, #1
   d7db6:	d111      	bne.n	d7ddc <_Z22__fetch_global_Serial1v+0x30>
   d7db8:	4628      	mov	r0, r5
   d7dba:	f7fc f97f 	bl	d40bc <__cxa_guard_acquire>
   d7dbe:	b168      	cbz	r0, d7ddc <_Z22__fetch_global_Serial1v+0x30>
   d7dc0:	4a08      	ldr	r2, [pc, #32]	; (d7de4 <_Z22__fetch_global_Serial1v+0x38>)
   d7dc2:	4b09      	ldr	r3, [pc, #36]	; (d7de8 <_Z22__fetch_global_Serial1v+0x3c>)
   d7dc4:	4809      	ldr	r0, [pc, #36]	; (d7dec <_Z22__fetch_global_Serial1v+0x40>)
   d7dc6:	4621      	mov	r1, r4
   d7dc8:	f7ff ffcc 	bl	d7d64 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d7dcc:	4628      	mov	r0, r5
   d7dce:	f7fc f97a 	bl	d40c6 <__cxa_guard_release>
   d7dd2:	4a07      	ldr	r2, [pc, #28]	; (d7df0 <_Z22__fetch_global_Serial1v+0x44>)
   d7dd4:	4907      	ldr	r1, [pc, #28]	; (d7df4 <_Z22__fetch_global_Serial1v+0x48>)
   d7dd6:	4805      	ldr	r0, [pc, #20]	; (d7dec <_Z22__fetch_global_Serial1v+0x40>)
   d7dd8:	f000 f9aa 	bl	d8130 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d7ddc:	4803      	ldr	r0, [pc, #12]	; (d7dec <_Z22__fetch_global_Serial1v+0x40>)
   d7dde:	bd38      	pop	{r3, r4, r5, pc}
   d7de0:	2003e664 	.word	0x2003e664
   d7de4:	2003e668 	.word	0x2003e668
   d7de8:	2003e5e0 	.word	0x2003e5e0
   d7dec:	2003e5cc 	.word	0x2003e5cc
   d7df0:	2003e294 	.word	0x2003e294
   d7df4:	000d7ce1 	.word	0x000d7ce1

000d7df8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7df8:	7441      	strb	r1, [r0, #17]
   d7dfa:	4770      	bx	lr

000d7dfc <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d7dfc:	4770      	bx	lr

000d7dfe <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d7dfe:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d7e00:	2100      	movs	r1, #0
   d7e02:	7c00      	ldrb	r0, [r0, #16]
   d7e04:	f7fc ffaa 	bl	d4d5c <HAL_USB_USART_Receive_Data>
}
   d7e08:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7e0c:	bf28      	it	cs
   d7e0e:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d7e12:	bd08      	pop	{r3, pc}

000d7e14 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d7e14:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d7e16:	2101      	movs	r1, #1
   d7e18:	7c00      	ldrb	r0, [r0, #16]
   d7e1a:	f7fc ff9f 	bl	d4d5c <HAL_USB_USART_Receive_Data>
}
   d7e1e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7e22:	bf28      	it	cs
   d7e24:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d7e28:	bd08      	pop	{r3, pc}

000d7e2a <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d7e2a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d7e2c:	7c00      	ldrb	r0, [r0, #16]
   d7e2e:	f7fc ff8d 	bl	d4d4c <HAL_USB_USART_Available_Data_For_Write>
}
   d7e32:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7e36:	bd08      	pop	{r3, pc}

000d7e38 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d7e38:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d7e3a:	7c00      	ldrb	r0, [r0, #16]
   d7e3c:	f7fc ff7e 	bl	d4d3c <HAL_USB_USART_Available_Data>
}
   d7e40:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7e44:	bd08      	pop	{r3, pc}

000d7e46 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d7e46:	7c00      	ldrb	r0, [r0, #16]
   d7e48:	f7fc bf98 	b.w	d4d7c <HAL_USB_USART_Flush_Data>

000d7e4c <_ZN9USBSerialD0Ev>:
   d7e4c:	b510      	push	{r4, lr}
   d7e4e:	2114      	movs	r1, #20
   d7e50:	4604      	mov	r4, r0
   d7e52:	f000 f972 	bl	d813a <_ZdlPvj>
   d7e56:	4620      	mov	r0, r4
   d7e58:	bd10      	pop	{r4, pc}

000d7e5a <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d7e5a:	b538      	push	{r3, r4, r5, lr}
   d7e5c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7e5e:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d7e60:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7e62:	f7fc ff73 	bl	d4d4c <HAL_USB_USART_Available_Data_For_Write>
   d7e66:	2800      	cmp	r0, #0
   d7e68:	dc01      	bgt.n	d7e6e <_ZN9USBSerial5writeEh+0x14>
   d7e6a:	7c60      	ldrb	r0, [r4, #17]
   d7e6c:	b128      	cbz	r0, d7e7a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d7e6e:	4629      	mov	r1, r5
   d7e70:	7c20      	ldrb	r0, [r4, #16]
   d7e72:	f7fc ff7b 	bl	d4d6c <HAL_USB_USART_Send_Data>
   d7e76:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d7e7a:	bd38      	pop	{r3, r4, r5, pc}

000d7e7c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7e7c:	b510      	push	{r4, lr}
   d7e7e:	4604      	mov	r4, r0
   d7e80:	2300      	movs	r3, #0
   d7e82:	6063      	str	r3, [r4, #4]
   d7e84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7e88:	60a3      	str	r3, [r4, #8]
   d7e8a:	4b05      	ldr	r3, [pc, #20]	; (d7ea0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d7e8c:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d7e8e:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7e90:	4608      	mov	r0, r1
{
  _serial = serial;
   d7e92:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d7e94:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d7e96:	4611      	mov	r1, r2
   d7e98:	f7fc ff38 	bl	d4d0c <HAL_USB_USART_Init>
}
   d7e9c:	4620      	mov	r0, r4
   d7e9e:	bd10      	pop	{r4, pc}
   d7ea0:	000d9660 	.word	0x000d9660

000d7ea4 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d7ea4:	2200      	movs	r2, #0
   d7ea6:	7c00      	ldrb	r0, [r0, #16]
   d7ea8:	f7fc bf38 	b.w	d4d1c <HAL_USB_USART_Begin>

000d7eac <_ZN9USBSerial3endEv>:
}

void USBSerial::end()
{
    HAL_USB_USART_End(_serial);
   d7eac:	7c00      	ldrb	r0, [r0, #16]
   d7eae:	f7fc bf3d 	b.w	d4d2c <HAL_USB_USART_End>

000d7eb2 <_ZN9USBSerial11isConnectedEv>:
bool USBSerial::isEnabled() {
  return HAL_USB_USART_Is_Enabled(_serial);
}

bool USBSerial::isConnected() {
  return HAL_USB_USART_Is_Connected(_serial);
   d7eb2:	7c00      	ldrb	r0, [r0, #16]
   d7eb4:	f7fc bf6a 	b.w	d4d8c <HAL_USB_USART_Is_Connected>

000d7eb8 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d7eb8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d7eba:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d7ebc:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d7ebe:	2100      	movs	r1, #0
   d7ec0:	f000 ff1b 	bl	d8cfa <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d7ec4:	4620      	mov	r0, r4
   d7ec6:	bd10      	pop	{r4, pc}

000d7ec8 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d7ec8:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7eca:	4d0e      	ldr	r5, [pc, #56]	; (d7f04 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d7ecc:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d7ece:	a801      	add	r0, sp, #4
   d7ed0:	f7ff fff2 	bl	d7eb8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7ed4:	6829      	ldr	r1, [r5, #0]
   d7ed6:	f011 0401 	ands.w	r4, r1, #1
   d7eda:	d110      	bne.n	d7efe <_Z16_fetch_usbserialv+0x36>
   d7edc:	4628      	mov	r0, r5
   d7ede:	f7fc f8ed 	bl	d40bc <__cxa_guard_acquire>
   d7ee2:	b160      	cbz	r0, d7efe <_Z16_fetch_usbserialv+0x36>
   d7ee4:	aa01      	add	r2, sp, #4
   d7ee6:	4621      	mov	r1, r4
   d7ee8:	4807      	ldr	r0, [pc, #28]	; (d7f08 <_Z16_fetch_usbserialv+0x40>)
   d7eea:	f7ff ffc7 	bl	d7e7c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d7eee:	4628      	mov	r0, r5
   d7ef0:	f7fc f8e9 	bl	d40c6 <__cxa_guard_release>
   d7ef4:	4a05      	ldr	r2, [pc, #20]	; (d7f0c <_Z16_fetch_usbserialv+0x44>)
   d7ef6:	4906      	ldr	r1, [pc, #24]	; (d7f10 <_Z16_fetch_usbserialv+0x48>)
   d7ef8:	4803      	ldr	r0, [pc, #12]	; (d7f08 <_Z16_fetch_usbserialv+0x40>)
   d7efa:	f000 f919 	bl	d8130 <__aeabi_atexit>
	return _usbserial;
}
   d7efe:	4802      	ldr	r0, [pc, #8]	; (d7f08 <_Z16_fetch_usbserialv+0x40>)
   d7f00:	b007      	add	sp, #28
   d7f02:	bd30      	pop	{r4, r5, pc}
   d7f04:	2003e6ec 	.word	0x2003e6ec
   d7f08:	2003e6f0 	.word	0x2003e6f0
   d7f0c:	2003e294 	.word	0x2003e294
   d7f10:	000d7dfd 	.word	0x000d7dfd

000d7f14 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d7f14:	2200      	movs	r2, #0
   d7f16:	4611      	mov	r1, r2
   d7f18:	6840      	ldr	r0, [r0, #4]
   d7f1a:	f7fc bfdb 	b.w	d4ed4 <network_ready>

000d7f1e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7f1e:	2200      	movs	r2, #0
   d7f20:	4611      	mov	r1, r2
   d7f22:	6840      	ldr	r0, [r0, #4]
   d7f24:	f7fc bff6 	b.w	d4f14 <network_listening>

000d7f28 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d7f28:	2200      	movs	r2, #0
   d7f2a:	4611      	mov	r1, r2
   d7f2c:	6840      	ldr	r0, [r0, #4]
   d7f2e:	f7fd b801 	b.w	d4f34 <network_get_listen_timeout>

000d7f32 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d7f32:	2200      	movs	r2, #0
   d7f34:	6840      	ldr	r0, [r0, #4]
   d7f36:	f7fc bff5 	b.w	d4f24 <network_set_listen_timeout>

000d7f3a <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d7f3a:	2200      	movs	r2, #0
   d7f3c:	f081 0101 	eor.w	r1, r1, #1
   d7f40:	6840      	ldr	r0, [r0, #4]
   d7f42:	f7fc bfdf 	b.w	d4f04 <network_listen>

000d7f46 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d7f46:	2300      	movs	r3, #0
   d7f48:	461a      	mov	r2, r3
   d7f4a:	4619      	mov	r1, r3
   d7f4c:	6840      	ldr	r0, [r0, #4]
   d7f4e:	f7fc bfd1 	b.w	d4ef4 <network_off>

000d7f52 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d7f52:	2300      	movs	r3, #0
   d7f54:	461a      	mov	r2, r3
   d7f56:	4619      	mov	r1, r3
   d7f58:	6840      	ldr	r0, [r0, #4]
   d7f5a:	f7fc bfc3 	b.w	d4ee4 <network_on>

000d7f5e <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d7f5e:	2200      	movs	r2, #0
   d7f60:	4611      	mov	r1, r2
   d7f62:	6840      	ldr	r0, [r0, #4]
   d7f64:	f7fc bfa6 	b.w	d4eb4 <network_connecting>

000d7f68 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7f68:	2200      	movs	r2, #0
   d7f6a:	2102      	movs	r1, #2
   d7f6c:	6840      	ldr	r0, [r0, #4]
   d7f6e:	f7fc bfa9 	b.w	d4ec4 <network_disconnect>

000d7f72 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d7f72:	2300      	movs	r3, #0
   d7f74:	461a      	mov	r2, r3
   d7f76:	6840      	ldr	r0, [r0, #4]
   d7f78:	f7fc bf94 	b.w	d4ea4 <network_connect>

000d7f7c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d7f7c:	4b02      	ldr	r3, [pc, #8]	; (d7f88 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d7f7e:	2204      	movs	r2, #4
   d7f80:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d7f82:	4a02      	ldr	r2, [pc, #8]	; (d7f8c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d7f84:	601a      	str	r2, [r3, #0]
   d7f86:	4770      	bx	lr
   d7f88:	2003e704 	.word	0x2003e704
   d7f8c:	000d9690 	.word	0x000d9690

000d7f90 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d7f90:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d7f92:	4b0c      	ldr	r3, [pc, #48]	; (d7fc4 <serialEventRun+0x34>)
   d7f94:	b133      	cbz	r3, d7fa4 <serialEventRun+0x14>
   d7f96:	f7ff ff97 	bl	d7ec8 <_Z16_fetch_usbserialv>
   d7f9a:	6803      	ldr	r3, [r0, #0]
   d7f9c:	691b      	ldr	r3, [r3, #16]
   d7f9e:	4798      	blx	r3
   d7fa0:	2800      	cmp	r0, #0
   d7fa2:	dc09      	bgt.n	d7fb8 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d7fa4:	4b08      	ldr	r3, [pc, #32]	; (d7fc8 <serialEventRun+0x38>)
   d7fa6:	b163      	cbz	r3, d7fc2 <serialEventRun+0x32>
   d7fa8:	f7ff ff00 	bl	d7dac <_Z22__fetch_global_Serial1v>
   d7fac:	6803      	ldr	r3, [r0, #0]
   d7fae:	691b      	ldr	r3, [r3, #16]
   d7fb0:	4798      	blx	r3
   d7fb2:	2800      	cmp	r0, #0
   d7fb4:	dc03      	bgt.n	d7fbe <serialEventRun+0x2e>
   d7fb6:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d7fb8:	f3af 8000 	nop.w
   d7fbc:	e7f2      	b.n	d7fa4 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d7fbe:	f3af 8000 	nop.w
   d7fc2:	bd08      	pop	{r3, pc}
	...

000d7fcc <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d7fcc:	b508      	push	{r3, lr}
	serialEventRun();
   d7fce:	f7ff ffdf 	bl	d7f90 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d7fd2:	f7fc fdab 	bl	d4b2c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d7fd6:	4b01      	ldr	r3, [pc, #4]	; (d7fdc <_post_loop+0x10>)
   d7fd8:	6018      	str	r0, [r3, #0]
   d7fda:	bd08      	pop	{r3, pc}
   d7fdc:	2003e710 	.word	0x2003e710

000d7fe0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d7fe0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7fe2:	2300      	movs	r3, #0
   d7fe4:	9300      	str	r3, [sp, #0]
   d7fe6:	461a      	mov	r2, r3
   d7fe8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7fec:	f7fc ff40 	bl	d4e70 <system_ctrl_set_result>
}
   d7ff0:	b003      	add	sp, #12
   d7ff2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7ff8 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d7ff8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d7ffa:	8843      	ldrh	r3, [r0, #2]
   d7ffc:	2b0a      	cmp	r3, #10
   d7ffe:	d008      	beq.n	d8012 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d8000:	2b50      	cmp	r3, #80	; 0x50
   d8002:	d109      	bne.n	d8018 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d8004:	4b09      	ldr	r3, [pc, #36]	; (d802c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d8006:	681b      	ldr	r3, [r3, #0]
   d8008:	b13b      	cbz	r3, d801a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d800a:	b003      	add	sp, #12
   d800c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d8010:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d8012:	f7ff ffe5 	bl	d7fe0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d8016:	e006      	b.n	d8026 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d8018:	2300      	movs	r3, #0
   d801a:	9300      	str	r3, [sp, #0]
   d801c:	461a      	mov	r2, r3
   d801e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d8022:	f7fc ff25 	bl	d4e70 <system_ctrl_set_result>
        break;
    }
}
   d8026:	b003      	add	sp, #12
   d8028:	f85d fb04 	ldr.w	pc, [sp], #4
   d802c:	2003e70c 	.word	0x2003e70c

000d8030 <module_user_init_hook>:

void module_user_init_hook()
{
   d8030:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d8032:	f7fc fd6b 	bl	d4b0c <HAL_RNG_GetRandomNumber>
   d8036:	4604      	mov	r4, r0
    srand(seed);
   d8038:	f000 fe68 	bl	d8d0c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d803c:	4b07      	ldr	r3, [pc, #28]	; (d805c <module_user_init_hook+0x2c>)
   d803e:	b113      	cbz	r3, d8046 <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d8040:	4620      	mov	r0, r4
   d8042:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d8046:	2100      	movs	r1, #0
   d8048:	4804      	ldr	r0, [pc, #16]	; (d805c <module_user_init_hook+0x2c>)
   d804a:	f7fc ff23 	bl	d4e94 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d804e:	2100      	movs	r1, #0
   d8050:	4803      	ldr	r0, [pc, #12]	; (d8060 <module_user_init_hook+0x30>)
}
   d8052:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d8056:	f7fc bf01 	b.w	d4e5c <system_ctrl_set_app_request_handler>
   d805a:	bf00      	nop
   d805c:	00000000 	.word	0x00000000
   d8060:	000d7ff9 	.word	0x000d7ff9

000d8064 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d8064:	b510      	push	{r4, lr}
   d8066:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d8068:	480f      	ldr	r0, [pc, #60]	; (d80a8 <pinAvailable+0x44>)
   d806a:	f7ff fd8b 	bl	d7b84 <_ZN8SPIClass9isEnabledEv>
   d806e:	b128      	cbz	r0, d807c <pinAvailable+0x18>
   d8070:	f1a4 030b 	sub.w	r3, r4, #11
   d8074:	2b02      	cmp	r3, #2
   d8076:	d801      	bhi.n	d807c <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d8078:	2000      	movs	r0, #0
   d807a:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d807c:	f000 f816 	bl	d80ac <_Z19__fetch_global_Wirev>
   d8080:	f7fe f8a6 	bl	d61d0 <_ZN7TwoWire9isEnabledEv>
   d8084:	b108      	cbz	r0, d808a <pinAvailable+0x26>
   d8086:	2c01      	cmp	r4, #1
   d8088:	d9f6      	bls.n	d8078 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d808a:	f7ff fe8f 	bl	d7dac <_Z22__fetch_global_Serial1v>
   d808e:	f7ff fe89 	bl	d7da4 <_ZN11USARTSerial9isEnabledEv>
   d8092:	b118      	cbz	r0, d809c <pinAvailable+0x38>
   d8094:	f1a4 0309 	sub.w	r3, r4, #9
   d8098:	2b01      	cmp	r3, #1
   d809a:	d9ed      	bls.n	d8078 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d809c:	2c23      	cmp	r4, #35	; 0x23
   d809e:	bf8c      	ite	hi
   d80a0:	2000      	movhi	r0, #0
   d80a2:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d80a4:	bd10      	pop	{r4, pc}
   d80a6:	bf00      	nop
   d80a8:	2003e72c 	.word	0x2003e72c

000d80ac <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d80ac:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d80ae:	4d0b      	ldr	r5, [pc, #44]	; (d80dc <_Z19__fetch_global_Wirev+0x30>)
   d80b0:	6829      	ldr	r1, [r5, #0]
   d80b2:	f011 0401 	ands.w	r4, r1, #1
   d80b6:	d10f      	bne.n	d80d8 <_Z19__fetch_global_Wirev+0x2c>
   d80b8:	4628      	mov	r0, r5
   d80ba:	f7fb ffff 	bl	d40bc <__cxa_guard_acquire>
   d80be:	b158      	cbz	r0, d80d8 <_Z19__fetch_global_Wirev+0x2c>
   d80c0:	4621      	mov	r1, r4
   d80c2:	4807      	ldr	r0, [pc, #28]	; (d80e0 <_Z19__fetch_global_Wirev+0x34>)
   d80c4:	f7fe f872 	bl	d61ac <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d80c8:	4628      	mov	r0, r5
   d80ca:	f7fb fffc 	bl	d40c6 <__cxa_guard_release>
   d80ce:	4a05      	ldr	r2, [pc, #20]	; (d80e4 <_Z19__fetch_global_Wirev+0x38>)
   d80d0:	4905      	ldr	r1, [pc, #20]	; (d80e8 <_Z19__fetch_global_Wirev+0x3c>)
   d80d2:	4803      	ldr	r0, [pc, #12]	; (d80e0 <_Z19__fetch_global_Wirev+0x34>)
   d80d4:	f000 f82c 	bl	d8130 <__aeabi_atexit>
	return wire;
}
   d80d8:	4801      	ldr	r0, [pc, #4]	; (d80e0 <_Z19__fetch_global_Wirev+0x34>)
   d80da:	bd38      	pop	{r3, r4, r5, pc}
   d80dc:	2003e714 	.word	0x2003e714
   d80e0:	2003e718 	.word	0x2003e718
   d80e4:	2003e294 	.word	0x2003e294
   d80e8:	000d6155 	.word	0x000d6155

000d80ec <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d80ec:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d80ee:	4c0c      	ldr	r4, [pc, #48]	; (d8120 <_GLOBAL__sub_I_SPI+0x34>)
   d80f0:	4e0c      	ldr	r6, [pc, #48]	; (d8124 <_GLOBAL__sub_I_SPI+0x38>)
   d80f2:	4d0d      	ldr	r5, [pc, #52]	; (d8128 <_GLOBAL__sub_I_SPI+0x3c>)
   d80f4:	2100      	movs	r1, #0
   d80f6:	4620      	mov	r0, r4
   d80f8:	f7ff fd30 	bl	d7b5c <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d80fc:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d80fe:	4c0b      	ldr	r4, [pc, #44]	; (d812c <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d8100:	4632      	mov	r2, r6
   d8102:	4629      	mov	r1, r5
   d8104:	f000 f814 	bl	d8130 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d8108:	2101      	movs	r1, #1
   d810a:	4620      	mov	r0, r4
   d810c:	f7ff fd26 	bl	d7b5c <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d8110:	4632      	mov	r2, r6
   d8112:	4629      	mov	r1, r5
   d8114:	4620      	mov	r0, r4
   d8116:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d811a:	f000 b809 	b.w	d8130 <__aeabi_atexit>
   d811e:	bf00      	nop
   d8120:	2003e72c 	.word	0x2003e72c
   d8124:	2003e294 	.word	0x2003e294
   d8128:	000d7b4b 	.word	0x000d7b4b
   d812c:	2003e73c 	.word	0x2003e73c

000d8130 <__aeabi_atexit>:
   d8130:	460b      	mov	r3, r1
   d8132:	4601      	mov	r1, r0
   d8134:	4618      	mov	r0, r3
   d8136:	f000 bd9d 	b.w	d8c74 <__cxa_atexit>

000d813a <_ZdlPvj>:
   d813a:	f7fb bfb0 	b.w	d409e <_ZdlPv>
	...

000d8140 <_ZSt15get_new_handlerv>:
   d8140:	4b02      	ldr	r3, [pc, #8]	; (d814c <_ZSt15get_new_handlerv+0xc>)
   d8142:	6818      	ldr	r0, [r3, #0]
   d8144:	f3bf 8f5f 	dmb	sy
   d8148:	4770      	bx	lr
   d814a:	bf00      	nop
   d814c:	2003e74c 	.word	0x2003e74c

000d8150 <_ZnwjRKSt9nothrow_t>:
   d8150:	b510      	push	{r4, lr}
   d8152:	2800      	cmp	r0, #0
   d8154:	bf14      	ite	ne
   d8156:	4604      	movne	r4, r0
   d8158:	2401      	moveq	r4, #1
   d815a:	4620      	mov	r0, r4
   d815c:	f7fc fef2 	bl	d4f44 <malloc>
   d8160:	b920      	cbnz	r0, d816c <_ZnwjRKSt9nothrow_t+0x1c>
   d8162:	f7ff ffed 	bl	d8140 <_ZSt15get_new_handlerv>
   d8166:	b108      	cbz	r0, d816c <_ZnwjRKSt9nothrow_t+0x1c>
   d8168:	4780      	blx	r0
   d816a:	e7f6      	b.n	d815a <_ZnwjRKSt9nothrow_t+0xa>
   d816c:	bd10      	pop	{r4, pc}
	...

000d8170 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d8170:	4b24      	ldr	r3, [pc, #144]	; (d8204 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d8172:	681a      	ldr	r2, [r3, #0]
   d8174:	07d0      	lsls	r0, r2, #31
   d8176:	bf5c      	itt	pl
   d8178:	2201      	movpl	r2, #1
   d817a:	601a      	strpl	r2, [r3, #0]
   d817c:	4b22      	ldr	r3, [pc, #136]	; (d8208 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d817e:	681a      	ldr	r2, [r3, #0]
   d8180:	07d1      	lsls	r1, r2, #31
   d8182:	bf5c      	itt	pl
   d8184:	2201      	movpl	r2, #1
   d8186:	601a      	strpl	r2, [r3, #0]
   d8188:	4b20      	ldr	r3, [pc, #128]	; (d820c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d818a:	681a      	ldr	r2, [r3, #0]
   d818c:	07d2      	lsls	r2, r2, #31
   d818e:	bf5c      	itt	pl
   d8190:	2201      	movpl	r2, #1
   d8192:	601a      	strpl	r2, [r3, #0]
   d8194:	4b1e      	ldr	r3, [pc, #120]	; (d8210 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d8196:	681a      	ldr	r2, [r3, #0]
   d8198:	07d0      	lsls	r0, r2, #31
   d819a:	bf5c      	itt	pl
   d819c:	2201      	movpl	r2, #1
   d819e:	601a      	strpl	r2, [r3, #0]
   d81a0:	4b1c      	ldr	r3, [pc, #112]	; (d8214 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d81a2:	681a      	ldr	r2, [r3, #0]
   d81a4:	07d1      	lsls	r1, r2, #31
   d81a6:	bf5c      	itt	pl
   d81a8:	2201      	movpl	r2, #1
   d81aa:	601a      	strpl	r2, [r3, #0]
   d81ac:	4b1a      	ldr	r3, [pc, #104]	; (d8218 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d81ae:	681a      	ldr	r2, [r3, #0]
   d81b0:	07d2      	lsls	r2, r2, #31
   d81b2:	bf5c      	itt	pl
   d81b4:	2201      	movpl	r2, #1
   d81b6:	601a      	strpl	r2, [r3, #0]
   d81b8:	4b18      	ldr	r3, [pc, #96]	; (d821c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d81ba:	681a      	ldr	r2, [r3, #0]
   d81bc:	07d0      	lsls	r0, r2, #31
   d81be:	bf5c      	itt	pl
   d81c0:	2201      	movpl	r2, #1
   d81c2:	601a      	strpl	r2, [r3, #0]
   d81c4:	4b16      	ldr	r3, [pc, #88]	; (d8220 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d81c6:	681a      	ldr	r2, [r3, #0]
   d81c8:	07d1      	lsls	r1, r2, #31
   d81ca:	bf5c      	itt	pl
   d81cc:	2201      	movpl	r2, #1
   d81ce:	601a      	strpl	r2, [r3, #0]
   d81d0:	4b14      	ldr	r3, [pc, #80]	; (d8224 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d81d2:	681a      	ldr	r2, [r3, #0]
   d81d4:	07d2      	lsls	r2, r2, #31
   d81d6:	bf5c      	itt	pl
   d81d8:	2201      	movpl	r2, #1
   d81da:	601a      	strpl	r2, [r3, #0]
   d81dc:	4b12      	ldr	r3, [pc, #72]	; (d8228 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d81de:	681a      	ldr	r2, [r3, #0]
   d81e0:	07d0      	lsls	r0, r2, #31
   d81e2:	bf5c      	itt	pl
   d81e4:	2201      	movpl	r2, #1
   d81e6:	601a      	strpl	r2, [r3, #0]
   d81e8:	4b10      	ldr	r3, [pc, #64]	; (d822c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d81ea:	681a      	ldr	r2, [r3, #0]
   d81ec:	07d1      	lsls	r1, r2, #31
   d81ee:	bf5c      	itt	pl
   d81f0:	2201      	movpl	r2, #1
   d81f2:	601a      	strpl	r2, [r3, #0]
   d81f4:	4b0e      	ldr	r3, [pc, #56]	; (d8230 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d81f6:	681a      	ldr	r2, [r3, #0]
   d81f8:	07d2      	lsls	r2, r2, #31
   d81fa:	bf5c      	itt	pl
   d81fc:	2201      	movpl	r2, #1
   d81fe:	601a      	strpl	r2, [r3, #0]
   d8200:	4770      	bx	lr
   d8202:	bf00      	nop
   d8204:	2003e77c 	.word	0x2003e77c
   d8208:	2003e778 	.word	0x2003e778
   d820c:	2003e774 	.word	0x2003e774
   d8210:	2003e770 	.word	0x2003e770
   d8214:	2003e76c 	.word	0x2003e76c
   d8218:	2003e768 	.word	0x2003e768
   d821c:	2003e764 	.word	0x2003e764
   d8220:	2003e760 	.word	0x2003e760
   d8224:	2003e75c 	.word	0x2003e75c
   d8228:	2003e758 	.word	0x2003e758
   d822c:	2003e754 	.word	0x2003e754
   d8230:	2003e750 	.word	0x2003e750

000d8234 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d8234:	4b18      	ldr	r3, [pc, #96]	; (d8298 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d8236:	681a      	ldr	r2, [r3, #0]
   d8238:	07d1      	lsls	r1, r2, #31
   d823a:	bf5c      	itt	pl
   d823c:	2201      	movpl	r2, #1
   d823e:	601a      	strpl	r2, [r3, #0]
   d8240:	4b16      	ldr	r3, [pc, #88]	; (d829c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d8242:	681a      	ldr	r2, [r3, #0]
   d8244:	07d2      	lsls	r2, r2, #31
   d8246:	bf5c      	itt	pl
   d8248:	2201      	movpl	r2, #1
   d824a:	601a      	strpl	r2, [r3, #0]
   d824c:	4b14      	ldr	r3, [pc, #80]	; (d82a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d824e:	681a      	ldr	r2, [r3, #0]
   d8250:	07d0      	lsls	r0, r2, #31
   d8252:	bf5c      	itt	pl
   d8254:	2201      	movpl	r2, #1
   d8256:	601a      	strpl	r2, [r3, #0]
   d8258:	4b12      	ldr	r3, [pc, #72]	; (d82a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d825a:	681a      	ldr	r2, [r3, #0]
   d825c:	07d1      	lsls	r1, r2, #31
   d825e:	bf5c      	itt	pl
   d8260:	2201      	movpl	r2, #1
   d8262:	601a      	strpl	r2, [r3, #0]
   d8264:	4b10      	ldr	r3, [pc, #64]	; (d82a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d8266:	681a      	ldr	r2, [r3, #0]
   d8268:	07d2      	lsls	r2, r2, #31
   d826a:	bf5c      	itt	pl
   d826c:	2201      	movpl	r2, #1
   d826e:	601a      	strpl	r2, [r3, #0]
   d8270:	4b0e      	ldr	r3, [pc, #56]	; (d82ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d8272:	681a      	ldr	r2, [r3, #0]
   d8274:	07d0      	lsls	r0, r2, #31
   d8276:	bf5c      	itt	pl
   d8278:	2201      	movpl	r2, #1
   d827a:	601a      	strpl	r2, [r3, #0]
   d827c:	4b0c      	ldr	r3, [pc, #48]	; (d82b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d827e:	681a      	ldr	r2, [r3, #0]
   d8280:	07d1      	lsls	r1, r2, #31
   d8282:	bf5c      	itt	pl
   d8284:	2201      	movpl	r2, #1
   d8286:	601a      	strpl	r2, [r3, #0]
   d8288:	4b0a      	ldr	r3, [pc, #40]	; (d82b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d828a:	681a      	ldr	r2, [r3, #0]
   d828c:	07d2      	lsls	r2, r2, #31
   d828e:	bf5c      	itt	pl
   d8290:	2201      	movpl	r2, #1
   d8292:	601a      	strpl	r2, [r3, #0]
   d8294:	4770      	bx	lr
   d8296:	bf00      	nop
   d8298:	2003e79c 	.word	0x2003e79c
   d829c:	2003e798 	.word	0x2003e798
   d82a0:	2003e794 	.word	0x2003e794
   d82a4:	2003e790 	.word	0x2003e790
   d82a8:	2003e78c 	.word	0x2003e78c
   d82ac:	2003e788 	.word	0x2003e788
   d82b0:	2003e784 	.word	0x2003e784
   d82b4:	2003e780 	.word	0x2003e780

000d82b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d82b8:	4b18      	ldr	r3, [pc, #96]	; (d831c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d82ba:	681a      	ldr	r2, [r3, #0]
   d82bc:	07d1      	lsls	r1, r2, #31
   d82be:	bf5c      	itt	pl
   d82c0:	2201      	movpl	r2, #1
   d82c2:	601a      	strpl	r2, [r3, #0]
   d82c4:	4b16      	ldr	r3, [pc, #88]	; (d8320 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d82c6:	681a      	ldr	r2, [r3, #0]
   d82c8:	07d2      	lsls	r2, r2, #31
   d82ca:	bf5c      	itt	pl
   d82cc:	2201      	movpl	r2, #1
   d82ce:	601a      	strpl	r2, [r3, #0]
   d82d0:	4b14      	ldr	r3, [pc, #80]	; (d8324 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d82d2:	681a      	ldr	r2, [r3, #0]
   d82d4:	07d0      	lsls	r0, r2, #31
   d82d6:	bf5c      	itt	pl
   d82d8:	2201      	movpl	r2, #1
   d82da:	601a      	strpl	r2, [r3, #0]
   d82dc:	4b12      	ldr	r3, [pc, #72]	; (d8328 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d82de:	681a      	ldr	r2, [r3, #0]
   d82e0:	07d1      	lsls	r1, r2, #31
   d82e2:	bf5c      	itt	pl
   d82e4:	2201      	movpl	r2, #1
   d82e6:	601a      	strpl	r2, [r3, #0]
   d82e8:	4b10      	ldr	r3, [pc, #64]	; (d832c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d82ea:	681a      	ldr	r2, [r3, #0]
   d82ec:	07d2      	lsls	r2, r2, #31
   d82ee:	bf5c      	itt	pl
   d82f0:	2201      	movpl	r2, #1
   d82f2:	601a      	strpl	r2, [r3, #0]
   d82f4:	4b0e      	ldr	r3, [pc, #56]	; (d8330 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d82f6:	681a      	ldr	r2, [r3, #0]
   d82f8:	07d0      	lsls	r0, r2, #31
   d82fa:	bf5c      	itt	pl
   d82fc:	2201      	movpl	r2, #1
   d82fe:	601a      	strpl	r2, [r3, #0]
   d8300:	4b0c      	ldr	r3, [pc, #48]	; (d8334 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d8302:	681a      	ldr	r2, [r3, #0]
   d8304:	07d1      	lsls	r1, r2, #31
   d8306:	bf5c      	itt	pl
   d8308:	2201      	movpl	r2, #1
   d830a:	601a      	strpl	r2, [r3, #0]
   d830c:	4b0a      	ldr	r3, [pc, #40]	; (d8338 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d830e:	681a      	ldr	r2, [r3, #0]
   d8310:	07d2      	lsls	r2, r2, #31
   d8312:	bf5c      	itt	pl
   d8314:	2201      	movpl	r2, #1
   d8316:	601a      	strpl	r2, [r3, #0]
   d8318:	4770      	bx	lr
   d831a:	bf00      	nop
   d831c:	2003e7bc 	.word	0x2003e7bc
   d8320:	2003e7b8 	.word	0x2003e7b8
   d8324:	2003e7b4 	.word	0x2003e7b4
   d8328:	2003e7b0 	.word	0x2003e7b0
   d832c:	2003e7ac 	.word	0x2003e7ac
   d8330:	2003e7a8 	.word	0x2003e7a8
   d8334:	2003e7a4 	.word	0x2003e7a4
   d8338:	2003e7a0 	.word	0x2003e7a0

000d833c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d833c:	4b24      	ldr	r3, [pc, #144]	; (d83d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d833e:	681a      	ldr	r2, [r3, #0]
   d8340:	07d0      	lsls	r0, r2, #31
   d8342:	bf5c      	itt	pl
   d8344:	2201      	movpl	r2, #1
   d8346:	601a      	strpl	r2, [r3, #0]
   d8348:	4b22      	ldr	r3, [pc, #136]	; (d83d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d834a:	681a      	ldr	r2, [r3, #0]
   d834c:	07d1      	lsls	r1, r2, #31
   d834e:	bf5c      	itt	pl
   d8350:	2201      	movpl	r2, #1
   d8352:	601a      	strpl	r2, [r3, #0]
   d8354:	4b20      	ldr	r3, [pc, #128]	; (d83d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d8356:	681a      	ldr	r2, [r3, #0]
   d8358:	07d2      	lsls	r2, r2, #31
   d835a:	bf5c      	itt	pl
   d835c:	2201      	movpl	r2, #1
   d835e:	601a      	strpl	r2, [r3, #0]
   d8360:	4b1e      	ldr	r3, [pc, #120]	; (d83dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d8362:	681a      	ldr	r2, [r3, #0]
   d8364:	07d0      	lsls	r0, r2, #31
   d8366:	bf5c      	itt	pl
   d8368:	2201      	movpl	r2, #1
   d836a:	601a      	strpl	r2, [r3, #0]
   d836c:	4b1c      	ldr	r3, [pc, #112]	; (d83e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d836e:	681a      	ldr	r2, [r3, #0]
   d8370:	07d1      	lsls	r1, r2, #31
   d8372:	bf5c      	itt	pl
   d8374:	2201      	movpl	r2, #1
   d8376:	601a      	strpl	r2, [r3, #0]
   d8378:	4b1a      	ldr	r3, [pc, #104]	; (d83e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d837a:	681a      	ldr	r2, [r3, #0]
   d837c:	07d2      	lsls	r2, r2, #31
   d837e:	bf5c      	itt	pl
   d8380:	2201      	movpl	r2, #1
   d8382:	601a      	strpl	r2, [r3, #0]
   d8384:	4b18      	ldr	r3, [pc, #96]	; (d83e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d8386:	681a      	ldr	r2, [r3, #0]
   d8388:	07d0      	lsls	r0, r2, #31
   d838a:	bf5c      	itt	pl
   d838c:	2201      	movpl	r2, #1
   d838e:	601a      	strpl	r2, [r3, #0]
   d8390:	4b16      	ldr	r3, [pc, #88]	; (d83ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d8392:	681a      	ldr	r2, [r3, #0]
   d8394:	07d1      	lsls	r1, r2, #31
   d8396:	bf5c      	itt	pl
   d8398:	2201      	movpl	r2, #1
   d839a:	601a      	strpl	r2, [r3, #0]
   d839c:	4b14      	ldr	r3, [pc, #80]	; (d83f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d839e:	681a      	ldr	r2, [r3, #0]
   d83a0:	07d2      	lsls	r2, r2, #31
   d83a2:	bf5c      	itt	pl
   d83a4:	2201      	movpl	r2, #1
   d83a6:	601a      	strpl	r2, [r3, #0]
   d83a8:	4b12      	ldr	r3, [pc, #72]	; (d83f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d83aa:	681a      	ldr	r2, [r3, #0]
   d83ac:	07d0      	lsls	r0, r2, #31
   d83ae:	bf5c      	itt	pl
   d83b0:	2201      	movpl	r2, #1
   d83b2:	601a      	strpl	r2, [r3, #0]
   d83b4:	4b10      	ldr	r3, [pc, #64]	; (d83f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d83b6:	681a      	ldr	r2, [r3, #0]
   d83b8:	07d1      	lsls	r1, r2, #31
   d83ba:	bf5c      	itt	pl
   d83bc:	2201      	movpl	r2, #1
   d83be:	601a      	strpl	r2, [r3, #0]
   d83c0:	4b0e      	ldr	r3, [pc, #56]	; (d83fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d83c2:	681a      	ldr	r2, [r3, #0]
   d83c4:	07d2      	lsls	r2, r2, #31
   d83c6:	bf5c      	itt	pl
   d83c8:	2201      	movpl	r2, #1
   d83ca:	601a      	strpl	r2, [r3, #0]
   d83cc:	4770      	bx	lr
   d83ce:	bf00      	nop
   d83d0:	2003e7ec 	.word	0x2003e7ec
   d83d4:	2003e7e8 	.word	0x2003e7e8
   d83d8:	2003e7e4 	.word	0x2003e7e4
   d83dc:	2003e7e0 	.word	0x2003e7e0
   d83e0:	2003e7dc 	.word	0x2003e7dc
   d83e4:	2003e7d8 	.word	0x2003e7d8
   d83e8:	2003e7d4 	.word	0x2003e7d4
   d83ec:	2003e7d0 	.word	0x2003e7d0
   d83f0:	2003e7cc 	.word	0x2003e7cc
   d83f4:	2003e7c8 	.word	0x2003e7c8
   d83f8:	2003e7c4 	.word	0x2003e7c4
   d83fc:	2003e7c0 	.word	0x2003e7c0

000d8400 <__aeabi_drsub>:
   d8400:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d8404:	e002      	b.n	d840c <__adddf3>
   d8406:	bf00      	nop

000d8408 <__aeabi_dsub>:
   d8408:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d840c <__adddf3>:
   d840c:	b530      	push	{r4, r5, lr}
   d840e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d8412:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d8416:	ea94 0f05 	teq	r4, r5
   d841a:	bf08      	it	eq
   d841c:	ea90 0f02 	teqeq	r0, r2
   d8420:	bf1f      	itttt	ne
   d8422:	ea54 0c00 	orrsne.w	ip, r4, r0
   d8426:	ea55 0c02 	orrsne.w	ip, r5, r2
   d842a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d842e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8432:	f000 80e2 	beq.w	d85fa <__adddf3+0x1ee>
   d8436:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d843a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d843e:	bfb8      	it	lt
   d8440:	426d      	neglt	r5, r5
   d8442:	dd0c      	ble.n	d845e <__adddf3+0x52>
   d8444:	442c      	add	r4, r5
   d8446:	ea80 0202 	eor.w	r2, r0, r2
   d844a:	ea81 0303 	eor.w	r3, r1, r3
   d844e:	ea82 0000 	eor.w	r0, r2, r0
   d8452:	ea83 0101 	eor.w	r1, r3, r1
   d8456:	ea80 0202 	eor.w	r2, r0, r2
   d845a:	ea81 0303 	eor.w	r3, r1, r3
   d845e:	2d36      	cmp	r5, #54	; 0x36
   d8460:	bf88      	it	hi
   d8462:	bd30      	pophi	{r4, r5, pc}
   d8464:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d8468:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d846c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d8470:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d8474:	d002      	beq.n	d847c <__adddf3+0x70>
   d8476:	4240      	negs	r0, r0
   d8478:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d847c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d8480:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8484:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d8488:	d002      	beq.n	d8490 <__adddf3+0x84>
   d848a:	4252      	negs	r2, r2
   d848c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d8490:	ea94 0f05 	teq	r4, r5
   d8494:	f000 80a7 	beq.w	d85e6 <__adddf3+0x1da>
   d8498:	f1a4 0401 	sub.w	r4, r4, #1
   d849c:	f1d5 0e20 	rsbs	lr, r5, #32
   d84a0:	db0d      	blt.n	d84be <__adddf3+0xb2>
   d84a2:	fa02 fc0e 	lsl.w	ip, r2, lr
   d84a6:	fa22 f205 	lsr.w	r2, r2, r5
   d84aa:	1880      	adds	r0, r0, r2
   d84ac:	f141 0100 	adc.w	r1, r1, #0
   d84b0:	fa03 f20e 	lsl.w	r2, r3, lr
   d84b4:	1880      	adds	r0, r0, r2
   d84b6:	fa43 f305 	asr.w	r3, r3, r5
   d84ba:	4159      	adcs	r1, r3
   d84bc:	e00e      	b.n	d84dc <__adddf3+0xd0>
   d84be:	f1a5 0520 	sub.w	r5, r5, #32
   d84c2:	f10e 0e20 	add.w	lr, lr, #32
   d84c6:	2a01      	cmp	r2, #1
   d84c8:	fa03 fc0e 	lsl.w	ip, r3, lr
   d84cc:	bf28      	it	cs
   d84ce:	f04c 0c02 	orrcs.w	ip, ip, #2
   d84d2:	fa43 f305 	asr.w	r3, r3, r5
   d84d6:	18c0      	adds	r0, r0, r3
   d84d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d84dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d84e0:	d507      	bpl.n	d84f2 <__adddf3+0xe6>
   d84e2:	f04f 0e00 	mov.w	lr, #0
   d84e6:	f1dc 0c00 	rsbs	ip, ip, #0
   d84ea:	eb7e 0000 	sbcs.w	r0, lr, r0
   d84ee:	eb6e 0101 	sbc.w	r1, lr, r1
   d84f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d84f6:	d31b      	bcc.n	d8530 <__adddf3+0x124>
   d84f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d84fc:	d30c      	bcc.n	d8518 <__adddf3+0x10c>
   d84fe:	0849      	lsrs	r1, r1, #1
   d8500:	ea5f 0030 	movs.w	r0, r0, rrx
   d8504:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d8508:	f104 0401 	add.w	r4, r4, #1
   d850c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d8510:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d8514:	f080 809a 	bcs.w	d864c <__adddf3+0x240>
   d8518:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d851c:	bf08      	it	eq
   d851e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8522:	f150 0000 	adcs.w	r0, r0, #0
   d8526:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d852a:	ea41 0105 	orr.w	r1, r1, r5
   d852e:	bd30      	pop	{r4, r5, pc}
   d8530:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d8534:	4140      	adcs	r0, r0
   d8536:	eb41 0101 	adc.w	r1, r1, r1
   d853a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d853e:	f1a4 0401 	sub.w	r4, r4, #1
   d8542:	d1e9      	bne.n	d8518 <__adddf3+0x10c>
   d8544:	f091 0f00 	teq	r1, #0
   d8548:	bf04      	itt	eq
   d854a:	4601      	moveq	r1, r0
   d854c:	2000      	moveq	r0, #0
   d854e:	fab1 f381 	clz	r3, r1
   d8552:	bf08      	it	eq
   d8554:	3320      	addeq	r3, #32
   d8556:	f1a3 030b 	sub.w	r3, r3, #11
   d855a:	f1b3 0220 	subs.w	r2, r3, #32
   d855e:	da0c      	bge.n	d857a <__adddf3+0x16e>
   d8560:	320c      	adds	r2, #12
   d8562:	dd08      	ble.n	d8576 <__adddf3+0x16a>
   d8564:	f102 0c14 	add.w	ip, r2, #20
   d8568:	f1c2 020c 	rsb	r2, r2, #12
   d856c:	fa01 f00c 	lsl.w	r0, r1, ip
   d8570:	fa21 f102 	lsr.w	r1, r1, r2
   d8574:	e00c      	b.n	d8590 <__adddf3+0x184>
   d8576:	f102 0214 	add.w	r2, r2, #20
   d857a:	bfd8      	it	le
   d857c:	f1c2 0c20 	rsble	ip, r2, #32
   d8580:	fa01 f102 	lsl.w	r1, r1, r2
   d8584:	fa20 fc0c 	lsr.w	ip, r0, ip
   d8588:	bfdc      	itt	le
   d858a:	ea41 010c 	orrle.w	r1, r1, ip
   d858e:	4090      	lslle	r0, r2
   d8590:	1ae4      	subs	r4, r4, r3
   d8592:	bfa2      	ittt	ge
   d8594:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d8598:	4329      	orrge	r1, r5
   d859a:	bd30      	popge	{r4, r5, pc}
   d859c:	ea6f 0404 	mvn.w	r4, r4
   d85a0:	3c1f      	subs	r4, #31
   d85a2:	da1c      	bge.n	d85de <__adddf3+0x1d2>
   d85a4:	340c      	adds	r4, #12
   d85a6:	dc0e      	bgt.n	d85c6 <__adddf3+0x1ba>
   d85a8:	f104 0414 	add.w	r4, r4, #20
   d85ac:	f1c4 0220 	rsb	r2, r4, #32
   d85b0:	fa20 f004 	lsr.w	r0, r0, r4
   d85b4:	fa01 f302 	lsl.w	r3, r1, r2
   d85b8:	ea40 0003 	orr.w	r0, r0, r3
   d85bc:	fa21 f304 	lsr.w	r3, r1, r4
   d85c0:	ea45 0103 	orr.w	r1, r5, r3
   d85c4:	bd30      	pop	{r4, r5, pc}
   d85c6:	f1c4 040c 	rsb	r4, r4, #12
   d85ca:	f1c4 0220 	rsb	r2, r4, #32
   d85ce:	fa20 f002 	lsr.w	r0, r0, r2
   d85d2:	fa01 f304 	lsl.w	r3, r1, r4
   d85d6:	ea40 0003 	orr.w	r0, r0, r3
   d85da:	4629      	mov	r1, r5
   d85dc:	bd30      	pop	{r4, r5, pc}
   d85de:	fa21 f004 	lsr.w	r0, r1, r4
   d85e2:	4629      	mov	r1, r5
   d85e4:	bd30      	pop	{r4, r5, pc}
   d85e6:	f094 0f00 	teq	r4, #0
   d85ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d85ee:	bf06      	itte	eq
   d85f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d85f4:	3401      	addeq	r4, #1
   d85f6:	3d01      	subne	r5, #1
   d85f8:	e74e      	b.n	d8498 <__adddf3+0x8c>
   d85fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d85fe:	bf18      	it	ne
   d8600:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8604:	d029      	beq.n	d865a <__adddf3+0x24e>
   d8606:	ea94 0f05 	teq	r4, r5
   d860a:	bf08      	it	eq
   d860c:	ea90 0f02 	teqeq	r0, r2
   d8610:	d005      	beq.n	d861e <__adddf3+0x212>
   d8612:	ea54 0c00 	orrs.w	ip, r4, r0
   d8616:	bf04      	itt	eq
   d8618:	4619      	moveq	r1, r3
   d861a:	4610      	moveq	r0, r2
   d861c:	bd30      	pop	{r4, r5, pc}
   d861e:	ea91 0f03 	teq	r1, r3
   d8622:	bf1e      	ittt	ne
   d8624:	2100      	movne	r1, #0
   d8626:	2000      	movne	r0, #0
   d8628:	bd30      	popne	{r4, r5, pc}
   d862a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d862e:	d105      	bne.n	d863c <__adddf3+0x230>
   d8630:	0040      	lsls	r0, r0, #1
   d8632:	4149      	adcs	r1, r1
   d8634:	bf28      	it	cs
   d8636:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d863a:	bd30      	pop	{r4, r5, pc}
   d863c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d8640:	bf3c      	itt	cc
   d8642:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d8646:	bd30      	popcc	{r4, r5, pc}
   d8648:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d864c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d8650:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8654:	f04f 0000 	mov.w	r0, #0
   d8658:	bd30      	pop	{r4, r5, pc}
   d865a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d865e:	bf1a      	itte	ne
   d8660:	4619      	movne	r1, r3
   d8662:	4610      	movne	r0, r2
   d8664:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d8668:	bf1c      	itt	ne
   d866a:	460b      	movne	r3, r1
   d866c:	4602      	movne	r2, r0
   d866e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8672:	bf06      	itte	eq
   d8674:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d8678:	ea91 0f03 	teqeq	r1, r3
   d867c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d8680:	bd30      	pop	{r4, r5, pc}
   d8682:	bf00      	nop

000d8684 <__aeabi_ui2d>:
   d8684:	f090 0f00 	teq	r0, #0
   d8688:	bf04      	itt	eq
   d868a:	2100      	moveq	r1, #0
   d868c:	4770      	bxeq	lr
   d868e:	b530      	push	{r4, r5, lr}
   d8690:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8694:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8698:	f04f 0500 	mov.w	r5, #0
   d869c:	f04f 0100 	mov.w	r1, #0
   d86a0:	e750      	b.n	d8544 <__adddf3+0x138>
   d86a2:	bf00      	nop

000d86a4 <__aeabi_i2d>:
   d86a4:	f090 0f00 	teq	r0, #0
   d86a8:	bf04      	itt	eq
   d86aa:	2100      	moveq	r1, #0
   d86ac:	4770      	bxeq	lr
   d86ae:	b530      	push	{r4, r5, lr}
   d86b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d86b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d86b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d86bc:	bf48      	it	mi
   d86be:	4240      	negmi	r0, r0
   d86c0:	f04f 0100 	mov.w	r1, #0
   d86c4:	e73e      	b.n	d8544 <__adddf3+0x138>
   d86c6:	bf00      	nop

000d86c8 <__aeabi_f2d>:
   d86c8:	0042      	lsls	r2, r0, #1
   d86ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d86ce:	ea4f 0131 	mov.w	r1, r1, rrx
   d86d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d86d6:	bf1f      	itttt	ne
   d86d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d86dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d86e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d86e4:	4770      	bxne	lr
   d86e6:	f092 0f00 	teq	r2, #0
   d86ea:	bf14      	ite	ne
   d86ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d86f0:	4770      	bxeq	lr
   d86f2:	b530      	push	{r4, r5, lr}
   d86f4:	f44f 7460 	mov.w	r4, #896	; 0x380
   d86f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d86fc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8700:	e720      	b.n	d8544 <__adddf3+0x138>
   d8702:	bf00      	nop

000d8704 <__aeabi_ul2d>:
   d8704:	ea50 0201 	orrs.w	r2, r0, r1
   d8708:	bf08      	it	eq
   d870a:	4770      	bxeq	lr
   d870c:	b530      	push	{r4, r5, lr}
   d870e:	f04f 0500 	mov.w	r5, #0
   d8712:	e00a      	b.n	d872a <__aeabi_l2d+0x16>

000d8714 <__aeabi_l2d>:
   d8714:	ea50 0201 	orrs.w	r2, r0, r1
   d8718:	bf08      	it	eq
   d871a:	4770      	bxeq	lr
   d871c:	b530      	push	{r4, r5, lr}
   d871e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d8722:	d502      	bpl.n	d872a <__aeabi_l2d+0x16>
   d8724:	4240      	negs	r0, r0
   d8726:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d872a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d872e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8732:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d8736:	f43f aedc 	beq.w	d84f2 <__adddf3+0xe6>
   d873a:	f04f 0203 	mov.w	r2, #3
   d873e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8742:	bf18      	it	ne
   d8744:	3203      	addne	r2, #3
   d8746:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d874a:	bf18      	it	ne
   d874c:	3203      	addne	r2, #3
   d874e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d8752:	f1c2 0320 	rsb	r3, r2, #32
   d8756:	fa00 fc03 	lsl.w	ip, r0, r3
   d875a:	fa20 f002 	lsr.w	r0, r0, r2
   d875e:	fa01 fe03 	lsl.w	lr, r1, r3
   d8762:	ea40 000e 	orr.w	r0, r0, lr
   d8766:	fa21 f102 	lsr.w	r1, r1, r2
   d876a:	4414      	add	r4, r2
   d876c:	e6c1      	b.n	d84f2 <__adddf3+0xe6>
   d876e:	bf00      	nop

000d8770 <__aeabi_dmul>:
   d8770:	b570      	push	{r4, r5, r6, lr}
   d8772:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8776:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d877a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d877e:	bf1d      	ittte	ne
   d8780:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8784:	ea94 0f0c 	teqne	r4, ip
   d8788:	ea95 0f0c 	teqne	r5, ip
   d878c:	f000 f8de 	bleq	d894c <__aeabi_dmul+0x1dc>
   d8790:	442c      	add	r4, r5
   d8792:	ea81 0603 	eor.w	r6, r1, r3
   d8796:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d879a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d879e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d87a2:	bf18      	it	ne
   d87a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d87a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d87ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d87b0:	d038      	beq.n	d8824 <__aeabi_dmul+0xb4>
   d87b2:	fba0 ce02 	umull	ip, lr, r0, r2
   d87b6:	f04f 0500 	mov.w	r5, #0
   d87ba:	fbe1 e502 	umlal	lr, r5, r1, r2
   d87be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d87c2:	fbe0 e503 	umlal	lr, r5, r0, r3
   d87c6:	f04f 0600 	mov.w	r6, #0
   d87ca:	fbe1 5603 	umlal	r5, r6, r1, r3
   d87ce:	f09c 0f00 	teq	ip, #0
   d87d2:	bf18      	it	ne
   d87d4:	f04e 0e01 	orrne.w	lr, lr, #1
   d87d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d87dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d87e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d87e4:	d204      	bcs.n	d87f0 <__aeabi_dmul+0x80>
   d87e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d87ea:	416d      	adcs	r5, r5
   d87ec:	eb46 0606 	adc.w	r6, r6, r6
   d87f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d87f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d87f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d87fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d8800:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d8804:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8808:	bf88      	it	hi
   d880a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d880e:	d81e      	bhi.n	d884e <__aeabi_dmul+0xde>
   d8810:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d8814:	bf08      	it	eq
   d8816:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d881a:	f150 0000 	adcs.w	r0, r0, #0
   d881e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8822:	bd70      	pop	{r4, r5, r6, pc}
   d8824:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d8828:	ea46 0101 	orr.w	r1, r6, r1
   d882c:	ea40 0002 	orr.w	r0, r0, r2
   d8830:	ea81 0103 	eor.w	r1, r1, r3
   d8834:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d8838:	bfc2      	ittt	gt
   d883a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d883e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8842:	bd70      	popgt	{r4, r5, r6, pc}
   d8844:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8848:	f04f 0e00 	mov.w	lr, #0
   d884c:	3c01      	subs	r4, #1
   d884e:	f300 80ab 	bgt.w	d89a8 <__aeabi_dmul+0x238>
   d8852:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d8856:	bfde      	ittt	le
   d8858:	2000      	movle	r0, #0
   d885a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d885e:	bd70      	pople	{r4, r5, r6, pc}
   d8860:	f1c4 0400 	rsb	r4, r4, #0
   d8864:	3c20      	subs	r4, #32
   d8866:	da35      	bge.n	d88d4 <__aeabi_dmul+0x164>
   d8868:	340c      	adds	r4, #12
   d886a:	dc1b      	bgt.n	d88a4 <__aeabi_dmul+0x134>
   d886c:	f104 0414 	add.w	r4, r4, #20
   d8870:	f1c4 0520 	rsb	r5, r4, #32
   d8874:	fa00 f305 	lsl.w	r3, r0, r5
   d8878:	fa20 f004 	lsr.w	r0, r0, r4
   d887c:	fa01 f205 	lsl.w	r2, r1, r5
   d8880:	ea40 0002 	orr.w	r0, r0, r2
   d8884:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d8888:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d888c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8890:	fa21 f604 	lsr.w	r6, r1, r4
   d8894:	eb42 0106 	adc.w	r1, r2, r6
   d8898:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d889c:	bf08      	it	eq
   d889e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d88a2:	bd70      	pop	{r4, r5, r6, pc}
   d88a4:	f1c4 040c 	rsb	r4, r4, #12
   d88a8:	f1c4 0520 	rsb	r5, r4, #32
   d88ac:	fa00 f304 	lsl.w	r3, r0, r4
   d88b0:	fa20 f005 	lsr.w	r0, r0, r5
   d88b4:	fa01 f204 	lsl.w	r2, r1, r4
   d88b8:	ea40 0002 	orr.w	r0, r0, r2
   d88bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d88c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d88c4:	f141 0100 	adc.w	r1, r1, #0
   d88c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d88cc:	bf08      	it	eq
   d88ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d88d2:	bd70      	pop	{r4, r5, r6, pc}
   d88d4:	f1c4 0520 	rsb	r5, r4, #32
   d88d8:	fa00 f205 	lsl.w	r2, r0, r5
   d88dc:	ea4e 0e02 	orr.w	lr, lr, r2
   d88e0:	fa20 f304 	lsr.w	r3, r0, r4
   d88e4:	fa01 f205 	lsl.w	r2, r1, r5
   d88e8:	ea43 0302 	orr.w	r3, r3, r2
   d88ec:	fa21 f004 	lsr.w	r0, r1, r4
   d88f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d88f4:	fa21 f204 	lsr.w	r2, r1, r4
   d88f8:	ea20 0002 	bic.w	r0, r0, r2
   d88fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d8900:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8904:	bf08      	it	eq
   d8906:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d890a:	bd70      	pop	{r4, r5, r6, pc}
   d890c:	f094 0f00 	teq	r4, #0
   d8910:	d10f      	bne.n	d8932 <__aeabi_dmul+0x1c2>
   d8912:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d8916:	0040      	lsls	r0, r0, #1
   d8918:	eb41 0101 	adc.w	r1, r1, r1
   d891c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8920:	bf08      	it	eq
   d8922:	3c01      	subeq	r4, #1
   d8924:	d0f7      	beq.n	d8916 <__aeabi_dmul+0x1a6>
   d8926:	ea41 0106 	orr.w	r1, r1, r6
   d892a:	f095 0f00 	teq	r5, #0
   d892e:	bf18      	it	ne
   d8930:	4770      	bxne	lr
   d8932:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d8936:	0052      	lsls	r2, r2, #1
   d8938:	eb43 0303 	adc.w	r3, r3, r3
   d893c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d8940:	bf08      	it	eq
   d8942:	3d01      	subeq	r5, #1
   d8944:	d0f7      	beq.n	d8936 <__aeabi_dmul+0x1c6>
   d8946:	ea43 0306 	orr.w	r3, r3, r6
   d894a:	4770      	bx	lr
   d894c:	ea94 0f0c 	teq	r4, ip
   d8950:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8954:	bf18      	it	ne
   d8956:	ea95 0f0c 	teqne	r5, ip
   d895a:	d00c      	beq.n	d8976 <__aeabi_dmul+0x206>
   d895c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8960:	bf18      	it	ne
   d8962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8966:	d1d1      	bne.n	d890c <__aeabi_dmul+0x19c>
   d8968:	ea81 0103 	eor.w	r1, r1, r3
   d896c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8970:	f04f 0000 	mov.w	r0, #0
   d8974:	bd70      	pop	{r4, r5, r6, pc}
   d8976:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d897a:	bf06      	itte	eq
   d897c:	4610      	moveq	r0, r2
   d897e:	4619      	moveq	r1, r3
   d8980:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8984:	d019      	beq.n	d89ba <__aeabi_dmul+0x24a>
   d8986:	ea94 0f0c 	teq	r4, ip
   d898a:	d102      	bne.n	d8992 <__aeabi_dmul+0x222>
   d898c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d8990:	d113      	bne.n	d89ba <__aeabi_dmul+0x24a>
   d8992:	ea95 0f0c 	teq	r5, ip
   d8996:	d105      	bne.n	d89a4 <__aeabi_dmul+0x234>
   d8998:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d899c:	bf1c      	itt	ne
   d899e:	4610      	movne	r0, r2
   d89a0:	4619      	movne	r1, r3
   d89a2:	d10a      	bne.n	d89ba <__aeabi_dmul+0x24a>
   d89a4:	ea81 0103 	eor.w	r1, r1, r3
   d89a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d89ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d89b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d89b4:	f04f 0000 	mov.w	r0, #0
   d89b8:	bd70      	pop	{r4, r5, r6, pc}
   d89ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d89be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d89c2:	bd70      	pop	{r4, r5, r6, pc}

000d89c4 <__aeabi_ddiv>:
   d89c4:	b570      	push	{r4, r5, r6, lr}
   d89c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d89ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d89ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d89d2:	bf1d      	ittte	ne
   d89d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d89d8:	ea94 0f0c 	teqne	r4, ip
   d89dc:	ea95 0f0c 	teqne	r5, ip
   d89e0:	f000 f8a7 	bleq	d8b32 <__aeabi_ddiv+0x16e>
   d89e4:	eba4 0405 	sub.w	r4, r4, r5
   d89e8:	ea81 0e03 	eor.w	lr, r1, r3
   d89ec:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d89f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d89f4:	f000 8088 	beq.w	d8b08 <__aeabi_ddiv+0x144>
   d89f8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d89fc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d8a00:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d8a04:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d8a08:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d8a0c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d8a10:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d8a14:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d8a18:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d8a1c:	429d      	cmp	r5, r3
   d8a1e:	bf08      	it	eq
   d8a20:	4296      	cmpeq	r6, r2
   d8a22:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d8a26:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d8a2a:	d202      	bcs.n	d8a32 <__aeabi_ddiv+0x6e>
   d8a2c:	085b      	lsrs	r3, r3, #1
   d8a2e:	ea4f 0232 	mov.w	r2, r2, rrx
   d8a32:	1ab6      	subs	r6, r6, r2
   d8a34:	eb65 0503 	sbc.w	r5, r5, r3
   d8a38:	085b      	lsrs	r3, r3, #1
   d8a3a:	ea4f 0232 	mov.w	r2, r2, rrx
   d8a3e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d8a42:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d8a46:	ebb6 0e02 	subs.w	lr, r6, r2
   d8a4a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8a4e:	bf22      	ittt	cs
   d8a50:	1ab6      	subcs	r6, r6, r2
   d8a52:	4675      	movcs	r5, lr
   d8a54:	ea40 000c 	orrcs.w	r0, r0, ip
   d8a58:	085b      	lsrs	r3, r3, #1
   d8a5a:	ea4f 0232 	mov.w	r2, r2, rrx
   d8a5e:	ebb6 0e02 	subs.w	lr, r6, r2
   d8a62:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8a66:	bf22      	ittt	cs
   d8a68:	1ab6      	subcs	r6, r6, r2
   d8a6a:	4675      	movcs	r5, lr
   d8a6c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d8a70:	085b      	lsrs	r3, r3, #1
   d8a72:	ea4f 0232 	mov.w	r2, r2, rrx
   d8a76:	ebb6 0e02 	subs.w	lr, r6, r2
   d8a7a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8a7e:	bf22      	ittt	cs
   d8a80:	1ab6      	subcs	r6, r6, r2
   d8a82:	4675      	movcs	r5, lr
   d8a84:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d8a88:	085b      	lsrs	r3, r3, #1
   d8a8a:	ea4f 0232 	mov.w	r2, r2, rrx
   d8a8e:	ebb6 0e02 	subs.w	lr, r6, r2
   d8a92:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8a96:	bf22      	ittt	cs
   d8a98:	1ab6      	subcs	r6, r6, r2
   d8a9a:	4675      	movcs	r5, lr
   d8a9c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d8aa0:	ea55 0e06 	orrs.w	lr, r5, r6
   d8aa4:	d018      	beq.n	d8ad8 <__aeabi_ddiv+0x114>
   d8aa6:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d8aaa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d8aae:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d8ab2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d8ab6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d8aba:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d8abe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d8ac2:	d1c0      	bne.n	d8a46 <__aeabi_ddiv+0x82>
   d8ac4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8ac8:	d10b      	bne.n	d8ae2 <__aeabi_ddiv+0x11e>
   d8aca:	ea41 0100 	orr.w	r1, r1, r0
   d8ace:	f04f 0000 	mov.w	r0, #0
   d8ad2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d8ad6:	e7b6      	b.n	d8a46 <__aeabi_ddiv+0x82>
   d8ad8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8adc:	bf04      	itt	eq
   d8ade:	4301      	orreq	r1, r0
   d8ae0:	2000      	moveq	r0, #0
   d8ae2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8ae6:	bf88      	it	hi
   d8ae8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8aec:	f63f aeaf 	bhi.w	d884e <__aeabi_dmul+0xde>
   d8af0:	ebb5 0c03 	subs.w	ip, r5, r3
   d8af4:	bf04      	itt	eq
   d8af6:	ebb6 0c02 	subseq.w	ip, r6, r2
   d8afa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8afe:	f150 0000 	adcs.w	r0, r0, #0
   d8b02:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8b06:	bd70      	pop	{r4, r5, r6, pc}
   d8b08:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d8b0c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d8b10:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d8b14:	bfc2      	ittt	gt
   d8b16:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8b1a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8b1e:	bd70      	popgt	{r4, r5, r6, pc}
   d8b20:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8b24:	f04f 0e00 	mov.w	lr, #0
   d8b28:	3c01      	subs	r4, #1
   d8b2a:	e690      	b.n	d884e <__aeabi_dmul+0xde>
   d8b2c:	ea45 0e06 	orr.w	lr, r5, r6
   d8b30:	e68d      	b.n	d884e <__aeabi_dmul+0xde>
   d8b32:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8b36:	ea94 0f0c 	teq	r4, ip
   d8b3a:	bf08      	it	eq
   d8b3c:	ea95 0f0c 	teqeq	r5, ip
   d8b40:	f43f af3b 	beq.w	d89ba <__aeabi_dmul+0x24a>
   d8b44:	ea94 0f0c 	teq	r4, ip
   d8b48:	d10a      	bne.n	d8b60 <__aeabi_ddiv+0x19c>
   d8b4a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8b4e:	f47f af34 	bne.w	d89ba <__aeabi_dmul+0x24a>
   d8b52:	ea95 0f0c 	teq	r5, ip
   d8b56:	f47f af25 	bne.w	d89a4 <__aeabi_dmul+0x234>
   d8b5a:	4610      	mov	r0, r2
   d8b5c:	4619      	mov	r1, r3
   d8b5e:	e72c      	b.n	d89ba <__aeabi_dmul+0x24a>
   d8b60:	ea95 0f0c 	teq	r5, ip
   d8b64:	d106      	bne.n	d8b74 <__aeabi_ddiv+0x1b0>
   d8b66:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8b6a:	f43f aefd 	beq.w	d8968 <__aeabi_dmul+0x1f8>
   d8b6e:	4610      	mov	r0, r2
   d8b70:	4619      	mov	r1, r3
   d8b72:	e722      	b.n	d89ba <__aeabi_dmul+0x24a>
   d8b74:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8b78:	bf18      	it	ne
   d8b7a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8b7e:	f47f aec5 	bne.w	d890c <__aeabi_dmul+0x19c>
   d8b82:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d8b86:	f47f af0d 	bne.w	d89a4 <__aeabi_dmul+0x234>
   d8b8a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d8b8e:	f47f aeeb 	bne.w	d8968 <__aeabi_dmul+0x1f8>
   d8b92:	e712      	b.n	d89ba <__aeabi_dmul+0x24a>

000d8b94 <__aeabi_d2uiz>:
   d8b94:	004a      	lsls	r2, r1, #1
   d8b96:	d211      	bcs.n	d8bbc <__aeabi_d2uiz+0x28>
   d8b98:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d8b9c:	d211      	bcs.n	d8bc2 <__aeabi_d2uiz+0x2e>
   d8b9e:	d50d      	bpl.n	d8bbc <__aeabi_d2uiz+0x28>
   d8ba0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d8ba4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d8ba8:	d40e      	bmi.n	d8bc8 <__aeabi_d2uiz+0x34>
   d8baa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8bae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d8bb2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d8bb6:	fa23 f002 	lsr.w	r0, r3, r2
   d8bba:	4770      	bx	lr
   d8bbc:	f04f 0000 	mov.w	r0, #0
   d8bc0:	4770      	bx	lr
   d8bc2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d8bc6:	d102      	bne.n	d8bce <__aeabi_d2uiz+0x3a>
   d8bc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d8bcc:	4770      	bx	lr
   d8bce:	f04f 0000 	mov.w	r0, #0
   d8bd2:	4770      	bx	lr

000d8bd4 <__aeabi_d2f>:
   d8bd4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d8bd8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d8bdc:	bf24      	itt	cs
   d8bde:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d8be2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d8be6:	d90d      	bls.n	d8c04 <__aeabi_d2f+0x30>
   d8be8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d8bec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d8bf0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d8bf4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d8bf8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d8bfc:	bf08      	it	eq
   d8bfe:	f020 0001 	biceq.w	r0, r0, #1
   d8c02:	4770      	bx	lr
   d8c04:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d8c08:	d121      	bne.n	d8c4e <__aeabi_d2f+0x7a>
   d8c0a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d8c0e:	bfbc      	itt	lt
   d8c10:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d8c14:	4770      	bxlt	lr
   d8c16:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8c1a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d8c1e:	f1c2 0218 	rsb	r2, r2, #24
   d8c22:	f1c2 0c20 	rsb	ip, r2, #32
   d8c26:	fa10 f30c 	lsls.w	r3, r0, ip
   d8c2a:	fa20 f002 	lsr.w	r0, r0, r2
   d8c2e:	bf18      	it	ne
   d8c30:	f040 0001 	orrne.w	r0, r0, #1
   d8c34:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8c38:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d8c3c:	fa03 fc0c 	lsl.w	ip, r3, ip
   d8c40:	ea40 000c 	orr.w	r0, r0, ip
   d8c44:	fa23 f302 	lsr.w	r3, r3, r2
   d8c48:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d8c4c:	e7cc      	b.n	d8be8 <__aeabi_d2f+0x14>
   d8c4e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d8c52:	d107      	bne.n	d8c64 <__aeabi_d2f+0x90>
   d8c54:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d8c58:	bf1e      	ittt	ne
   d8c5a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d8c5e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d8c62:	4770      	bxne	lr
   d8c64:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d8c68:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d8c6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d8c70:	4770      	bx	lr
   d8c72:	bf00      	nop

000d8c74 <__cxa_atexit>:
   d8c74:	b510      	push	{r4, lr}
   d8c76:	4c05      	ldr	r4, [pc, #20]	; (d8c8c <__cxa_atexit+0x18>)
   d8c78:	4613      	mov	r3, r2
   d8c7a:	b12c      	cbz	r4, d8c88 <__cxa_atexit+0x14>
   d8c7c:	460a      	mov	r2, r1
   d8c7e:	4601      	mov	r1, r0
   d8c80:	2002      	movs	r0, #2
   d8c82:	f3af 8000 	nop.w
   d8c86:	bd10      	pop	{r4, pc}
   d8c88:	4620      	mov	r0, r4
   d8c8a:	bd10      	pop	{r4, pc}
   d8c8c:	00000000 	.word	0x00000000

000d8c90 <memcmp>:
   d8c90:	b510      	push	{r4, lr}
   d8c92:	3901      	subs	r1, #1
   d8c94:	4402      	add	r2, r0
   d8c96:	4290      	cmp	r0, r2
   d8c98:	d007      	beq.n	d8caa <memcmp+0x1a>
   d8c9a:	f810 3b01 	ldrb.w	r3, [r0], #1
   d8c9e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d8ca2:	42a3      	cmp	r3, r4
   d8ca4:	d0f7      	beq.n	d8c96 <memcmp+0x6>
   d8ca6:	1b18      	subs	r0, r3, r4
   d8ca8:	bd10      	pop	{r4, pc}
   d8caa:	2000      	movs	r0, #0
   d8cac:	bd10      	pop	{r4, pc}

000d8cae <memcpy>:
   d8cae:	b510      	push	{r4, lr}
   d8cb0:	1e43      	subs	r3, r0, #1
   d8cb2:	440a      	add	r2, r1
   d8cb4:	4291      	cmp	r1, r2
   d8cb6:	d004      	beq.n	d8cc2 <memcpy+0x14>
   d8cb8:	f811 4b01 	ldrb.w	r4, [r1], #1
   d8cbc:	f803 4f01 	strb.w	r4, [r3, #1]!
   d8cc0:	e7f8      	b.n	d8cb4 <memcpy+0x6>
   d8cc2:	bd10      	pop	{r4, pc}

000d8cc4 <memmove>:
   d8cc4:	4288      	cmp	r0, r1
   d8cc6:	b510      	push	{r4, lr}
   d8cc8:	eb01 0302 	add.w	r3, r1, r2
   d8ccc:	d801      	bhi.n	d8cd2 <memmove+0xe>
   d8cce:	1e42      	subs	r2, r0, #1
   d8cd0:	e00b      	b.n	d8cea <memmove+0x26>
   d8cd2:	4298      	cmp	r0, r3
   d8cd4:	d2fb      	bcs.n	d8cce <memmove+0xa>
   d8cd6:	1881      	adds	r1, r0, r2
   d8cd8:	1ad2      	subs	r2, r2, r3
   d8cda:	42d3      	cmn	r3, r2
   d8cdc:	d004      	beq.n	d8ce8 <memmove+0x24>
   d8cde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d8ce2:	f801 4d01 	strb.w	r4, [r1, #-1]!
   d8ce6:	e7f8      	b.n	d8cda <memmove+0x16>
   d8ce8:	bd10      	pop	{r4, pc}
   d8cea:	4299      	cmp	r1, r3
   d8cec:	d004      	beq.n	d8cf8 <memmove+0x34>
   d8cee:	f811 4b01 	ldrb.w	r4, [r1], #1
   d8cf2:	f802 4f01 	strb.w	r4, [r2, #1]!
   d8cf6:	e7f8      	b.n	d8cea <memmove+0x26>
   d8cf8:	bd10      	pop	{r4, pc}

000d8cfa <memset>:
   d8cfa:	4402      	add	r2, r0
   d8cfc:	4603      	mov	r3, r0
   d8cfe:	4293      	cmp	r3, r2
   d8d00:	d002      	beq.n	d8d08 <memset+0xe>
   d8d02:	f803 1b01 	strb.w	r1, [r3], #1
   d8d06:	e7fa      	b.n	d8cfe <memset+0x4>
   d8d08:	4770      	bx	lr
	...

000d8d0c <srand>:
   d8d0c:	b538      	push	{r3, r4, r5, lr}
   d8d0e:	4b12      	ldr	r3, [pc, #72]	; (d8d58 <srand+0x4c>)
   d8d10:	681c      	ldr	r4, [r3, #0]
   d8d12:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d8d14:	4605      	mov	r5, r0
   d8d16:	b9d3      	cbnz	r3, d8d4e <srand+0x42>
   d8d18:	2018      	movs	r0, #24
   d8d1a:	f7fc f913 	bl	d4f44 <malloc>
   d8d1e:	f243 330e 	movw	r3, #13070	; 0x330e
   d8d22:	63a0      	str	r0, [r4, #56]	; 0x38
   d8d24:	8003      	strh	r3, [r0, #0]
   d8d26:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d8d2a:	8043      	strh	r3, [r0, #2]
   d8d2c:	f241 2334 	movw	r3, #4660	; 0x1234
   d8d30:	8083      	strh	r3, [r0, #4]
   d8d32:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d8d36:	80c3      	strh	r3, [r0, #6]
   d8d38:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d8d3c:	8103      	strh	r3, [r0, #8]
   d8d3e:	2305      	movs	r3, #5
   d8d40:	8143      	strh	r3, [r0, #10]
   d8d42:	230b      	movs	r3, #11
   d8d44:	8183      	strh	r3, [r0, #12]
   d8d46:	2201      	movs	r2, #1
   d8d48:	2300      	movs	r3, #0
   d8d4a:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d8d4e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d8d50:	2200      	movs	r2, #0
   d8d52:	611d      	str	r5, [r3, #16]
   d8d54:	615a      	str	r2, [r3, #20]
   d8d56:	bd38      	pop	{r3, r4, r5, pc}
   d8d58:	2003e290 	.word	0x2003e290

000d8d5c <rand>:
   d8d5c:	4b19      	ldr	r3, [pc, #100]	; (d8dc4 <rand+0x68>)
   d8d5e:	b510      	push	{r4, lr}
   d8d60:	681c      	ldr	r4, [r3, #0]
   d8d62:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d8d64:	b9d3      	cbnz	r3, d8d9c <rand+0x40>
   d8d66:	2018      	movs	r0, #24
   d8d68:	f7fc f8ec 	bl	d4f44 <malloc>
   d8d6c:	f243 330e 	movw	r3, #13070	; 0x330e
   d8d70:	63a0      	str	r0, [r4, #56]	; 0x38
   d8d72:	8003      	strh	r3, [r0, #0]
   d8d74:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d8d78:	8043      	strh	r3, [r0, #2]
   d8d7a:	f241 2334 	movw	r3, #4660	; 0x1234
   d8d7e:	8083      	strh	r3, [r0, #4]
   d8d80:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d8d84:	80c3      	strh	r3, [r0, #6]
   d8d86:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d8d8a:	8103      	strh	r3, [r0, #8]
   d8d8c:	2305      	movs	r3, #5
   d8d8e:	8143      	strh	r3, [r0, #10]
   d8d90:	230b      	movs	r3, #11
   d8d92:	8183      	strh	r3, [r0, #12]
   d8d94:	2201      	movs	r2, #1
   d8d96:	2300      	movs	r3, #0
   d8d98:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d8d9c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d8d9e:	4c0a      	ldr	r4, [pc, #40]	; (d8dc8 <rand+0x6c>)
   d8da0:	690b      	ldr	r3, [r1, #16]
   d8da2:	6948      	ldr	r0, [r1, #20]
   d8da4:	4a09      	ldr	r2, [pc, #36]	; (d8dcc <rand+0x70>)
   d8da6:	435c      	muls	r4, r3
   d8da8:	fb02 4000 	mla	r0, r2, r0, r4
   d8dac:	fba3 2302 	umull	r2, r3, r3, r2
   d8db0:	3201      	adds	r2, #1
   d8db2:	4403      	add	r3, r0
   d8db4:	f143 0300 	adc.w	r3, r3, #0
   d8db8:	e9c1 2304 	strd	r2, r3, [r1, #16]
   d8dbc:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   d8dc0:	bd10      	pop	{r4, pc}
   d8dc2:	bf00      	nop
   d8dc4:	2003e290 	.word	0x2003e290
   d8dc8:	5851f42d 	.word	0x5851f42d
   d8dcc:	4c957f2d 	.word	0x4c957f2d

000d8dd0 <strchr>:
   d8dd0:	b2c9      	uxtb	r1, r1
   d8dd2:	4603      	mov	r3, r0
   d8dd4:	f810 2b01 	ldrb.w	r2, [r0], #1
   d8dd8:	b11a      	cbz	r2, d8de2 <strchr+0x12>
   d8dda:	4291      	cmp	r1, r2
   d8ddc:	d1f9      	bne.n	d8dd2 <strchr+0x2>
   d8dde:	4618      	mov	r0, r3
   d8de0:	4770      	bx	lr
   d8de2:	2900      	cmp	r1, #0
   d8de4:	bf0c      	ite	eq
   d8de6:	4618      	moveq	r0, r3
   d8de8:	2000      	movne	r0, #0
   d8dea:	4770      	bx	lr

000d8dec <strchrnul>:
   d8dec:	b510      	push	{r4, lr}
   d8dee:	4604      	mov	r4, r0
   d8df0:	f7ff ffee 	bl	d8dd0 <strchr>
   d8df4:	b918      	cbnz	r0, d8dfe <strchrnul+0x12>
   d8df6:	4620      	mov	r0, r4
   d8df8:	f000 f80c 	bl	d8e14 <strlen>
   d8dfc:	4420      	add	r0, r4
   d8dfe:	bd10      	pop	{r4, pc}

000d8e00 <strcmp>:
   d8e00:	f810 2b01 	ldrb.w	r2, [r0], #1
   d8e04:	f811 3b01 	ldrb.w	r3, [r1], #1
   d8e08:	2a01      	cmp	r2, #1
   d8e0a:	bf28      	it	cs
   d8e0c:	429a      	cmpcs	r2, r3
   d8e0e:	d0f7      	beq.n	d8e00 <strcmp>
   d8e10:	1ad0      	subs	r0, r2, r3
   d8e12:	4770      	bx	lr

000d8e14 <strlen>:
   d8e14:	4603      	mov	r3, r0
   d8e16:	f813 2b01 	ldrb.w	r2, [r3], #1
   d8e1a:	2a00      	cmp	r2, #0
   d8e1c:	d1fb      	bne.n	d8e16 <strlen+0x2>
   d8e1e:	1a18      	subs	r0, r3, r0
   d8e20:	3801      	subs	r0, #1
   d8e22:	4770      	bx	lr

000d8e24 <strncmp>:
   d8e24:	b530      	push	{r4, r5, lr}
   d8e26:	b182      	cbz	r2, d8e4a <strncmp+0x26>
   d8e28:	1e45      	subs	r5, r0, #1
   d8e2a:	3901      	subs	r1, #1
   d8e2c:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d8e30:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d8e34:	42a3      	cmp	r3, r4
   d8e36:	d106      	bne.n	d8e46 <strncmp+0x22>
   d8e38:	43ec      	mvns	r4, r5
   d8e3a:	4414      	add	r4, r2
   d8e3c:	42e0      	cmn	r0, r4
   d8e3e:	d001      	beq.n	d8e44 <strncmp+0x20>
   d8e40:	2b00      	cmp	r3, #0
   d8e42:	d1f3      	bne.n	d8e2c <strncmp+0x8>
   d8e44:	461c      	mov	r4, r3
   d8e46:	1b18      	subs	r0, r3, r4
   d8e48:	bd30      	pop	{r4, r5, pc}
   d8e4a:	4610      	mov	r0, r2
   d8e4c:	bd30      	pop	{r4, r5, pc}

000d8e4e <strnlen>:
   d8e4e:	b510      	push	{r4, lr}
   d8e50:	4603      	mov	r3, r0
   d8e52:	4401      	add	r1, r0
   d8e54:	428b      	cmp	r3, r1
   d8e56:	d004      	beq.n	d8e62 <strnlen+0x14>
   d8e58:	781a      	ldrb	r2, [r3, #0]
   d8e5a:	1c5c      	adds	r4, r3, #1
   d8e5c:	b10a      	cbz	r2, d8e62 <strnlen+0x14>
   d8e5e:	4623      	mov	r3, r4
   d8e60:	e7f8      	b.n	d8e54 <strnlen+0x6>
   d8e62:	1a18      	subs	r0, r3, r0
   d8e64:	bd10      	pop	{r4, pc}

000d8e66 <strrchr>:
   d8e66:	b538      	push	{r3, r4, r5, lr}
   d8e68:	4603      	mov	r3, r0
   d8e6a:	460d      	mov	r5, r1
   d8e6c:	b141      	cbz	r1, d8e80 <strrchr+0x1a>
   d8e6e:	2400      	movs	r4, #0
   d8e70:	4629      	mov	r1, r5
   d8e72:	4618      	mov	r0, r3
   d8e74:	f7ff ffac 	bl	d8dd0 <strchr>
   d8e78:	b130      	cbz	r0, d8e88 <strrchr+0x22>
   d8e7a:	1c43      	adds	r3, r0, #1
   d8e7c:	4604      	mov	r4, r0
   d8e7e:	e7f7      	b.n	d8e70 <strrchr+0xa>
   d8e80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d8e84:	f7ff bfa4 	b.w	d8dd0 <strchr>
   d8e88:	4620      	mov	r0, r4
   d8e8a:	bd38      	pop	{r3, r4, r5, pc}

000d8e8c <_strtol_r>:
   d8e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8e90:	4680      	mov	r8, r0
   d8e92:	4840      	ldr	r0, [pc, #256]	; (d8f94 <_strtol_r+0x108>)
   d8e94:	f8d0 9000 	ldr.w	r9, [r0]
   d8e98:	460f      	mov	r7, r1
   d8e9a:	463d      	mov	r5, r7
   d8e9c:	f815 4b01 	ldrb.w	r4, [r5], #1
   d8ea0:	eb09 0004 	add.w	r0, r9, r4
   d8ea4:	7840      	ldrb	r0, [r0, #1]
   d8ea6:	f000 0008 	and.w	r0, r0, #8
   d8eaa:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   d8eae:	b108      	cbz	r0, d8eb4 <_strtol_r+0x28>
   d8eb0:	462f      	mov	r7, r5
   d8eb2:	e7f2      	b.n	d8e9a <_strtol_r+0xe>
   d8eb4:	2c2d      	cmp	r4, #45	; 0x2d
   d8eb6:	d103      	bne.n	d8ec0 <_strtol_r+0x34>
   d8eb8:	1cbd      	adds	r5, r7, #2
   d8eba:	787c      	ldrb	r4, [r7, #1]
   d8ebc:	2601      	movs	r6, #1
   d8ebe:	e003      	b.n	d8ec8 <_strtol_r+0x3c>
   d8ec0:	2c2b      	cmp	r4, #43	; 0x2b
   d8ec2:	bf04      	itt	eq
   d8ec4:	787c      	ldrbeq	r4, [r7, #1]
   d8ec6:	1cbd      	addeq	r5, r7, #2
   d8ec8:	b113      	cbz	r3, d8ed0 <_strtol_r+0x44>
   d8eca:	2b10      	cmp	r3, #16
   d8ecc:	d10a      	bne.n	d8ee4 <_strtol_r+0x58>
   d8ece:	e05b      	b.n	d8f88 <_strtol_r+0xfc>
   d8ed0:	2c30      	cmp	r4, #48	; 0x30
   d8ed2:	d157      	bne.n	d8f84 <_strtol_r+0xf8>
   d8ed4:	7828      	ldrb	r0, [r5, #0]
   d8ed6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d8eda:	2858      	cmp	r0, #88	; 0x58
   d8edc:	d14d      	bne.n	d8f7a <_strtol_r+0xee>
   d8ede:	786c      	ldrb	r4, [r5, #1]
   d8ee0:	2310      	movs	r3, #16
   d8ee2:	3502      	adds	r5, #2
   d8ee4:	2e00      	cmp	r6, #0
   d8ee6:	bf14      	ite	ne
   d8ee8:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   d8eec:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   d8ef0:	2700      	movs	r7, #0
   d8ef2:	fbbc faf3 	udiv	sl, ip, r3
   d8ef6:	4638      	mov	r0, r7
   d8ef8:	fb03 cc1a 	mls	ip, r3, sl, ip
   d8efc:	eb09 0e04 	add.w	lr, r9, r4
   d8f00:	f89e e001 	ldrb.w	lr, [lr, #1]
   d8f04:	f01e 0f04 	tst.w	lr, #4
   d8f08:	d001      	beq.n	d8f0e <_strtol_r+0x82>
   d8f0a:	3c30      	subs	r4, #48	; 0x30
   d8f0c:	e00b      	b.n	d8f26 <_strtol_r+0x9a>
   d8f0e:	f01e 0e03 	ands.w	lr, lr, #3
   d8f12:	d01b      	beq.n	d8f4c <_strtol_r+0xc0>
   d8f14:	f1be 0f01 	cmp.w	lr, #1
   d8f18:	bf0c      	ite	eq
   d8f1a:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d8f1e:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d8f22:	ebce 0404 	rsb	r4, lr, r4
   d8f26:	42a3      	cmp	r3, r4
   d8f28:	dd10      	ble.n	d8f4c <_strtol_r+0xc0>
   d8f2a:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   d8f2e:	d00a      	beq.n	d8f46 <_strtol_r+0xba>
   d8f30:	4550      	cmp	r0, sl
   d8f32:	d806      	bhi.n	d8f42 <_strtol_r+0xb6>
   d8f34:	d101      	bne.n	d8f3a <_strtol_r+0xae>
   d8f36:	4564      	cmp	r4, ip
   d8f38:	dc03      	bgt.n	d8f42 <_strtol_r+0xb6>
   d8f3a:	fb03 4000 	mla	r0, r3, r0, r4
   d8f3e:	2701      	movs	r7, #1
   d8f40:	e001      	b.n	d8f46 <_strtol_r+0xba>
   d8f42:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   d8f46:	f815 4b01 	ldrb.w	r4, [r5], #1
   d8f4a:	e7d7      	b.n	d8efc <_strtol_r+0x70>
   d8f4c:	1c7b      	adds	r3, r7, #1
   d8f4e:	d10c      	bne.n	d8f6a <_strtol_r+0xde>
   d8f50:	2e00      	cmp	r6, #0
   d8f52:	f04f 0322 	mov.w	r3, #34	; 0x22
   d8f56:	bf14      	ite	ne
   d8f58:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   d8f5c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d8f60:	f8c8 3000 	str.w	r3, [r8]
   d8f64:	b92a      	cbnz	r2, d8f72 <_strtol_r+0xe6>
   d8f66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8f6a:	b106      	cbz	r6, d8f6e <_strtol_r+0xe2>
   d8f6c:	4240      	negs	r0, r0
   d8f6e:	b172      	cbz	r2, d8f8e <_strtol_r+0x102>
   d8f70:	b107      	cbz	r7, d8f74 <_strtol_r+0xe8>
   d8f72:	1e69      	subs	r1, r5, #1
   d8f74:	6011      	str	r1, [r2, #0]
   d8f76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8f7a:	2430      	movs	r4, #48	; 0x30
   d8f7c:	2b00      	cmp	r3, #0
   d8f7e:	d1b1      	bne.n	d8ee4 <_strtol_r+0x58>
   d8f80:	2308      	movs	r3, #8
   d8f82:	e7af      	b.n	d8ee4 <_strtol_r+0x58>
   d8f84:	230a      	movs	r3, #10
   d8f86:	e7ad      	b.n	d8ee4 <_strtol_r+0x58>
   d8f88:	2c30      	cmp	r4, #48	; 0x30
   d8f8a:	d0a3      	beq.n	d8ed4 <_strtol_r+0x48>
   d8f8c:	e7aa      	b.n	d8ee4 <_strtol_r+0x58>
   d8f8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8f92:	bf00      	nop
   d8f94:	2003e22c 	.word	0x2003e22c

000d8f98 <strtol>:
   d8f98:	4613      	mov	r3, r2
   d8f9a:	460a      	mov	r2, r1
   d8f9c:	4601      	mov	r1, r0
   d8f9e:	4802      	ldr	r0, [pc, #8]	; (d8fa8 <strtol+0x10>)
   d8fa0:	6800      	ldr	r0, [r0, #0]
   d8fa2:	f7ff bf73 	b.w	d8e8c <_strtol_r>
   d8fa6:	bf00      	nop
   d8fa8:	2003e290 	.word	0x2003e290

000d8fac <dynalib_user>:
   d8fac:	000d4021 000d405d 000d4089 000d408d     !@..]@...@...@..
   d8fbc:	00000000                                ....

000d8fc0 <_ZTVN5spark10LogHandlerE>:
	...
   d8fd0:	000d40a9 000d40cd                       .@...@..

000d8fd8 <_ZTVN5spark16SerialLogHandlerE>:
	...
   d8fe0:	000d40d9 000d410d 000d7289 000d40cf     .@...A...r...@..
   d8ff0:	6f746f6d 6e612072 20656c67 74746573     motor angle sett
   d9000:	253d6465 61430075 2074276e 6e727574     ed=%u.Can't turn
   d9010:	6e6f6c20 68742067 31206e61 202c7330      long than 10s, 
   d9020:	646e6573 76206465 65756c61 0075253d     sended value=%u.
   d9030:	6c6c6977 72757420 0025206e 6f746f6d     will turn %.moto
   d9040:	6e612072 20656c67 6e727574 253d6465     r angle turned=%
   d9050:	65530075 20707574 6f746f4d 65722072     u.Setup Motor re
   d9060:	25206461 72410075 006e6f67 706d6574     ad %u.Argon.temp
   d9070:	74616200 64657200 65726700 62006e65     .bat.red.green.b
   d9080:	0065756c 74746f6d 7300726f 61797961     lue.mottor.sayya
   d9090:	45360063 30303034 422d3430 2d334135     c.6E400004-B5A3-
   d90a0:	33393346 4130452d 35452d39 34324530     F393-E0A9-E50E24
   d90b0:	41434344 36004539 30303445 2d333030     DCCA9E.6E400003-
   d90c0:	33413542 3933462d 30452d33 452d3941     B5A3-F393-E0A9-E
   d90d0:	32453035 43434434 00453941 30344536     50E24DCCA9E.6E40
   d90e0:	32303030 4135422d 33462d33 452d3339     0002-B5A3-F393-E
   d90f0:	2d394130 45303545 43443432 45394143     0A9-E50E24DCCA9E
   d9100:	34453600 30303030 35422d31 462d3341     .6E400001-B5A3-F
   d9110:	2d333933 39413045 3035452d 44343245     393-E0A9-E50E24D
   d9120:	39414343 30630045 64336630 322d3038     CCA9E.c00f3d80-2
   d9130:	2d613037 61653131 3438612d 65322d30     70a-11ea-a840-2e
   d9140:	63383237 31383865 63003532 33663030     728ce88125.c00f3
   d9150:	2d323263 61303732 6531312d 38612d61     c22-270a-11ea-a8
   d9160:	322d3034 38323765 38386563 00353231     40-2e728ce88125.
   d9170:	66303063 34383933 3037322d 31312d61     c00f3984-270a-11
   d9180:	612d6165 2d303438 32376532 38656338     ea-a840-2e728ce8
   d9190:	35323138 00000000                       8125....

000d9198 <_ZTVSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d91a0:	000d4faf 000d4fb5 000d5cd1 000d4fdf     .O...O...\...O..
   d91b0:	000d4fb1                                .O..

000d91b4 <_ZTVSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d91bc:	000d4fa9 000d4fc3 000d5dd9 000d4fe3     .O...O...]...O..
   d91cc:	000d4fab                                .O..

000d91d0 <_ZTVSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d91d8:	000d4fa3 000d4fd1 000d578f 000d4fe7     .O...O...W...O..
   d91e8:	000d4fa5                                .O..

000d91ec <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   d91ec:	7427e37b ac15f87b 13a949dd f5720000     {.'t{....I....r.
   d91fc:	69726977 622e676e 5300656c 74726174     wiring.ble.Start
   d920c:	73696420 65766f63 676e6972 72657320      discovering ser
   d921c:	65636976 53002e73 74726174 73696420     vices..Start dis
   d922c:	65766f63 676e6972 61686320 74636172     covering charact
   d923c:	73697265 73636974 6550002e 64207265     eristics..Peer d
   d924c:	63697665 73692065 73696d20 676e6973     evice is missing
   d925c:	61460021 64656c69 206f7420 65707061     !.Failed to appe
   d926c:	7020646e 20726565 746e6543 206c6172     nd peer Central 
   d927c:	69766564 002e6563 6e6e6f43 65746365     device..Connecte
   d928c:	79622064 6e654320 6c617274 76656420     d by Central dev
   d929c:	2e656369 73694400 6e6e6f63 65746365     ice..Disconnecte
   d92ac:	79622064 6d657220 2065746f 69766564     d by remote devi
   d92bc:	002e6563 6e6e6143 6120746f 6e206464     ce..Cannot add n
   d92cc:	70207765 20726565 69766564 002e6563     ew peer device..
   d92dc:	2077654e 69726570 72656870 69206c61     New peripheral i
   d92ec:	6f632073 63656e6e 2e646574 69614600     s connected..Fai
   d92fc:	2064656c 61206f74 6e657070 69642064     led to append di
   d930c:	766f6373 64657265 61686320 74636172     scovered charact
   d931c:	73697265 2e636974 69614600 2064656c     eristic..Failed 
   d932c:	61206f74 6e657070 69642064 766f6373     to append discov
   d933c:	64657265 72657320 65636976 6146002e     ered service..Fa
   d934c:	64656c69 206f7420 65707061 6c20646e     iled to append l
   d935c:	6c61636f 61686320 74636172 73697265     ocal characteris
   d936c:	2e636974 70754400 6163696c 20646574     tic..Duplicated 
   d937c:	72616863 65746361 74736972 63206369     characteristic c
   d938c:	6f6e6e61 65622074 64646120 002e6465     annot be added..

000d939c <_ZTVN5spark13EthernetClassE>:
	...
   d93a4:	000d6135 000d612b 000d6121 000d6117     5a..+a..!a...a..
   d93b4:	000d610b 000d60ff 000d60f3 000d60eb     .a...`...`...`..
   d93c4:	000d60e1 000d60d7 000d7781              .`...`...w..

000d93d0 <_ZTV7TwoWire>:
	...
   d93d8:	000d6155 000d619f 000d6177 000d6157     Ua...a..wa..Wa..
   d93e8:	000d617f 000d6187 000d618f 000d6197     .a...a...a...a..

000d93f8 <_ZTV9IPAddress>:
	...
   d9400:	000d61e9 000d61d9 000d61db 00302e30     .a...a...a..0.0.
   d9410:	736c6166 72740065 25006575 67250064     false.true.%d.%g
   d9420:	6c756e00 2575006c 00783430              .null.u%04x.

000d942c <_ZTVN5spark16JSONStreamWriterE>:
	...
   d9434:	000d666d 000d6693 000d6647 000d62eb     mf...f..Gf...b..

000d9444 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   d944c:	000d6ae9 000d6afd 000d743d 000d664f     .j...j..=t..Of..

000d945c <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   d9464:	000d6669 000d66af 000d6a01 000d66bd     if...f...j...f..
   d9474:	64756162 72655300 006c6169 69726553     baud.Serial.Seri
   d9484:	00316c61 65707974 72617000 63006d61     al1.type.param.c
   d9494:	6900646d 6e680064 74730064 66006d72     md.id.hnd.strm.f
   d94a4:	00746c69 006c766c 48646461 6c646e61     ilt.lvl.addHandl
   d94b4:	72007265 766f6d65 6e614865 72656c64     er.removeHandler
   d94c4:	756e6500 6e61486d 72656c64 534a0073     .enumHandlers.JS
   d94d4:	74534e4f 6d616572 48676f4c 6c646e61     ONStreamLogHandl
   d94e4:	61007265 25007070 75303130 205d0020     er.app.%010u .] 
   d94f4:	00202c00 203a2928 005b2000 65646f63     ., .(): . [.code
   d9504:	00203d20 64006925 69617465 3d20736c      = .%i.details =
   d9514:	0a0d0020 6c006600 6e66006e 646f6300      ....f.ln.fn.cod
   d9524:	65640065 6c696174 6e6f6e00 72740065     e.detail.none.tr
   d9534:	00656361 6f666e69 72617700 7265006e     ace.info.warn.er
   d9544:	00726f72 696e6170 6c610063 0000006c     ror.panic.all...

000d9554 <_ZTVN5spark16StreamLogHandlerE>:
	...
   d955c:	000d6abd 000d6ad5 000d7289 000d40cf     .j...j...r...@..

000d956c <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   d9574:	000d666b 000d66a1 000d71b1 000d6651     kf...f...q..Qf..

000d9584 <_ZTVN5spark9MeshClassE>:
	...
   d958c:	000d7613 000d7609 000d75ff 000d75f5     .v...v...u...u..
   d959c:	000d75e9 000d75dd 000d75d1 000d75c9     .u...u...u...u..
   d95ac:	000d75bf 000d75b5 000d7781              .u...u...w..

000d95b8 <_ZTVN5spark12NetworkClassE>:
	...
   d95c0:	000d7719 000d7723 000d772d 000d7737     .w..#w..-w..7w..
   d95d0:	000d7741 000d774d 000d7759 000d7765     Aw..Mw..Yw..ew..
   d95e0:	000d776d 000d7777 000d7781              mw..ww...w..

000d95ec <_ZTV8SPIClass>:
	...
   d95f4:	000d7b4b 000d7b4d 2b25005a 3a643330     K{..M{..Z.%+03d:
   d9604:	75323025 2d592500 252d6d25 48255464     %02u.%Y-%m-%dT%H
   d9614:	3a4d253a 7a255325 63736100 656d6974     :%M:%S%z.asctime
   d9624:	00000000                                ....

000d9628 <_ZTV11USARTSerial>:
	...
   d9630:	000d7ce1 000d7d31 000d7d3f 000d7861     .|..1}..?}..ax..
   d9640:	000d7cf5 000d7d17 000d7d03 000d7d2b     .|...}...}..+}..
   d9650:	000d7ce3 000d7ce7                       .|...|..

000d9658 <_ZTV9USBSerial>:
	...
   d9660:	000d7dfd 000d7e4d 000d7e5b 000d7861     .}..M~..[~..ax..
   d9670:	000d7e39 000d7dff 000d7e15 000d7e47     9~...}...~..G~..
   d9680:	000d7e2b 000d7df9                       +~...}..

000d9688 <_ZTVN5spark9WiFiClassE>:
	...
   d9690:	000d7f73 000d7f69 000d7f5f 000d7f15     s...i..._.......
   d96a0:	000d7f53 000d7f47 000d7f3b 000d7f33     S...G...;...3...
   d96b0:	000d7f29 000d7f1f 000d7781              )........w..

000d96bc <_ZSt7nothrow>:
	...

000d96bd <_ctype_>:
   d96bd:	20202000 20202020 28282020 20282828     .         ((((( 
   d96cd:	20202020 20202020 20202020 20202020                     
   d96dd:	10108820 10101010 10101010 10101010      ...............
   d96ed:	04040410 04040404 10040404 10101010     ................
   d96fd:	41411010 41414141 01010101 01010101     ..AAAAAA........
   d970d:	01010101 01010101 01010101 10101010     ................
   d971d:	42421010 42424242 02020202 02020202     ..BBBBBB........
   d972d:	02020202 02020202 02020202 10101010     ................
   d973d:	00000020 00000000 00000000 00000000      ...............
	...

000d97c0 <__sf_fake_stdin>:
	...

000d97e0 <__sf_fake_stdout>:
	...

000d9800 <__sf_fake_stderr>:
	...
   d9820:	00000043                                         C.

000d9822 <link_const_variable_data_end>:
	...

000d9824 <link_constructors_location>:
   d9824:	000d469d 	.word	0x000d469d
   d9828:	000d60b5 	.word	0x000d60b5
   d982c:	000d6141 	.word	0x000d6141
   d9830:	000d7279 	.word	0x000d7279
   d9834:	000d76c9 	.word	0x000d76c9
   d9838:	000d784d 	.word	0x000d784d
   d983c:	000d79f1 	.word	0x000d79f1
   d9840:	000d7cb5 	.word	0x000d7cb5
   d9844:	000d7ccd 	.word	0x000d7ccd
   d9848:	000d7f7d 	.word	0x000d7f7d
   d984c:	000d80ed 	.word	0x000d80ed
   d9850:	000d8171 	.word	0x000d8171
   d9854:	000d8235 	.word	0x000d8235
   d9858:	000d82b9 	.word	0x000d82b9
   d985c:	000d833d 	.word	0x000d833d
